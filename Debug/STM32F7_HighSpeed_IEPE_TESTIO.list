
STM32F7_HighSpeed_IEPE_TESTIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0dc  08008200  08008200  00008200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080132e0  080132e0  000132e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133f8  080133f8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080133f8  080133f8  000133f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013400  08013400  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013400  08013400  00013400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013404  08013404  00013404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08013408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c898  20000020  08013424  00020020  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2001c8b8  08013424  0002c8b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c649  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003ce7  00000000  00000000  0003c693  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014a0  00000000  00000000  00040380  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012c8  00000000  00000000  00041820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028d7f  00000000  00000000  00042ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012d6a  00000000  00000000  0006b867  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fffc7  00000000  00000000  0007e5d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017e598  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005468  00000000  00000000  0017e614  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008200 <__do_global_dtors_aux>:
 8008200:	b510      	push	{r4, lr}
 8008202:	4c05      	ldr	r4, [pc, #20]	; (8008218 <__do_global_dtors_aux+0x18>)
 8008204:	7823      	ldrb	r3, [r4, #0]
 8008206:	b933      	cbnz	r3, 8008216 <__do_global_dtors_aux+0x16>
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__do_global_dtors_aux+0x1c>)
 800820a:	b113      	cbz	r3, 8008212 <__do_global_dtors_aux+0x12>
 800820c:	4804      	ldr	r0, [pc, #16]	; (8008220 <__do_global_dtors_aux+0x20>)
 800820e:	f3af 8000 	nop.w
 8008212:	2301      	movs	r3, #1
 8008214:	7023      	strb	r3, [r4, #0]
 8008216:	bd10      	pop	{r4, pc}
 8008218:	20000020 	.word	0x20000020
 800821c:	00000000 	.word	0x00000000
 8008220:	080132c4 	.word	0x080132c4

08008224 <frame_dummy>:
 8008224:	b508      	push	{r3, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <frame_dummy+0x10>)
 8008228:	b11b      	cbz	r3, 8008232 <frame_dummy+0xe>
 800822a:	4903      	ldr	r1, [pc, #12]	; (8008238 <frame_dummy+0x14>)
 800822c:	4803      	ldr	r0, [pc, #12]	; (800823c <frame_dummy+0x18>)
 800822e:	f3af 8000 	nop.w
 8008232:	bd08      	pop	{r3, pc}
 8008234:	00000000 	.word	0x00000000
 8008238:	20000024 	.word	0x20000024
 800823c:	080132c4 	.word	0x080132c4

08008240 <strlen>:
 8008240:	4603      	mov	r3, r0
 8008242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008246:	2a00      	cmp	r2, #0
 8008248:	d1fb      	bne.n	8008242 <strlen+0x2>
 800824a:	1a18      	subs	r0, r3, r0
 800824c:	3801      	subs	r0, #1
 800824e:	4770      	bx	lr

08008250 <__aeabi_uldivmod>:
 8008250:	b953      	cbnz	r3, 8008268 <__aeabi_uldivmod+0x18>
 8008252:	b94a      	cbnz	r2, 8008268 <__aeabi_uldivmod+0x18>
 8008254:	2900      	cmp	r1, #0
 8008256:	bf08      	it	eq
 8008258:	2800      	cmpeq	r0, #0
 800825a:	bf1c      	itt	ne
 800825c:	f04f 31ff 	movne.w	r1, #4294967295
 8008260:	f04f 30ff 	movne.w	r0, #4294967295
 8008264:	f000 b972 	b.w	800854c <__aeabi_idiv0>
 8008268:	f1ad 0c08 	sub.w	ip, sp, #8
 800826c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008270:	f000 f806 	bl	8008280 <__udivmoddi4>
 8008274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800827c:	b004      	add	sp, #16
 800827e:	4770      	bx	lr

08008280 <__udivmoddi4>:
 8008280:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008284:	9e08      	ldr	r6, [sp, #32]
 8008286:	4604      	mov	r4, r0
 8008288:	4688      	mov	r8, r1
 800828a:	2b00      	cmp	r3, #0
 800828c:	d14b      	bne.n	8008326 <__udivmoddi4+0xa6>
 800828e:	428a      	cmp	r2, r1
 8008290:	4615      	mov	r5, r2
 8008292:	d967      	bls.n	8008364 <__udivmoddi4+0xe4>
 8008294:	fab2 f282 	clz	r2, r2
 8008298:	b14a      	cbz	r2, 80082ae <__udivmoddi4+0x2e>
 800829a:	f1c2 0720 	rsb	r7, r2, #32
 800829e:	fa01 f302 	lsl.w	r3, r1, r2
 80082a2:	fa20 f707 	lsr.w	r7, r0, r7
 80082a6:	4095      	lsls	r5, r2
 80082a8:	ea47 0803 	orr.w	r8, r7, r3
 80082ac:	4094      	lsls	r4, r2
 80082ae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082b2:	0c23      	lsrs	r3, r4, #16
 80082b4:	fbb8 f7fe 	udiv	r7, r8, lr
 80082b8:	fa1f fc85 	uxth.w	ip, r5
 80082bc:	fb0e 8817 	mls	r8, lr, r7, r8
 80082c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80082c4:	fb07 f10c 	mul.w	r1, r7, ip
 80082c8:	4299      	cmp	r1, r3
 80082ca:	d909      	bls.n	80082e0 <__udivmoddi4+0x60>
 80082cc:	18eb      	adds	r3, r5, r3
 80082ce:	f107 30ff 	add.w	r0, r7, #4294967295
 80082d2:	f080 811b 	bcs.w	800850c <__udivmoddi4+0x28c>
 80082d6:	4299      	cmp	r1, r3
 80082d8:	f240 8118 	bls.w	800850c <__udivmoddi4+0x28c>
 80082dc:	3f02      	subs	r7, #2
 80082de:	442b      	add	r3, r5
 80082e0:	1a5b      	subs	r3, r3, r1
 80082e2:	b2a4      	uxth	r4, r4
 80082e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80082e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80082ec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80082f0:	fb00 fc0c 	mul.w	ip, r0, ip
 80082f4:	45a4      	cmp	ip, r4
 80082f6:	d909      	bls.n	800830c <__udivmoddi4+0x8c>
 80082f8:	192c      	adds	r4, r5, r4
 80082fa:	f100 33ff 	add.w	r3, r0, #4294967295
 80082fe:	f080 8107 	bcs.w	8008510 <__udivmoddi4+0x290>
 8008302:	45a4      	cmp	ip, r4
 8008304:	f240 8104 	bls.w	8008510 <__udivmoddi4+0x290>
 8008308:	3802      	subs	r0, #2
 800830a:	442c      	add	r4, r5
 800830c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008310:	eba4 040c 	sub.w	r4, r4, ip
 8008314:	2700      	movs	r7, #0
 8008316:	b11e      	cbz	r6, 8008320 <__udivmoddi4+0xa0>
 8008318:	40d4      	lsrs	r4, r2
 800831a:	2300      	movs	r3, #0
 800831c:	e9c6 4300 	strd	r4, r3, [r6]
 8008320:	4639      	mov	r1, r7
 8008322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008326:	428b      	cmp	r3, r1
 8008328:	d909      	bls.n	800833e <__udivmoddi4+0xbe>
 800832a:	2e00      	cmp	r6, #0
 800832c:	f000 80eb 	beq.w	8008506 <__udivmoddi4+0x286>
 8008330:	2700      	movs	r7, #0
 8008332:	e9c6 0100 	strd	r0, r1, [r6]
 8008336:	4638      	mov	r0, r7
 8008338:	4639      	mov	r1, r7
 800833a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833e:	fab3 f783 	clz	r7, r3
 8008342:	2f00      	cmp	r7, #0
 8008344:	d147      	bne.n	80083d6 <__udivmoddi4+0x156>
 8008346:	428b      	cmp	r3, r1
 8008348:	d302      	bcc.n	8008350 <__udivmoddi4+0xd0>
 800834a:	4282      	cmp	r2, r0
 800834c:	f200 80fa 	bhi.w	8008544 <__udivmoddi4+0x2c4>
 8008350:	1a84      	subs	r4, r0, r2
 8008352:	eb61 0303 	sbc.w	r3, r1, r3
 8008356:	2001      	movs	r0, #1
 8008358:	4698      	mov	r8, r3
 800835a:	2e00      	cmp	r6, #0
 800835c:	d0e0      	beq.n	8008320 <__udivmoddi4+0xa0>
 800835e:	e9c6 4800 	strd	r4, r8, [r6]
 8008362:	e7dd      	b.n	8008320 <__udivmoddi4+0xa0>
 8008364:	b902      	cbnz	r2, 8008368 <__udivmoddi4+0xe8>
 8008366:	deff      	udf	#255	; 0xff
 8008368:	fab2 f282 	clz	r2, r2
 800836c:	2a00      	cmp	r2, #0
 800836e:	f040 808f 	bne.w	8008490 <__udivmoddi4+0x210>
 8008372:	1b49      	subs	r1, r1, r5
 8008374:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008378:	fa1f f885 	uxth.w	r8, r5
 800837c:	2701      	movs	r7, #1
 800837e:	fbb1 fcfe 	udiv	ip, r1, lr
 8008382:	0c23      	lsrs	r3, r4, #16
 8008384:	fb0e 111c 	mls	r1, lr, ip, r1
 8008388:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800838c:	fb08 f10c 	mul.w	r1, r8, ip
 8008390:	4299      	cmp	r1, r3
 8008392:	d907      	bls.n	80083a4 <__udivmoddi4+0x124>
 8008394:	18eb      	adds	r3, r5, r3
 8008396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800839a:	d202      	bcs.n	80083a2 <__udivmoddi4+0x122>
 800839c:	4299      	cmp	r1, r3
 800839e:	f200 80cd 	bhi.w	800853c <__udivmoddi4+0x2bc>
 80083a2:	4684      	mov	ip, r0
 80083a4:	1a59      	subs	r1, r3, r1
 80083a6:	b2a3      	uxth	r3, r4
 80083a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80083ac:	fb0e 1410 	mls	r4, lr, r0, r1
 80083b0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80083b4:	fb08 f800 	mul.w	r8, r8, r0
 80083b8:	45a0      	cmp	r8, r4
 80083ba:	d907      	bls.n	80083cc <__udivmoddi4+0x14c>
 80083bc:	192c      	adds	r4, r5, r4
 80083be:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c2:	d202      	bcs.n	80083ca <__udivmoddi4+0x14a>
 80083c4:	45a0      	cmp	r8, r4
 80083c6:	f200 80b6 	bhi.w	8008536 <__udivmoddi4+0x2b6>
 80083ca:	4618      	mov	r0, r3
 80083cc:	eba4 0408 	sub.w	r4, r4, r8
 80083d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80083d4:	e79f      	b.n	8008316 <__udivmoddi4+0x96>
 80083d6:	f1c7 0c20 	rsb	ip, r7, #32
 80083da:	40bb      	lsls	r3, r7
 80083dc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80083e0:	ea4e 0e03 	orr.w	lr, lr, r3
 80083e4:	fa01 f407 	lsl.w	r4, r1, r7
 80083e8:	fa20 f50c 	lsr.w	r5, r0, ip
 80083ec:	fa21 f30c 	lsr.w	r3, r1, ip
 80083f0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80083f4:	4325      	orrs	r5, r4
 80083f6:	fbb3 f9f8 	udiv	r9, r3, r8
 80083fa:	0c2c      	lsrs	r4, r5, #16
 80083fc:	fb08 3319 	mls	r3, r8, r9, r3
 8008400:	fa1f fa8e 	uxth.w	sl, lr
 8008404:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008408:	fb09 f40a 	mul.w	r4, r9, sl
 800840c:	429c      	cmp	r4, r3
 800840e:	fa02 f207 	lsl.w	r2, r2, r7
 8008412:	fa00 f107 	lsl.w	r1, r0, r7
 8008416:	d90b      	bls.n	8008430 <__udivmoddi4+0x1b0>
 8008418:	eb1e 0303 	adds.w	r3, lr, r3
 800841c:	f109 30ff 	add.w	r0, r9, #4294967295
 8008420:	f080 8087 	bcs.w	8008532 <__udivmoddi4+0x2b2>
 8008424:	429c      	cmp	r4, r3
 8008426:	f240 8084 	bls.w	8008532 <__udivmoddi4+0x2b2>
 800842a:	f1a9 0902 	sub.w	r9, r9, #2
 800842e:	4473      	add	r3, lr
 8008430:	1b1b      	subs	r3, r3, r4
 8008432:	b2ad      	uxth	r5, r5
 8008434:	fbb3 f0f8 	udiv	r0, r3, r8
 8008438:	fb08 3310 	mls	r3, r8, r0, r3
 800843c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008440:	fb00 fa0a 	mul.w	sl, r0, sl
 8008444:	45a2      	cmp	sl, r4
 8008446:	d908      	bls.n	800845a <__udivmoddi4+0x1da>
 8008448:	eb1e 0404 	adds.w	r4, lr, r4
 800844c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008450:	d26b      	bcs.n	800852a <__udivmoddi4+0x2aa>
 8008452:	45a2      	cmp	sl, r4
 8008454:	d969      	bls.n	800852a <__udivmoddi4+0x2aa>
 8008456:	3802      	subs	r0, #2
 8008458:	4474      	add	r4, lr
 800845a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800845e:	fba0 8902 	umull	r8, r9, r0, r2
 8008462:	eba4 040a 	sub.w	r4, r4, sl
 8008466:	454c      	cmp	r4, r9
 8008468:	46c2      	mov	sl, r8
 800846a:	464b      	mov	r3, r9
 800846c:	d354      	bcc.n	8008518 <__udivmoddi4+0x298>
 800846e:	d051      	beq.n	8008514 <__udivmoddi4+0x294>
 8008470:	2e00      	cmp	r6, #0
 8008472:	d069      	beq.n	8008548 <__udivmoddi4+0x2c8>
 8008474:	ebb1 050a 	subs.w	r5, r1, sl
 8008478:	eb64 0403 	sbc.w	r4, r4, r3
 800847c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008480:	40fd      	lsrs	r5, r7
 8008482:	40fc      	lsrs	r4, r7
 8008484:	ea4c 0505 	orr.w	r5, ip, r5
 8008488:	e9c6 5400 	strd	r5, r4, [r6]
 800848c:	2700      	movs	r7, #0
 800848e:	e747      	b.n	8008320 <__udivmoddi4+0xa0>
 8008490:	f1c2 0320 	rsb	r3, r2, #32
 8008494:	fa20 f703 	lsr.w	r7, r0, r3
 8008498:	4095      	lsls	r5, r2
 800849a:	fa01 f002 	lsl.w	r0, r1, r2
 800849e:	fa21 f303 	lsr.w	r3, r1, r3
 80084a2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80084a6:	4338      	orrs	r0, r7
 80084a8:	0c01      	lsrs	r1, r0, #16
 80084aa:	fbb3 f7fe 	udiv	r7, r3, lr
 80084ae:	fa1f f885 	uxth.w	r8, r5
 80084b2:	fb0e 3317 	mls	r3, lr, r7, r3
 80084b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084ba:	fb07 f308 	mul.w	r3, r7, r8
 80084be:	428b      	cmp	r3, r1
 80084c0:	fa04 f402 	lsl.w	r4, r4, r2
 80084c4:	d907      	bls.n	80084d6 <__udivmoddi4+0x256>
 80084c6:	1869      	adds	r1, r5, r1
 80084c8:	f107 3cff 	add.w	ip, r7, #4294967295
 80084cc:	d22f      	bcs.n	800852e <__udivmoddi4+0x2ae>
 80084ce:	428b      	cmp	r3, r1
 80084d0:	d92d      	bls.n	800852e <__udivmoddi4+0x2ae>
 80084d2:	3f02      	subs	r7, #2
 80084d4:	4429      	add	r1, r5
 80084d6:	1acb      	subs	r3, r1, r3
 80084d8:	b281      	uxth	r1, r0
 80084da:	fbb3 f0fe 	udiv	r0, r3, lr
 80084de:	fb0e 3310 	mls	r3, lr, r0, r3
 80084e2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80084e6:	fb00 f308 	mul.w	r3, r0, r8
 80084ea:	428b      	cmp	r3, r1
 80084ec:	d907      	bls.n	80084fe <__udivmoddi4+0x27e>
 80084ee:	1869      	adds	r1, r5, r1
 80084f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80084f4:	d217      	bcs.n	8008526 <__udivmoddi4+0x2a6>
 80084f6:	428b      	cmp	r3, r1
 80084f8:	d915      	bls.n	8008526 <__udivmoddi4+0x2a6>
 80084fa:	3802      	subs	r0, #2
 80084fc:	4429      	add	r1, r5
 80084fe:	1ac9      	subs	r1, r1, r3
 8008500:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008504:	e73b      	b.n	800837e <__udivmoddi4+0xfe>
 8008506:	4637      	mov	r7, r6
 8008508:	4630      	mov	r0, r6
 800850a:	e709      	b.n	8008320 <__udivmoddi4+0xa0>
 800850c:	4607      	mov	r7, r0
 800850e:	e6e7      	b.n	80082e0 <__udivmoddi4+0x60>
 8008510:	4618      	mov	r0, r3
 8008512:	e6fb      	b.n	800830c <__udivmoddi4+0x8c>
 8008514:	4541      	cmp	r1, r8
 8008516:	d2ab      	bcs.n	8008470 <__udivmoddi4+0x1f0>
 8008518:	ebb8 0a02 	subs.w	sl, r8, r2
 800851c:	eb69 020e 	sbc.w	r2, r9, lr
 8008520:	3801      	subs	r0, #1
 8008522:	4613      	mov	r3, r2
 8008524:	e7a4      	b.n	8008470 <__udivmoddi4+0x1f0>
 8008526:	4660      	mov	r0, ip
 8008528:	e7e9      	b.n	80084fe <__udivmoddi4+0x27e>
 800852a:	4618      	mov	r0, r3
 800852c:	e795      	b.n	800845a <__udivmoddi4+0x1da>
 800852e:	4667      	mov	r7, ip
 8008530:	e7d1      	b.n	80084d6 <__udivmoddi4+0x256>
 8008532:	4681      	mov	r9, r0
 8008534:	e77c      	b.n	8008430 <__udivmoddi4+0x1b0>
 8008536:	3802      	subs	r0, #2
 8008538:	442c      	add	r4, r5
 800853a:	e747      	b.n	80083cc <__udivmoddi4+0x14c>
 800853c:	f1ac 0c02 	sub.w	ip, ip, #2
 8008540:	442b      	add	r3, r5
 8008542:	e72f      	b.n	80083a4 <__udivmoddi4+0x124>
 8008544:	4638      	mov	r0, r7
 8008546:	e708      	b.n	800835a <__udivmoddi4+0xda>
 8008548:	4637      	mov	r7, r6
 800854a:	e6e9      	b.n	8008320 <__udivmoddi4+0xa0>

0800854c <__aeabi_idiv0>:
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop

08008550 <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8008550:	b480      	push	{r7}
 8008552:	b08b      	sub	sp, #44	; 0x2c
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	60b9      	str	r1, [r7, #8]
 800855a:	607a      	str	r2, [r7, #4]
 800855c:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800855e:	2300      	movs	r3, #0
 8008560:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8008562:	2300      	movs	r3, #0
 8008564:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	1d1a      	adds	r2, r3, #4
 800856a:	60fa      	str	r2, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	3b01      	subs	r3, #1
 8008574:	089b      	lsrs	r3, r3, #2
 8008576:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8008578:	e051      	b.n	800861e <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1d1a      	adds	r2, r3, #4
 800857e:	60fa      	str	r2, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	1d1a      	adds	r2, r3, #4
 8008588:	60fa      	str	r2, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800858e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008592:	edd7 7a05 	vldr	s15, [r7, #20]
 8008596:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859e:	d504      	bpl.n	80085aa <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	3301      	adds	r3, #1
 80085a8:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	1d1a      	adds	r2, r3, #4
 80085ae:	60fa      	str	r2, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 80085b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80085b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80085bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	d504      	bpl.n	80085d0 <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	3302      	adds	r3, #2
 80085ce:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	1d1a      	adds	r2, r3, #4
 80085d4:	60fa      	str	r2, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 80085da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80085de:	edd7 7a05 	vldr	s15, [r7, #20]
 80085e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ea:	d504      	bpl.n	80085f6 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	3303      	adds	r3, #3
 80085f4:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80085f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80085fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80085fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008606:	d504      	bpl.n	8008612 <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8008608:	693b      	ldr	r3, [r7, #16]
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 800860c:	69bb      	ldr	r3, [r7, #24]
 800860e:	3304      	adds	r3, #4
 8008610:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	3304      	adds	r3, #4
 8008616:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	3b01      	subs	r3, #1
 800861c:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800861e:	6a3b      	ldr	r3, [r7, #32]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d1aa      	bne.n	800857a <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	3b01      	subs	r3, #1
 8008628:	f003 0303 	and.w	r3, r3, #3
 800862c:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800862e:	e016      	b.n	800865e <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	1d1a      	adds	r2, r3, #4
 8008634:	60fa      	str	r2, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 800863a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800863e:	edd7 7a05 	vldr	s15, [r7, #20]
 8008642:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800864a:	d505      	bpl.n	8008658 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 800864c:	697b      	ldr	r3, [r7, #20]
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	6a3b      	ldr	r3, [r7, #32]
 8008654:	1ad3      	subs	r3, r2, r3
 8008656:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8008658:	6a3b      	ldr	r3, [r7, #32]
 800865a:	3b01      	subs	r3, #1
 800865c:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e5      	bne.n	8008630 <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008668:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	69fa      	ldr	r2, [r7, #28]
 800866e:	601a      	str	r2, [r3, #0]
}
 8008670:	bf00      	nop
 8008672:	372c      	adds	r7, #44	; 0x2c
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr

0800867c <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800867c:	b480      	push	{r7}
 800867e:	b08b      	sub	sp, #44	; 0x2c
 8008680:	af00      	add	r7, sp, #0
 8008682:	60f8      	str	r0, [r7, #12]
 8008684:	60b9      	str	r1, [r7, #8]
 8008686:	607a      	str	r2, [r7, #4]
 8008688:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800868a:	2300      	movs	r3, #0
 800868c:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800868e:	2300      	movs	r3, #0
 8008690:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1d1a      	adds	r2, r3, #4
 8008696:	60fa      	str	r2, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	3b01      	subs	r3, #1
 80086a0:	089b      	lsrs	r3, r3, #2
 80086a2:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 80086a4:	e051      	b.n	800874a <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	60fa      	str	r2, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	1d1a      	adds	r2, r3, #4
 80086b4:	60fa      	str	r2, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 80086ba:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80086be:	edd7 7a05 	vldr	s15, [r7, #20]
 80086c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ca:	dd04      	ble.n	80086d6 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 80086d0:	69bb      	ldr	r3, [r7, #24]
 80086d2:	3301      	adds	r3, #1
 80086d4:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	60fa      	str	r2, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 80086e0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80086e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80086e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f0:	dd04      	ble.n	80086fc <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	3302      	adds	r3, #2
 80086fa:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	60fa      	str	r2, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8008706:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800870a:	edd7 7a05 	vldr	s15, [r7, #20]
 800870e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008716:	dd04      	ble.n	8008722 <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	3303      	adds	r3, #3
 8008720:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 8008722:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8008726:	edd7 7a04 	vldr	s15, [r7, #16]
 800872a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800872e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008732:	dd04      	ble.n	800873e <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	3304      	adds	r3, #4
 800873c:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	3304      	adds	r3, #4
 8008742:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8008744:	6a3b      	ldr	r3, [r7, #32]
 8008746:	3b01      	subs	r3, #1
 8008748:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 800874a:	6a3b      	ldr	r3, [r7, #32]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1aa      	bne.n	80086a6 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3b01      	subs	r3, #1
 8008754:	f003 0303 	and.w	r3, r3, #3
 8008758:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 800875a:	e016      	b.n	800878a <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	1d1a      	adds	r2, r3, #4
 8008760:	60fa      	str	r2, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8008766:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800876a:	edd7 7a05 	vldr	s15, [r7, #20]
 800876e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008776:	dd05      	ble.n	8008784 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	6a3b      	ldr	r3, [r7, #32]
 8008780:	1ad3      	subs	r3, r2, r3
 8008782:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	3b01      	subs	r3, #1
 8008788:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e5      	bne.n	800875c <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008794:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	601a      	str	r2, [r3, #0]
}
 800879c:	bf00      	nop
 800879e:	372c      	adds	r7, #44	; 0x2c
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr

080087a8 <setDIFFChannel>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
void setDIFFChannel(uint8_t positiveCh, uint8_t NegativeCh)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	460a      	mov	r2, r1
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	4613      	mov	r3, r2
 80087b6:	71bb      	strb	r3, [r7, #6]
	writeByteToReg(REG_MUX, positiveCh <<4 | NegativeCh); //xxxx1000 - AINp = positiveCh, AINn = NegativeCh
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	011b      	lsls	r3, r3, #4
 80087bc:	b25a      	sxtb	r2, r3
 80087be:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	b2db      	uxtb	r3, r3
 80087c8:	4619      	mov	r1, r3
 80087ca:	2001      	movs	r0, #1
 80087cc:	f000 f832 	bl	8008834 <writeByteToReg>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <writeCMD>:
*	The return value: None
*********************************************************************************************************
*/

void writeCMD(uint8_t command)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[1];
	Txbuffer[0] = command;
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	733b      	strb	r3, [r7, #12]
	CS_0();
 80087e6:	2200      	movs	r2, #0
 80087e8:	2110      	movs	r1, #16
 80087ea:	4809      	ldr	r0, [pc, #36]	; (8008810 <writeCMD+0x38>)
 80087ec:	f003 fd4a 	bl	800c284 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,1,50);
 80087f0:	f107 010c 	add.w	r1, r7, #12
 80087f4:	2332      	movs	r3, #50	; 0x32
 80087f6:	2201      	movs	r2, #1
 80087f8:	4806      	ldr	r0, [pc, #24]	; (8008814 <writeCMD+0x3c>)
 80087fa:	f006 f88b 	bl	800e914 <HAL_SPI_Transmit>
	CS_1();
 80087fe:	2201      	movs	r2, #1
 8008800:	2110      	movs	r1, #16
 8008802:	4803      	ldr	r0, [pc, #12]	; (8008810 <writeCMD+0x38>)
 8008804:	f003 fd3e 	bl	800c284 <HAL_GPIO_WritePin>
}
 8008808:	bf00      	nop
 800880a:	3710      	adds	r7, #16
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	40020000 	.word	0x40020000
 8008814:	20018784 	.word	0x20018784

08008818 <setDataRate>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setDataRate(uint8_t drate)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	4603      	mov	r3, r0
 8008820:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_DRATE,drate);
 8008822:	79fb      	ldrb	r3, [r7, #7]
 8008824:	4619      	mov	r1, r3
 8008826:	2003      	movs	r0, #3
 8008828:	f000 f804 	bl	8008834 <writeByteToReg>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <writeByteToReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
void writeByteToReg(uint8_t registerID, uint8_t value)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b084      	sub	sp, #16
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	460a      	mov	r2, r1
 800883e:	71fb      	strb	r3, [r7, #7]
 8008840:	4613      	mov	r3, r2
 8008842:	71bb      	strb	r3, [r7, #6]
	uint8_t Txbuffer[3];
	Txbuffer[0] = CMD_WREG | registerID;
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800884a:	b2db      	uxtb	r3, r3
 800884c:	733b      	strb	r3, [r7, #12]
	Txbuffer[1] = 0x00;
 800884e:	2300      	movs	r3, #0
 8008850:	737b      	strb	r3, [r7, #13]
	Txbuffer[2] = value;
 8008852:	79bb      	ldrb	r3, [r7, #6]
 8008854:	73bb      	strb	r3, [r7, #14]
	CS_0();
 8008856:	2200      	movs	r2, #0
 8008858:	2110      	movs	r1, #16
 800885a:	4809      	ldr	r0, [pc, #36]	; (8008880 <writeByteToReg+0x4c>)
 800885c:	f003 fd12 	bl	800c284 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,3,100);
 8008860:	f107 010c 	add.w	r1, r7, #12
 8008864:	2364      	movs	r3, #100	; 0x64
 8008866:	2203      	movs	r2, #3
 8008868:	4806      	ldr	r0, [pc, #24]	; (8008884 <writeByteToReg+0x50>)
 800886a:	f006 f853 	bl	800e914 <HAL_SPI_Transmit>
	/*
	send8bit(CMD_WREG | registerID);		//1syt byte: address of the first register to write
	send8bit(0x00);							//2nd byte: number of byte to write = 1.
	send8bit(value);						//3rd byte: value to write to register
	*/
	CS_1();
 800886e:	2201      	movs	r2, #1
 8008870:	2110      	movs	r1, #16
 8008872:	4803      	ldr	r0, [pc, #12]	; (8008880 <writeByteToReg+0x4c>)
 8008874:	f003 fd06 	bl	800c284 <HAL_GPIO_WritePin>

}
 8008878:	bf00      	nop
 800887a:	3710      	adds	r7, #16
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40020000 	.word	0x40020000
 8008884:	20018784 	.word	0x20018784

08008888 <setPGA>:
*	parameter: pga
*	The return value: None
*********************************************************************************************************
*/
void setPGA(uint8_t pga)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	4603      	mov	r3, r0
 8008890:	71fb      	strb	r3, [r7, #7]
	writeByteToReg(REG_ADCON,pga);
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	4619      	mov	r1, r3
 8008896:	2002      	movs	r0, #2
 8008898:	f7ff ffcc 	bl	8008834 <writeByteToReg>
}
 800889c:	bf00      	nop
 800889e:	3708      	adds	r7, #8
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <waitDRDY>:
*	parameter: data
*	The return value: None
*********************************************************************************************************
*/
void waitDRDY(void)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
	uint32_t i;
		for (i = 0; i < 40000000; i++){
 80088aa:	2300      	movs	r3, #0
 80088ac:	607b      	str	r3, [r7, #4]
 80088ae:	e009      	b.n	80088c4 <waitDRDY+0x20>
			if (DRDY_IS_LOW()){
 80088b0:	2108      	movs	r1, #8
 80088b2:	4809      	ldr	r0, [pc, #36]	; (80088d8 <waitDRDY+0x34>)
 80088b4:	f003 fcce 	bl	800c254 <HAL_GPIO_ReadPin>
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d007      	beq.n	80088ce <waitDRDY+0x2a>
		for (i = 0; i < 40000000; i++){
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	3301      	adds	r3, #1
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a05      	ldr	r2, [pc, #20]	; (80088dc <waitDRDY+0x38>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d9f1      	bls.n	80088b0 <waitDRDY+0xc>
				break;
			}
		}
}
 80088cc:	e000      	b.n	80088d0 <waitDRDY+0x2c>
				break;
 80088ce:	bf00      	nop
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40020000 	.word	0x40020000
 80088dc:	026259ff 	.word	0x026259ff

080088e0 <readChipID>:
*	parameter:
*	The return value: val
*********************************************************************************************************
*/
uint8_t readChipID(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
	waitDRDY();
 80088e6:	f7ff ffdd 	bl	80088a4 <waitDRDY>
	volatile uint8_t id = readByteFromReg(REG_STATUS);
 80088ea:	2000      	movs	r0, #0
 80088ec:	f000 f820 	bl	8008930 <readByteFromReg>
 80088f0:	4603      	mov	r3, r0
 80088f2:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 80088f4:	79fb      	ldrb	r3, [r7, #7]
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	091b      	lsrs	r3, r3, #4
 80088fa:	b2db      	uxtb	r3, r3
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <receive8bit>:
*	parameter: data
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t receive8bit(void)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af02      	add	r7, sp, #8
	HAL_SPI_Transmit(&hspi1, TXbuffer ,1,50);
	HAL_SPI_Receive(&hspi1, RXbuffer ,1,50);

	return RXbuffer[0];
	*/
	uint8_t send_data = 0xff;
 800890a:	23ff      	movs	r3, #255	; 0xff
 800890c:	71fb      	strb	r3, [r7, #7]
	uint8_t read = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_TransmitReceive(&hspi1,&send_data,&read,1,50);
 8008912:	1dba      	adds	r2, r7, #6
 8008914:	1df9      	adds	r1, r7, #7
 8008916:	2332      	movs	r3, #50	; 0x32
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	2301      	movs	r3, #1
 800891c:	4803      	ldr	r0, [pc, #12]	; (800892c <receive8bit+0x28>)
 800891e:	f006 f95f 	bl	800ebe0 <HAL_SPI_TransmitReceive>
	return read;
 8008922:	79bb      	ldrb	r3, [r7, #6]



}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	20018784 	.word	0x20018784

08008930 <readByteFromReg>:
*	parameter: register ID
*	The return value:
*********************************************************************************************************
*/
uint8_t readByteFromReg(uint8_t registerID)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b084      	sub	sp, #16
 8008934:	af00      	add	r7, sp, #0
 8008936:	4603      	mov	r3, r0
 8008938:	71fb      	strb	r3, [r7, #7]
	uint8_t TXbuffer[2];
	TXbuffer[0] = CMD_RREG | registerID;
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	f043 0310 	orr.w	r3, r3, #16
 8008940:	b2db      	uxtb	r3, r3
 8008942:	733b      	strb	r3, [r7, #12]
	TXbuffer[1] = 0x00;
 8008944:	2300      	movs	r3, #0
 8008946:	737b      	strb	r3, [r7, #13]
	CS_0();
 8008948:	2200      	movs	r2, #0
 800894a:	2110      	movs	r1, #16
 800894c:	480d      	ldr	r0, [pc, #52]	; (8008984 <readByteFromReg+0x54>)
 800894e:	f003 fc99 	bl	800c284 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, TXbuffer ,2,50);
 8008952:	f107 010c 	add.w	r1, r7, #12
 8008956:	2332      	movs	r3, #50	; 0x32
 8008958:	2202      	movs	r2, #2
 800895a:	480b      	ldr	r0, [pc, #44]	; (8008988 <readByteFromReg+0x58>)
 800895c:	f005 ffda 	bl	800e914 <HAL_SPI_Transmit>
	delay_us(10);
 8008960:	200a      	movs	r0, #10
 8008962:	f000 f91b 	bl	8008b9c <delay_us>
	uint8_t read = receive8bit();
 8008966:	f7ff ffcd 	bl	8008904 <receive8bit>
 800896a:	4603      	mov	r3, r0
 800896c:	73fb      	strb	r3, [r7, #15]
	CS_1();
 800896e:	2201      	movs	r2, #1
 8008970:	2110      	movs	r1, #16
 8008972:	4804      	ldr	r0, [pc, #16]	; (8008984 <readByteFromReg+0x54>)
 8008974:	f003 fc86 	bl	800c284 <HAL_GPIO_WritePin>

	return read;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40020000 	.word	0x40020000
 8008988:	20018784 	.word	0x20018784

0800898c <setBuffer>:
*	parameter: bool val
*	The return value: val
*********************************************************************************************************
*/
void setBuffer(void)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
	uint8_t val =0;
 8008992:	2300      	movs	r3, #0
 8008994:	71fb      	strb	r3, [r7, #7]
	uint8_t Txbuffer[2];
	Txbuffer[0] = CMD_WREG | REG_STATUS;
 8008996:	2350      	movs	r3, #80	; 0x50
 8008998:	713b      	strb	r3, [r7, #4]
	Txbuffer[1] = (0 <<3) | (1 << 2) | (val << 1);
 800899a:	79fb      	ldrb	r3, [r7, #7]
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	b25b      	sxtb	r3, r3
 80089a0:	f043 0304 	orr.w	r3, r3, #4
 80089a4:	b25b      	sxtb	r3, r3
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	717b      	strb	r3, [r7, #5]

	CS_0();
 80089aa:	2200      	movs	r2, #0
 80089ac:	2110      	movs	r1, #16
 80089ae:	4809      	ldr	r0, [pc, #36]	; (80089d4 <setBuffer+0x48>)
 80089b0:	f003 fc68 	bl	800c284 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, Txbuffer ,2,50);
 80089b4:	1d39      	adds	r1, r7, #4
 80089b6:	2332      	movs	r3, #50	; 0x32
 80089b8:	2202      	movs	r2, #2
 80089ba:	4807      	ldr	r0, [pc, #28]	; (80089d8 <setBuffer+0x4c>)
 80089bc:	f005 ffaa 	bl	800e914 <HAL_SPI_Transmit>
	//send8bit(CMD_WREG | REG_STATUS);
	//send8bit((0 <<3) | (1 << 2) | (val << 1));
	CS_1();
 80089c0:	2201      	movs	r2, #1
 80089c2:	2110      	movs	r1, #16
 80089c4:	4803      	ldr	r0, [pc, #12]	; (80089d4 <setBuffer+0x48>)
 80089c6:	f003 fc5d 	bl	800c284 <HAL_GPIO_WritePin>
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	40020000 	.word	0x40020000
 80089d8:	20018784 	.word	0x20018784

080089dc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80089e0:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <__NVIC_SystemReset+0x20>)
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80089ec:	4903      	ldr	r1, [pc, #12]	; (80089fc <__NVIC_SystemReset+0x20>)
 80089ee:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <__NVIC_SystemReset+0x24>)
 80089f0:	4313      	orrs	r3, r2
 80089f2:	60cb      	str	r3, [r1, #12]
 80089f4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80089f8:	bf00      	nop
 80089fa:	e7fd      	b.n	80089f8 <__NVIC_SystemReset+0x1c>
 80089fc:	e000ed00 	.word	0xe000ed00
 8008a00:	05fa0004 	.word	0x05fa0004

08008a04 <BLE_USART>:

/* Private variables ---------------------------------------------------------*/


void BLE_USART(UART_HandleTypeDef *huart, Sv *sendpData )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	6039      	str	r1, [r7, #0]

	if( USARTBLE.IAPflag == 1)
 8008a0e:	4b20      	ldr	r3, [pc, #128]	; (8008a90 <BLE_USART+0x8c>)
 8008a10:	785b      	ldrb	r3, [r3, #1]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d008      	beq.n	8008a28 <BLE_USART+0x24>
	{
		USARTBLE.sendflag =0;
 8008a16:	4b1e      	ldr	r3, [pc, #120]	; (8008a90 <BLE_USART+0x8c>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	701a      	strb	r2, [r3, #0]
		TM_DelayMillis(1000);
 8008a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008a20:	f000 f914 	bl	8008c4c <TM_DelayMillis>
		NVIC_SystemReset();
 8008a24:	f7ff ffda 	bl	80089dc <__NVIC_SystemReset>
		{
			HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 10);
		}
		*/
	}
	if(USARTBLE.sendflag ==1)
 8008a28:	4b19      	ldr	r3, [pc, #100]	; (8008a90 <BLE_USART+0x8c>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d02b      	beq.n	8008a88 <BLE_USART+0x84>
	{


		snprintf_(USARTBLE.buffer, 128 , "%.4f", sendpData->Statistic_max*1000);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	edd3 7a00 	vldr	s15, [r3]
 8008a36:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8008a94 <BLE_USART+0x90>
 8008a3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008a3e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8008a42:	ed8d 7b00 	vstr	d7, [sp]
 8008a46:	4a14      	ldr	r2, [pc, #80]	; (8008a98 <BLE_USART+0x94>)
 8008a48:	2180      	movs	r1, #128	; 0x80
 8008a4a:	4814      	ldr	r0, [pc, #80]	; (8008a9c <BLE_USART+0x98>)
 8008a4c:	f002 fa7e 	bl	800af4c <snprintf_>

		USARTBLE.bufferSize = min_(APP_BUFFER_SIZE, strlen(USARTBLE.buffer));
 8008a50:	4812      	ldr	r0, [pc, #72]	; (8008a9c <BLE_USART+0x98>)
 8008a52:	f7ff fbf5 	bl	8008240 <strlen>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b80      	cmp	r3, #128	; 0x80
 8008a5a:	d804      	bhi.n	8008a66 <BLE_USART+0x62>
 8008a5c:	480f      	ldr	r0, [pc, #60]	; (8008a9c <BLE_USART+0x98>)
 8008a5e:	f7ff fbef 	bl	8008240 <strlen>
 8008a62:	4603      	mov	r3, r0
 8008a64:	e000      	b.n	8008a68 <BLE_USART+0x64>
 8008a66:	2380      	movs	r3, #128	; 0x80
 8008a68:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <BLE_USART+0x8c>)
 8008a6a:	f8c2 3224 	str.w	r3, [r2, #548]	; 0x224
		//USARTBLE.sendTimeout = 100 ;
		if(HAL_UART_Transmit_DMA(huart, USARTBLE.buffer, USARTBLE.bufferSize)==HAL_OK)
 8008a6e:	4b08      	ldr	r3, [pc, #32]	; (8008a90 <BLE_USART+0x8c>)
 8008a70:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	461a      	mov	r2, r3
 8008a78:	4908      	ldr	r1, [pc, #32]	; (8008a9c <BLE_USART+0x98>)
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f006 ffb0 	bl	800f9e0 <HAL_UART_Transmit_DMA>
 8008a80:	4603      	mov	r3, r0
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d100      	bne.n	8008a88 <BLE_USART+0x84>
		{
			__NOP();
 8008a86:	bf00      	nop
		 char C[20];
		 strcpy(C,  USARTBLE.Rbuffer );
		 */
		 //0x1;
	}
}
 8008a88:	bf00      	nop
 8008a8a:	3708      	adds	r7, #8
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}
 8008a90:	200104c0 	.word	0x200104c0
 8008a94:	447a0000 	.word	0x447a0000
 8008a98:	080132e0 	.word	0x080132e0
 8008a9c:	20010560 	.word	0x20010560

08008aa0 <checkBLECommandFromBLEGateway>:

_Bool checkBLECommandFromBLEGateway(char * BLEcommand,char * index, int len)
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b086      	sub	sp, #24
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	60f8      	str	r0, [r7, #12]
 8008aa8:	60b9      	str	r1, [r7, #8]
 8008aaa:	607a      	str	r2, [r7, #4]
	if(strlen(BLEcommand) > 0)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	781b      	ldrb	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d011      	beq.n	8008ad8 <checkBLECommandFromBLEGateway+0x38>
	{
		   //Test 比對 function
	   char * pch;
	   /* 找尋 simple 字串 */
	   pch = strstr (BLEcommand,index);
 8008ab4:	68b9      	ldr	r1, [r7, #8]
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f00a fbe9 	bl	801328e <strstr>
 8008abc:	6178      	str	r0, [r7, #20]
	   if(strncmp(pch, index, len) == 0) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	6978      	ldr	r0, [r7, #20]
 8008ac6:	f00a fbd0 	bl	801326a <strncmp>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <checkBLECommandFromBLEGateway+0x34>
		   return true;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	e002      	b.n	8008ada <checkBLECommandFromBLEGateway+0x3a>
	   }
	   else
	   {
		   return false;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	e000      	b.n	8008ada <checkBLECommandFromBLEGateway+0x3a>

	}
	else
	{

		return false;
 8008ad8:	2300      	movs	r3, #0
	}

}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8008aee:	4b0e      	ldr	r3, [pc, #56]	; (8008b28 <delay_init+0x44>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a0d      	ldr	r2, [pc, #52]	; (8008b28 <delay_init+0x44>)
 8008af4:	f023 0304 	bic.w	r3, r3, #4
 8008af8:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8008afa:	79fb      	ldrb	r3, [r7, #7]
 8008afc:	08db      	lsrs	r3, r3, #3
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <delay_init+0x48>)
 8008b02:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8008b04:	4b09      	ldr	r3, [pc, #36]	; (8008b2c <delay_init+0x48>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	0152      	lsls	r2, r2, #5
 8008b0e:	1ad2      	subs	r2, r2, r3
 8008b10:	0092      	lsls	r2, r2, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	00db      	lsls	r3, r3, #3
 8008b16:	b29a      	uxth	r2, r3
 8008b18:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <delay_init+0x4c>)
 8008b1a:	801a      	strh	r2, [r3, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	e000e010 	.word	0xe000e010
 8008b2c:	2000003c 	.word	0x2000003c
 8008b30:	2000003e 	.word	0x2000003e

08008b34 <delay_ms>:

void delay_ms(uint16_t nms)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8008b3e:	88fb      	ldrh	r3, [r7, #6]
 8008b40:	4a14      	ldr	r2, [pc, #80]	; (8008b94 <delay_ms+0x60>)
 8008b42:	8812      	ldrh	r2, [r2, #0]
 8008b44:	4611      	mov	r1, r2
 8008b46:	4a14      	ldr	r2, [pc, #80]	; (8008b98 <delay_ms+0x64>)
 8008b48:	fb01 f303 	mul.w	r3, r1, r3
 8008b4c:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <delay_ms+0x64>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8008b54:	4b10      	ldr	r3, [pc, #64]	; (8008b98 <delay_ms+0x64>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a0f      	ldr	r2, [pc, #60]	; (8008b98 <delay_ms+0x64>)
 8008b5a:	f043 0301 	orr.w	r3, r3, #1
 8008b5e:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8008b60:	4b0d      	ldr	r3, [pc, #52]	; (8008b98 <delay_ms+0x64>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d004      	beq.n	8008b7a <delay_ms+0x46>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d0f2      	beq.n	8008b60 <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8008b7a:	4b07      	ldr	r3, [pc, #28]	; (8008b98 <delay_ms+0x64>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <delay_ms+0x64>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	609a      	str	r2, [r3, #8]
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	2000003e 	.word	0x2000003e
 8008b98:	e000e010 	.word	0xe000e010

08008b9c <delay_us>:


//延時nus
//nus為要延時的us數.
void delay_us(uint32_t nus)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b085      	sub	sp, #20
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
	uint32_t temp;
	SysTick->LOAD=nus*fac_us; //時間載入
 8008ba4:	4b14      	ldr	r3, [pc, #80]	; (8008bf8 <delay_us+0x5c>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4a14      	ldr	r2, [pc, #80]	; (8008bfc <delay_us+0x60>)
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	fb03 f301 	mul.w	r3, r3, r1
 8008bb2:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0x00;        //清空計數器
 8008bb4:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <delay_us+0x60>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;      //開始倒數
 8008bba:	4b10      	ldr	r3, [pc, #64]	; (8008bfc <delay_us+0x60>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a0f      	ldr	r2, [pc, #60]	; (8008bfc <delay_us+0x60>)
 8008bc0:	f043 0301 	orr.w	r3, r3, #1
 8008bc4:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8008bc6:	4b0d      	ldr	r3, [pc, #52]	; (8008bfc <delay_us+0x60>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 0301 	and.w	r3, r3, #1
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d004      	beq.n	8008be0 <delay_us+0x44>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d0f2      	beq.n	8008bc6 <delay_us+0x2a>
	SysTick->CTRL=0x00;       //關閉計數器
 8008be0:	4b06      	ldr	r3, [pc, #24]	; (8008bfc <delay_us+0x60>)
 8008be2:	2200      	movs	r2, #0
 8008be4:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8008be6:	4b05      	ldr	r3, [pc, #20]	; (8008bfc <delay_us+0x60>)
 8008be8:	2200      	movs	r2, #0
 8008bea:	609a      	str	r2, [r3, #8]
}
 8008bec:	bf00      	nop
 8008bee:	3714      	adds	r7, #20
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr
 8008bf8:	2000003c 	.word	0x2000003c
 8008bfc:	e000e010 	.word	0xe000e010

08008c00 <TM_Delay_Init>:

uint32_t multiplier;

void TM_Delay_Init(void) {
 8008c00:	b480      	push	{r7}
 8008c02:	af00      	add	r7, sp, #0
	/* While loop takes 4 cycles */
	/* For 1 us delay, we need to divide with 4M */
	multiplier = 122000000 / 4000000;
 8008c04:	4b03      	ldr	r3, [pc, #12]	; (8008c14 <TM_Delay_Init+0x14>)
 8008c06:	221e      	movs	r2, #30
 8008c08:	601a      	str	r2, [r3, #0]
}
 8008c0a:	bf00      	nop
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr
 8008c14:	20008100 	.word	0x20008100

08008c18 <TM_DelayMicros>:

void TM_DelayMicros(uint32_t micros) {
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
	/* Multiply micros with multipler */
	/* Substract 10 */
	micros = micros * multiplier - 10;
 8008c20:	4b09      	ldr	r3, [pc, #36]	; (8008c48 <TM_DelayMicros+0x30>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	fb02 f303 	mul.w	r3, r2, r3
 8008c2a:	3b0a      	subs	r3, #10
 8008c2c:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (micros--);
 8008c2e:	bf00      	nop
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	1e5a      	subs	r2, r3, #1
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1fa      	bne.n	8008c30 <TM_DelayMicros+0x18>
}
 8008c3a:	bf00      	nop
 8008c3c:	370c      	adds	r7, #12
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20008100 	.word	0x20008100

08008c4c <TM_DelayMillis>:

void TM_DelayMillis(uint32_t millis) {
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
	/* Multiply millis with multipler */
	/* Substract 10 */
	millis = 1000 * millis * multiplier - 10;
 8008c54:	4b0b      	ldr	r3, [pc, #44]	; (8008c84 <TM_DelayMillis+0x38>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	fb02 f303 	mul.w	r3, r2, r3
 8008c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008c62:	fb02 f303 	mul.w	r3, r2, r3
 8008c66:	3b0a      	subs	r3, #10
 8008c68:	607b      	str	r3, [r7, #4]
	/* 4 cycles for one loop */
	while (millis--);
 8008c6a:	bf00      	nop
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	1e5a      	subs	r2, r3, #1
 8008c70:	607a      	str	r2, [r7, #4]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1fa      	bne.n	8008c6c <TM_DelayMillis+0x20>
}
 8008c76:	bf00      	nop
 8008c78:	370c      	adds	r7, #12
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	20008100 	.word	0x20008100

08008c88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	60f8      	str	r0, [r7, #12]
 8008c90:	60b9      	str	r1, [r7, #8]
 8008c92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	4a07      	ldr	r2, [pc, #28]	; (8008cb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	4a06      	ldr	r2, [pc, #24]	; (8008cb8 <vApplicationGetIdleTaskMemory+0x30>)
 8008c9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2280      	movs	r2, #128	; 0x80
 8008ca4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8008ca6:	bf00      	nop
 8008ca8:	3714      	adds	r7, #20
 8008caa:	46bd      	mov	sp, r7
 8008cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb0:	4770      	bx	lr
 8008cb2:	bf00      	nop
 8008cb4:	20000040 	.word	0x20000040
 8008cb8:	20000094 	.word	0x20000094

08008cbc <readIICEEPROM_2402C>:
 * TODO: IIC Function
 *
 *
 * */
void readIICEEPROM_2402C(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af04      	add	r7, sp, #16
	  HAL_I2C_Mem_Read(&hi2c2, ADDR_24LCxx_Read, 0, I2C_MEMADD_SIZE_16BIT,ReadBufferEEPROM,BufferSize, 1000);
 8008cc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008cc6:	9302      	str	r3, [sp, #8]
 8008cc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ccc:	9301      	str	r3, [sp, #4]
 8008cce:	4b05      	ldr	r3, [pc, #20]	; (8008ce4 <readIICEEPROM_2402C+0x28>)
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	2302      	movs	r3, #2
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	21a1      	movs	r1, #161	; 0xa1
 8008cd8:	4803      	ldr	r0, [pc, #12]	; (8008ce8 <readIICEEPROM_2402C+0x2c>)
 8008cda:	f003 fbaf 	bl	800c43c <HAL_I2C_Mem_Read>
}
 8008cde:	bf00      	nop
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	20008338 	.word	0x20008338
 8008ce8:	200082ec 	.word	0x200082ec

08008cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008cec:	b5b0      	push	{r4, r5, r7, lr}
 8008cee:	b09e      	sub	sp, #120	; 0x78
 8008cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008cf2:	f002 fbfe 	bl	800b4f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008cf6:	f000 f92f 	bl	8008f58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008cfa:	f000 fb13 	bl	8009324 <MX_GPIO_Init>
  MX_DMA_Init();
 8008cfe:	f000 facf 	bl	80092a0 <MX_DMA_Init>
  MX_SPI1_Init();
 8008d02:	f000 fa5f 	bl	80091c4 <MX_SPI1_Init>
  MX_I2C1_Init();
 8008d06:	f000 f9bf 	bl	8009088 <MX_I2C1_Init>
  MX_USART6_UART_Init();
 8008d0a:	f000 fa99 	bl	8009240 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8008d0e:	f000 f9fb 	bl	8009108 <MX_I2C2_Init>
  MX_IWDG_Init();
 8008d12:	f000 fa39 	bl	8009188 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  USARTBLE.RxCount=0;
 8008d16:	4b7a      	ldr	r3, [pc, #488]	; (8008f00 <main+0x214>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	605a      	str	r2, [r3, #4]
  HAL_UART_Receive_IT(&huart6, (uint8_t *)aRxBuffer, 1);
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	4979      	ldr	r1, [pc, #484]	; (8008f04 <main+0x218>)
 8008d20:	4879      	ldr	r0, [pc, #484]	; (8008f08 <main+0x21c>)
 8008d22:	f006 fdbb 	bl	800f89c <HAL_UART_Receive_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8008d26:	b662      	cpsie	i
  __enable_irq();

  statisticDataSet = rawData;
 8008d28:	4b78      	ldr	r3, [pc, #480]	; (8008f0c <main+0x220>)
 8008d2a:	4a79      	ldr	r2, [pc, #484]	; (8008f10 <main+0x224>)
 8008d2c:	601a      	str	r2, [r3, #0]
   dataLength = sizeof(dataRecive)/sizeof(float);
 8008d2e:	4b79      	ldr	r3, [pc, #484]	; (8008f14 <main+0x228>)
 8008d30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008d34:	601a      	str	r2, [r3, #0]

   //TODO: Test BLE command
   //char str[] ="This is a simple string aaa";
   float32_t aa[3] = {1,2,3};
 8008d36:	4a78      	ldr	r2, [pc, #480]	; (8008f18 <main+0x22c>)
 8008d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8008d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   float32_t b[3];
   memcpy(b,aa,sizeof(aa));
 8008d42:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8008d46:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8008d4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   //_Bool command = checkBLECommandFromBLEGateway(str ,str);

   //TODO: Initialize ADS1256 data buffer size
   ADS1256.data_index = 0;
 8008d50:	4b72      	ldr	r3, [pc, #456]	; (8008f1c <main+0x230>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	601a      	str	r2, [r3, #0]
   ADS1256.data_length = dataLength;
 8008d56:	4b6f      	ldr	r3, [pc, #444]	; (8008f14 <main+0x228>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	4a70      	ldr	r2, [pc, #448]	; (8008f1c <main+0x230>)
 8008d5c:	6053      	str	r3, [r2, #4]

   //TODO: Initialize Frequency range to collection to feature
   //F2B.f = 1.4567;

   //TODO: Initialize delay systick
   delay_init(216);
 8008d5e:	20d8      	movs	r0, #216	; 0xd8
 8008d60:	f7ff fec0 	bl	8008ae4 <delay_init>
   delay_ms(500);
 8008d64:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d68:	f7ff fee4 	bl	8008b34 <delay_ms>
   delay_ms(500);
 8008d6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d70:	f7ff fee0 	bl	8008b34 <delay_ms>
   delay_ms(500);
 8008d74:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d78:	f7ff fedc 	bl	8008b34 <delay_ms>

   TM_Delay_Init();
 8008d7c:	f7ff ff40 	bl	8008c00 <TM_Delay_Init>

   readIICEEPROM_2402C();
 8008d80:	f7ff ff9c 	bl	8008cbc <readIICEEPROM_2402C>
   waitDRDY();
 8008d84:	f7ff fd8e 	bl	80088a4 <waitDRDY>
   writeCMD(CMD_SDATAC);
 8008d88:	200f      	movs	r0, #15
 8008d8a:	f7ff fd25 	bl	80087d8 <writeCMD>

   //TODO: Reset ADS1256
   waitDRDY();
 8008d8e:	f7ff fd89 	bl	80088a4 <waitDRDY>
   writeCMD(CMD_RESET);
 8008d92:	20fe      	movs	r0, #254	; 0xfe
 8008d94:	f7ff fd20 	bl	80087d8 <writeCMD>
   delay_ms(10);
 8008d98:	200a      	movs	r0, #10
 8008d9a:	f7ff fecb 	bl	8008b34 <delay_ms>
   TM_DelayMicros(1);
 8008d9e:	2001      	movs	r0, #1
 8008da0:	f7ff ff3a 	bl	8008c18 <TM_DelayMicros>

   //TODO: Initialize ADS1256 parameter (Buffer, PGA, Sampling rate)
   waitDRDY();
 8008da4:	f7ff fd7e 	bl	80088a4 <waitDRDY>
   setBuffer();
 8008da8:	f7ff fdf0 	bl	800898c <setBuffer>
   waitDRDY();
 8008dac:	f7ff fd7a 	bl	80088a4 <waitDRDY>
   setPGA(PGA_GAIN1);
 8008db0:	2000      	movs	r0, #0
 8008db2:	f7ff fd69 	bl	8008888 <setPGA>
   waitDRDY();
 8008db6:	f7ff fd75 	bl	80088a4 <waitDRDY>
   setDataRate(DRATE_15000);
 8008dba:	20e0      	movs	r0, #224	; 0xe0
 8008dbc:	f7ff fd2c 	bl	8008818 <setDataRate>

   //TODO: Read chip id
   waitDRDY();
 8008dc0:	f7ff fd70 	bl	80088a4 <waitDRDY>
   id = readChipID();
 8008dc4:	f7ff fd8c 	bl	80088e0 <readChipID>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	461a      	mov	r2, r3
 8008dcc:	4b54      	ldr	r3, [pc, #336]	; (8008f20 <main+0x234>)
 8008dce:	701a      	strb	r2, [r3, #0]

   delay_ms(500);// wait for initialization
 8008dd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008dd4:	f7ff feae 	bl	8008b34 <delay_ms>

   uint8_t  posChannels [4] = {AIN0, AIN2, AIN4, AIN6};
 8008dd8:	4b52      	ldr	r3, [pc, #328]	; (8008f24 <main+0x238>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	65fb      	str	r3, [r7, #92]	; 0x5c
   uint8_t  negChannels [4] = {AIN1, AIN3, AIN5, AIN7};
 8008dde:	4b52      	ldr	r3, [pc, #328]	; (8008f28 <main+0x23c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	65bb      	str	r3, [r7, #88]	; 0x58

   //TODO: Set differential analog input channel.
   waitDRDY();
 8008de4:	f7ff fd5e 	bl	80088a4 <waitDRDY>
   setDIFFChannel(posChannels[0], negChannels[0]);
 8008de8:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8008dec:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8008df0:	4611      	mov	r1, r2
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7ff fcd8 	bl	80087a8 <setDIFFChannel>

   waitDRDY();
 8008df8:	f7ff fd54 	bl	80088a4 <waitDRDY>
   writeCMD(CMD_SELFCAL);
 8008dfc:	20f0      	movs	r0, #240	; 0xf0
 8008dfe:	f7ff fceb 	bl	80087d8 <writeCMD>

   waitDRDY();
 8008e02:	f7ff fd4f 	bl	80088a4 <waitDRDY>
   delay_us(15);
 8008e06:	200f      	movs	r0, #15
 8008e08:	f7ff fec8 	bl	8008b9c <delay_us>
   waitDRDY();
 8008e0c:	f7ff fd4a 	bl	80088a4 <waitDRDY>
   writeCMD(CMD_SYNC);    // SYNC command
 8008e10:	20fc      	movs	r0, #252	; 0xfc
 8008e12:	f7ff fce1 	bl	80087d8 <writeCMD>
   delay_us(10);
 8008e16:	200a      	movs	r0, #10
 8008e18:	f7ff fec0 	bl	8008b9c <delay_us>
   waitDRDY();
 8008e1c:	f7ff fd42 	bl	80088a4 <waitDRDY>
   writeCMD(CMD_WAKEUP);  // WAKEUP command
 8008e20:	2000      	movs	r0, #0
 8008e22:	f7ff fcd9 	bl	80087d8 <writeCMD>
   delay_us(15); // min delay: t11 = 4 * 1 / 7,68 Mhz = 0,52 micro sec
 8008e26:	200f      	movs	r0, #15
 8008e28:	f7ff feb8 	bl	8008b9c <delay_us>



   //TODO: Set continuous mode.

	waitDRDY();
 8008e2c:	f7ff fd3a 	bl	80088a4 <waitDRDY>
	CS_0();
 8008e30:	2200      	movs	r2, #0
 8008e32:	2110      	movs	r1, #16
 8008e34:	483d      	ldr	r0, [pc, #244]	; (8008f2c <main+0x240>)
 8008e36:	f003 fa25 	bl	800c284 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, RDATACcmdbuffer ,1,50);
 8008e3a:	2332      	movs	r3, #50	; 0x32
 8008e3c:	2201      	movs	r2, #1
 8008e3e:	493c      	ldr	r1, [pc, #240]	; (8008f30 <main+0x244>)
 8008e40:	483c      	ldr	r0, [pc, #240]	; (8008f34 <main+0x248>)
 8008e42:	f005 fd67 	bl	800e914 <HAL_SPI_Transmit>
	delay_ms(25); // min delay: t6 = 50 * 1/7.68 MHz = 6.5 microseconds
 8008e46:	2019      	movs	r0, #25
 8008e48:	f7ff fe74 	bl	8008b34 <delay_ms>
	ADS1256.data_startFlag = 1;
 8008e4c:	4a33      	ldr	r2, [pc, #204]	; (8008f1c <main+0x230>)
 8008e4e:	f244 0308 	movw	r3, #16392	; 0x4008
 8008e52:	4413      	add	r3, r2
 8008e54:	2201      	movs	r2, #1
 8008e56:	701a      	strb	r2, [r3, #0]
	delay_us(1);
 8008e58:	2001      	movs	r0, #1
 8008e5a:	f7ff fe9f 	bl	8008b9c <delay_us>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of adcBinarySem */
  osSemaphoreDef(adcBinarySem);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	653b      	str	r3, [r7, #80]	; 0x50
 8008e62:	2300      	movs	r3, #0
 8008e64:	657b      	str	r3, [r7, #84]	; 0x54
  adcBinarySemHandle = osSemaphoreCreate(osSemaphore(adcBinarySem), 1);
 8008e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e6a:	2101      	movs	r1, #1
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f007 fd94 	bl	801099a <osSemaphoreCreate>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4b30      	ldr	r3, [pc, #192]	; (8008f38 <main+0x24c>)
 8008e76:	601a      	str	r2, [r3, #0]

  /* definition and creation of I2cBinarySem */
  osSemaphoreDef(I2cBinarySem);
 8008e78:	2300      	movs	r3, #0
 8008e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  I2cBinarySemHandle = osSemaphoreCreate(osSemaphore(I2cBinarySem), 1);
 8008e80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008e84:	2101      	movs	r1, #1
 8008e86:	4618      	mov	r0, r3
 8008e88:	f007 fd87 	bl	801099a <osSemaphoreCreate>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	4b2b      	ldr	r3, [pc, #172]	; (8008f3c <main+0x250>)
 8008e90:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of adcQueue */
  osMessageQDef(adcQueue, 16, long);
 8008e92:	4b2b      	ldr	r3, [pc, #172]	; (8008f40 <main+0x254>)
 8008e94:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008e98:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008e9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  adcQueueHandle = osMessageCreate(osMessageQ(adcQueue), NULL);
 8008e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f007 fdab 	bl	8010a00 <osMessageCreate>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	4b25      	ldr	r3, [pc, #148]	; (8008f44 <main+0x258>)
 8008eae:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADC_Task */
  osThreadDef(ADC_Task, ADC_Thread, osPriorityRealtime, 0, 200);
 8008eb0:	4b25      	ldr	r3, [pc, #148]	; (8008f48 <main+0x25c>)
 8008eb2:	f107 041c 	add.w	r4, r7, #28
 8008eb6:	461d      	mov	r5, r3
 8008eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ebc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ec0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADC_TaskHandle = osThreadCreate(osThread(ADC_Task), NULL);
 8008ec4:	f107 031c 	add.w	r3, r7, #28
 8008ec8:	2100      	movs	r1, #0
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f007 fd19 	bl	8010902 <osThreadCreate>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <main+0x260>)
 8008ed4:	601a      	str	r2, [r3, #0]

  /* definition and creation of FFT_Task */
  osThreadDef(FFT_Task, FFT_Thread, osPriorityHigh, 0, 400);
 8008ed6:	4b1e      	ldr	r3, [pc, #120]	; (8008f50 <main+0x264>)
 8008ed8:	463c      	mov	r4, r7
 8008eda:	461d      	mov	r5, r3
 8008edc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ede:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ee0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008ee4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  FFT_TaskHandle = osThreadCreate(osThread(FFT_Task), NULL);
 8008ee8:	463b      	mov	r3, r7
 8008eea:	2100      	movs	r1, #0
 8008eec:	4618      	mov	r0, r3
 8008eee:	f007 fd08 	bl	8010902 <osThreadCreate>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	4b17      	ldr	r3, [pc, #92]	; (8008f54 <main+0x268>)
 8008ef6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008ef8:	f007 fcfc 	bl	80108f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008efc:	e7fe      	b.n	8008efc <main+0x210>
 8008efe:	bf00      	nop
 8008f00:	200104c0 	.word	0x200104c0
 8008f04:	20018780 	.word	0x20018780
 8008f08:	20018700 	.word	0x20018700
 8008f0c:	20008120 	.word	0x20008120
 8008f10:	2000c4b0 	.word	0x2000c4b0
 8008f14:	200002ac 	.word	0x200002ac
 8008f18:	080132e8 	.word	0x080132e8
 8008f1c:	20003ffc 	.word	0x20003ffc
 8008f20:	20000294 	.word	0x20000294
 8008f24:	080132f4 	.word	0x080132f4
 8008f28:	080132f8 	.word	0x080132f8
 8008f2c:	40020000 	.word	0x40020000
 8008f30:	20000004 	.word	0x20000004
 8008f34:	20018784 	.word	0x20018784
 8008f38:	2000843c 	.word	0x2000843c
 8008f3c:	2001c8b0 	.word	0x2001c8b0
 8008f40:	080132fc 	.word	0x080132fc
 8008f44:	2000c4a8 	.word	0x2000c4a8
 8008f48:	08013318 	.word	0x08013318
 8008f4c:	20008444 	.word	0x20008444
 8008f50:	08013340 	.word	0x08013340
 8008f54:	20008438 	.word	0x20008438

08008f58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0b8      	sub	sp, #224	; 0xe0
 8008f5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008f5e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008f62:	2234      	movs	r2, #52	; 0x34
 8008f64:	2100      	movs	r1, #0
 8008f66:	4618      	mov	r0, r3
 8008f68:	f00a f977 	bl	801325a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008f6c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8008f70:	2200      	movs	r2, #0
 8008f72:	601a      	str	r2, [r3, #0]
 8008f74:	605a      	str	r2, [r3, #4]
 8008f76:	609a      	str	r2, [r3, #8]
 8008f78:	60da      	str	r2, [r3, #12]
 8008f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008f7c:	f107 0308 	add.w	r3, r7, #8
 8008f80:	2290      	movs	r2, #144	; 0x90
 8008f82:	2100      	movs	r1, #0
 8008f84:	4618      	mov	r0, r3
 8008f86:	f00a f968 	bl	801325a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008f8a:	4b3d      	ldr	r3, [pc, #244]	; (8009080 <SystemClock_Config+0x128>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	4a3c      	ldr	r2, [pc, #240]	; (8009080 <SystemClock_Config+0x128>)
 8008f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f94:	6413      	str	r3, [r2, #64]	; 0x40
 8008f96:	4b3a      	ldr	r3, [pc, #232]	; (8009080 <SystemClock_Config+0x128>)
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f9e:	607b      	str	r3, [r7, #4]
 8008fa0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008fa2:	4b38      	ldr	r3, [pc, #224]	; (8009084 <SystemClock_Config+0x12c>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a37      	ldr	r2, [pc, #220]	; (8009084 <SystemClock_Config+0x12c>)
 8008fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fac:	6013      	str	r3, [r2, #0]
 8008fae:	4b35      	ldr	r3, [pc, #212]	; (8009084 <SystemClock_Config+0x12c>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008fb6:	603b      	str	r3, [r7, #0]
 8008fb8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8008fba:	230a      	movs	r3, #10
 8008fbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008fc6:	2310      	movs	r3, #16
 8008fc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008fde:	2308      	movs	r3, #8
 8008fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008fe4:	23d8      	movs	r3, #216	; 0xd8
 8008fe6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008fea:	2302      	movs	r3, #2
 8008fec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008ff6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	f004 fb2e 	bl	800d65c <HAL_RCC_OscConfig>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8009006:	f000 fc11 	bl	800982c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800900a:	f004 fad7 	bl	800d5bc <HAL_PWREx_EnableOverDrive>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d001      	beq.n	8009018 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8009014:	f000 fc0a 	bl	800982c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009018:	230f      	movs	r3, #15
 800901a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800901e:	2302      	movs	r3, #2
 8009020:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009024:	2300      	movs	r3, #0
 8009026:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800902a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800902e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009032:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009036:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800903a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800903e:	2107      	movs	r1, #7
 8009040:	4618      	mov	r0, r3
 8009042:	f004 fdb9 	bl	800dbb8 <HAL_RCC_ClockConfig>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <SystemClock_Config+0xf8>
  {
    Error_Handler();
 800904c:	f000 fbee 	bl	800982c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_I2C1
 8009050:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8009054:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8009056:	2300      	movs	r3, #0
 8009058:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800905a:	2300      	movs	r3, #0
 800905c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800905e:	2300      	movs	r3, #0
 8009060:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009062:	f107 0308 	add.w	r3, r7, #8
 8009066:	4618      	mov	r0, r3
 8009068:	f004 ff9c 	bl	800dfa4 <HAL_RCCEx_PeriphCLKConfig>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8009072:	f000 fbdb 	bl	800982c <Error_Handler>
  }
}
 8009076:	bf00      	nop
 8009078:	37e0      	adds	r7, #224	; 0xe0
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	40023800 	.word	0x40023800
 8009084:	40007000 	.word	0x40007000

08009088 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800908c:	4b1b      	ldr	r3, [pc, #108]	; (80090fc <MX_I2C1_Init+0x74>)
 800908e:	4a1c      	ldr	r2, [pc, #112]	; (8009100 <MX_I2C1_Init+0x78>)
 8009090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8009092:	4b1a      	ldr	r3, [pc, #104]	; (80090fc <MX_I2C1_Init+0x74>)
 8009094:	4a1b      	ldr	r2, [pc, #108]	; (8009104 <MX_I2C1_Init+0x7c>)
 8009096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 8009098:	4b18      	ldr	r3, [pc, #96]	; (80090fc <MX_I2C1_Init+0x74>)
 800909a:	2204      	movs	r2, #4
 800909c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800909e:	4b17      	ldr	r3, [pc, #92]	; (80090fc <MX_I2C1_Init+0x74>)
 80090a0:	2201      	movs	r2, #1
 80090a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80090a4:	4b15      	ldr	r3, [pc, #84]	; (80090fc <MX_I2C1_Init+0x74>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <MX_I2C1_Init+0x74>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80090b0:	4b12      	ldr	r3, [pc, #72]	; (80090fc <MX_I2C1_Init+0x74>)
 80090b2:	2200      	movs	r2, #0
 80090b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80090b6:	4b11      	ldr	r3, [pc, #68]	; (80090fc <MX_I2C1_Init+0x74>)
 80090b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80090bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <MX_I2C1_Init+0x74>)
 80090c0:	2200      	movs	r2, #0
 80090c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80090c4:	480d      	ldr	r0, [pc, #52]	; (80090fc <MX_I2C1_Init+0x74>)
 80090c6:	f003 f929 	bl	800c31c <HAL_I2C_Init>
 80090ca:	4603      	mov	r3, r0
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d001      	beq.n	80090d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80090d0:	f000 fbac 	bl	800982c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80090d4:	2100      	movs	r1, #0
 80090d6:	4809      	ldr	r0, [pc, #36]	; (80090fc <MX_I2C1_Init+0x74>)
 80090d8:	f004 f983 	bl	800d3e2 <HAL_I2CEx_ConfigAnalogFilter>
 80090dc:	4603      	mov	r3, r0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80090e2:	f000 fba3 	bl	800982c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80090e6:	2100      	movs	r1, #0
 80090e8:	4804      	ldr	r0, [pc, #16]	; (80090fc <MX_I2C1_Init+0x74>)
 80090ea:	f004 f9c5 	bl	800d478 <HAL_I2CEx_ConfigDigitalFilter>
 80090ee:	4603      	mov	r3, r0
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d001      	beq.n	80090f8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80090f4:	f000 fb9a 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80090f8:	bf00      	nop
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20008290 	.word	0x20008290
 8009100:	40005400 	.word	0x40005400
 8009104:	20404768 	.word	0x20404768

08009108 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800910c:	4b1b      	ldr	r3, [pc, #108]	; (800917c <MX_I2C2_Init+0x74>)
 800910e:	4a1c      	ldr	r2, [pc, #112]	; (8009180 <MX_I2C2_Init+0x78>)
 8009110:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8009112:	4b1a      	ldr	r3, [pc, #104]	; (800917c <MX_I2C2_Init+0x74>)
 8009114:	4a1b      	ldr	r2, [pc, #108]	; (8009184 <MX_I2C2_Init+0x7c>)
 8009116:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 8;
 8009118:	4b18      	ldr	r3, [pc, #96]	; (800917c <MX_I2C2_Init+0x74>)
 800911a:	2208      	movs	r2, #8
 800911c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800911e:	4b17      	ldr	r3, [pc, #92]	; (800917c <MX_I2C2_Init+0x74>)
 8009120:	2201      	movs	r2, #1
 8009122:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009124:	4b15      	ldr	r3, [pc, #84]	; (800917c <MX_I2C2_Init+0x74>)
 8009126:	2200      	movs	r2, #0
 8009128:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800912a:	4b14      	ldr	r3, [pc, #80]	; (800917c <MX_I2C2_Init+0x74>)
 800912c:	2200      	movs	r2, #0
 800912e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009130:	4b12      	ldr	r3, [pc, #72]	; (800917c <MX_I2C2_Init+0x74>)
 8009132:	2200      	movs	r2, #0
 8009134:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8009136:	4b11      	ldr	r3, [pc, #68]	; (800917c <MX_I2C2_Init+0x74>)
 8009138:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800913c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800913e:	4b0f      	ldr	r3, [pc, #60]	; (800917c <MX_I2C2_Init+0x74>)
 8009140:	2200      	movs	r2, #0
 8009142:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009144:	480d      	ldr	r0, [pc, #52]	; (800917c <MX_I2C2_Init+0x74>)
 8009146:	f003 f8e9 	bl	800c31c <HAL_I2C_Init>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8009150:	f000 fb6c 	bl	800982c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009154:	2100      	movs	r1, #0
 8009156:	4809      	ldr	r0, [pc, #36]	; (800917c <MX_I2C2_Init+0x74>)
 8009158:	f004 f943 	bl	800d3e2 <HAL_I2CEx_ConfigAnalogFilter>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8009162:	f000 fb63 	bl	800982c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009166:	2100      	movs	r1, #0
 8009168:	4804      	ldr	r0, [pc, #16]	; (800917c <MX_I2C2_Init+0x74>)
 800916a:	f004 f985 	bl	800d478 <HAL_I2CEx_ConfigDigitalFilter>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8009174:	f000 fb5a 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009178:	bf00      	nop
 800917a:	bd80      	pop	{r7, pc}
 800917c:	200082ec 	.word	0x200082ec
 8009180:	40005800 	.word	0x40005800
 8009184:	20404768 	.word	0x20404768

08009188 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800918c:	4b0b      	ldr	r3, [pc, #44]	; (80091bc <MX_IWDG_Init+0x34>)
 800918e:	4a0c      	ldr	r2, [pc, #48]	; (80091c0 <MX_IWDG_Init+0x38>)
 8009190:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <MX_IWDG_Init+0x34>)
 8009194:	2205      	movs	r2, #5
 8009196:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8009198:	4b08      	ldr	r3, [pc, #32]	; (80091bc <MX_IWDG_Init+0x34>)
 800919a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800919e:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3096;
 80091a0:	4b06      	ldr	r3, [pc, #24]	; (80091bc <MX_IWDG_Init+0x34>)
 80091a2:	f640 4218 	movw	r2, #3096	; 0xc18
 80091a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80091a8:	4804      	ldr	r0, [pc, #16]	; (80091bc <MX_IWDG_Init+0x34>)
 80091aa:	f004 f9b1 	bl	800d510 <HAL_IWDG_Init>
 80091ae:	4603      	mov	r3, r0
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d001      	beq.n	80091b8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80091b4:	f000 fb3a 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80091b8:	bf00      	nop
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	200082dc 	.word	0x200082dc
 80091c0:	40003000 	.word	0x40003000

080091c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80091c8:	4b1b      	ldr	r3, [pc, #108]	; (8009238 <MX_SPI1_Init+0x74>)
 80091ca:	4a1c      	ldr	r2, [pc, #112]	; (800923c <MX_SPI1_Init+0x78>)
 80091cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80091ce:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <MX_SPI1_Init+0x74>)
 80091d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80091d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80091d6:	4b18      	ldr	r3, [pc, #96]	; (8009238 <MX_SPI1_Init+0x74>)
 80091d8:	2200      	movs	r2, #0
 80091da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80091dc:	4b16      	ldr	r3, [pc, #88]	; (8009238 <MX_SPI1_Init+0x74>)
 80091de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80091e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80091e4:	4b14      	ldr	r3, [pc, #80]	; (8009238 <MX_SPI1_Init+0x74>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <MX_SPI1_Init+0x74>)
 80091ec:	2201      	movs	r2, #1
 80091ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80091f0:	4b11      	ldr	r3, [pc, #68]	; (8009238 <MX_SPI1_Init+0x74>)
 80091f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <MX_SPI1_Init+0x74>)
 80091fa:	2228      	movs	r2, #40	; 0x28
 80091fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80091fe:	4b0e      	ldr	r3, [pc, #56]	; (8009238 <MX_SPI1_Init+0x74>)
 8009200:	2200      	movs	r2, #0
 8009202:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <MX_SPI1_Init+0x74>)
 8009206:	2200      	movs	r2, #0
 8009208:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800920a:	4b0b      	ldr	r3, [pc, #44]	; (8009238 <MX_SPI1_Init+0x74>)
 800920c:	2200      	movs	r2, #0
 800920e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8009210:	4b09      	ldr	r3, [pc, #36]	; (8009238 <MX_SPI1_Init+0x74>)
 8009212:	2207      	movs	r2, #7
 8009214:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8009216:	4b08      	ldr	r3, [pc, #32]	; (8009238 <MX_SPI1_Init+0x74>)
 8009218:	2200      	movs	r2, #0
 800921a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800921c:	4b06      	ldr	r3, [pc, #24]	; (8009238 <MX_SPI1_Init+0x74>)
 800921e:	2200      	movs	r2, #0
 8009220:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009222:	4805      	ldr	r0, [pc, #20]	; (8009238 <MX_SPI1_Init+0x74>)
 8009224:	f005 fae4 	bl	800e7f0 <HAL_SPI_Init>
 8009228:	4603      	mov	r3, r0
 800922a:	2b00      	cmp	r3, #0
 800922c:	d001      	beq.n	8009232 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800922e:	f000 fafd 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009232:	bf00      	nop
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	20018784 	.word	0x20018784
 800923c:	40013000 	.word	0x40013000

08009240 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8009244:	4b14      	ldr	r3, [pc, #80]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009246:	4a15      	ldr	r2, [pc, #84]	; (800929c <MX_USART6_UART_Init+0x5c>)
 8009248:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800924a:	4b13      	ldr	r3, [pc, #76]	; (8009298 <MX_USART6_UART_Init+0x58>)
 800924c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009250:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8009252:	4b11      	ldr	r3, [pc, #68]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009254:	2200      	movs	r2, #0
 8009256:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8009258:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <MX_USART6_UART_Init+0x58>)
 800925a:	2200      	movs	r2, #0
 800925c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800925e:	4b0e      	ldr	r3, [pc, #56]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009260:	2200      	movs	r2, #0
 8009262:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8009264:	4b0c      	ldr	r3, [pc, #48]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009266:	220c      	movs	r2, #12
 8009268:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800926a:	4b0b      	ldr	r3, [pc, #44]	; (8009298 <MX_USART6_UART_Init+0x58>)
 800926c:	2200      	movs	r2, #0
 800926e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8009270:	4b09      	ldr	r3, [pc, #36]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009272:	2200      	movs	r2, #0
 8009274:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009276:	4b08      	ldr	r3, [pc, #32]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009278:	2200      	movs	r2, #0
 800927a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800927c:	4b06      	ldr	r3, [pc, #24]	; (8009298 <MX_USART6_UART_Init+0x58>)
 800927e:	2200      	movs	r2, #0
 8009280:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8009282:	4805      	ldr	r0, [pc, #20]	; (8009298 <MX_USART6_UART_Init+0x58>)
 8009284:	f006 fabb 	bl	800f7fe <HAL_UART_Init>
 8009288:	4603      	mov	r3, r0
 800928a:	2b00      	cmp	r3, #0
 800928c:	d001      	beq.n	8009292 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800928e:	f000 facd 	bl	800982c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8009292:	bf00      	nop
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20018700 	.word	0x20018700
 800929c:	40011400 	.word	0x40011400

080092a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80092a6:	4b1e      	ldr	r3, [pc, #120]	; (8009320 <MX_DMA_Init+0x80>)
 80092a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092aa:	4a1d      	ldr	r2, [pc, #116]	; (8009320 <MX_DMA_Init+0x80>)
 80092ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092b0:	6313      	str	r3, [r2, #48]	; 0x30
 80092b2:	4b1b      	ldr	r3, [pc, #108]	; (8009320 <MX_DMA_Init+0x80>)
 80092b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092ba:	607b      	str	r3, [r7, #4]
 80092bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80092be:	4b18      	ldr	r3, [pc, #96]	; (8009320 <MX_DMA_Init+0x80>)
 80092c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c2:	4a17      	ldr	r2, [pc, #92]	; (8009320 <MX_DMA_Init+0x80>)
 80092c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80092c8:	6313      	str	r3, [r2, #48]	; 0x30
 80092ca:	4b15      	ldr	r3, [pc, #84]	; (8009320 <MX_DMA_Init+0x80>)
 80092cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d2:	603b      	str	r3, [r7, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80092d6:	2200      	movs	r2, #0
 80092d8:	2105      	movs	r1, #5
 80092da:	2011      	movs	r0, #17
 80092dc:	f002 fa41 	bl	800b762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80092e0:	2011      	movs	r0, #17
 80092e2:	f002 fa5a 	bl	800b79a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80092e6:	2200      	movs	r2, #0
 80092e8:	2105      	movs	r1, #5
 80092ea:	2038      	movs	r0, #56	; 0x38
 80092ec:	f002 fa39 	bl	800b762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80092f0:	2038      	movs	r0, #56	; 0x38
 80092f2:	f002 fa52 	bl	800b79a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80092f6:	2200      	movs	r2, #0
 80092f8:	2105      	movs	r1, #5
 80092fa:	203b      	movs	r0, #59	; 0x3b
 80092fc:	f002 fa31 	bl	800b762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8009300:	203b      	movs	r0, #59	; 0x3b
 8009302:	f002 fa4a 	bl	800b79a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8009306:	2200      	movs	r2, #0
 8009308:	2105      	movs	r1, #5
 800930a:	2045      	movs	r0, #69	; 0x45
 800930c:	f002 fa29 	bl	800b762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8009310:	2045      	movs	r0, #69	; 0x45
 8009312:	f002 fa42 	bl	800b79a <HAL_NVIC_EnableIRQ>

}
 8009316:	bf00      	nop
 8009318:	3708      	adds	r7, #8
 800931a:	46bd      	mov	sp, r7
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	40023800 	.word	0x40023800

08009324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08a      	sub	sp, #40	; 0x28
 8009328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800932a:	f107 0314 	add.w	r3, r7, #20
 800932e:	2200      	movs	r2, #0
 8009330:	601a      	str	r2, [r3, #0]
 8009332:	605a      	str	r2, [r3, #4]
 8009334:	609a      	str	r2, [r3, #8]
 8009336:	60da      	str	r2, [r3, #12]
 8009338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800933a:	4b38      	ldr	r3, [pc, #224]	; (800941c <MX_GPIO_Init+0xf8>)
 800933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933e:	4a37      	ldr	r2, [pc, #220]	; (800941c <MX_GPIO_Init+0xf8>)
 8009340:	f043 0301 	orr.w	r3, r3, #1
 8009344:	6313      	str	r3, [r2, #48]	; 0x30
 8009346:	4b35      	ldr	r3, [pc, #212]	; (800941c <MX_GPIO_Init+0xf8>)
 8009348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800934a:	f003 0301 	and.w	r3, r3, #1
 800934e:	613b      	str	r3, [r7, #16]
 8009350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009352:	4b32      	ldr	r3, [pc, #200]	; (800941c <MX_GPIO_Init+0xf8>)
 8009354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009356:	4a31      	ldr	r2, [pc, #196]	; (800941c <MX_GPIO_Init+0xf8>)
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	6313      	str	r3, [r2, #48]	; 0x30
 800935e:	4b2f      	ldr	r3, [pc, #188]	; (800941c <MX_GPIO_Init+0xf8>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800936a:	4b2c      	ldr	r3, [pc, #176]	; (800941c <MX_GPIO_Init+0xf8>)
 800936c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936e:	4a2b      	ldr	r2, [pc, #172]	; (800941c <MX_GPIO_Init+0xf8>)
 8009370:	f043 0308 	orr.w	r3, r3, #8
 8009374:	6313      	str	r3, [r2, #48]	; 0x30
 8009376:	4b29      	ldr	r3, [pc, #164]	; (800941c <MX_GPIO_Init+0xf8>)
 8009378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937a:	f003 0308 	and.w	r3, r3, #8
 800937e:	60bb      	str	r3, [r7, #8]
 8009380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009382:	4b26      	ldr	r3, [pc, #152]	; (800941c <MX_GPIO_Init+0xf8>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	4a25      	ldr	r2, [pc, #148]	; (800941c <MX_GPIO_Init+0xf8>)
 8009388:	f043 0304 	orr.w	r3, r3, #4
 800938c:	6313      	str	r3, [r2, #48]	; 0x30
 800938e:	4b23      	ldr	r3, [pc, #140]	; (800941c <MX_GPIO_Init+0xf8>)
 8009390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009392:	f003 0304 	and.w	r3, r3, #4
 8009396:	607b      	str	r3, [r7, #4]
 8009398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800939a:	2200      	movs	r2, #0
 800939c:	2110      	movs	r1, #16
 800939e:	4820      	ldr	r0, [pc, #128]	; (8009420 <MX_GPIO_Init+0xfc>)
 80093a0:	f002 ff70 	bl	800c284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80093a4:	2200      	movs	r2, #0
 80093a6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80093aa:	481e      	ldr	r0, [pc, #120]	; (8009424 <MX_GPIO_Init+0x100>)
 80093ac:	f002 ff6a 	bl	800c284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80093b0:	2308      	movs	r3, #8
 80093b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80093b4:	4b1c      	ldr	r3, [pc, #112]	; (8009428 <MX_GPIO_Init+0x104>)
 80093b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093bc:	f107 0314 	add.w	r3, r7, #20
 80093c0:	4619      	mov	r1, r3
 80093c2:	4817      	ldr	r0, [pc, #92]	; (8009420 <MX_GPIO_Init+0xfc>)
 80093c4:	f002 fd9c 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80093c8:	2310      	movs	r3, #16
 80093ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093cc:	2301      	movs	r3, #1
 80093ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80093d0:	2301      	movs	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80093d4:	2303      	movs	r3, #3
 80093d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093d8:	f107 0314 	add.w	r3, r7, #20
 80093dc:	4619      	mov	r1, r3
 80093de:	4810      	ldr	r0, [pc, #64]	; (8009420 <MX_GPIO_Init+0xfc>)
 80093e0:	f002 fd8e 	bl	800bf00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80093e4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80093e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093ea:	2301      	movs	r3, #1
 80093ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093ee:	2300      	movs	r3, #0
 80093f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093f2:	2300      	movs	r3, #0
 80093f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80093f6:	f107 0314 	add.w	r3, r7, #20
 80093fa:	4619      	mov	r1, r3
 80093fc:	4809      	ldr	r0, [pc, #36]	; (8009424 <MX_GPIO_Init+0x100>)
 80093fe:	f002 fd7f 	bl	800bf00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8009402:	2200      	movs	r2, #0
 8009404:	2105      	movs	r1, #5
 8009406:	2009      	movs	r0, #9
 8009408:	f002 f9ab 	bl	800b762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800940c:	2009      	movs	r0, #9
 800940e:	f002 f9c4 	bl	800b79a <HAL_NVIC_EnableIRQ>

}
 8009412:	bf00      	nop
 8009414:	3728      	adds	r7, #40	; 0x28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	40023800 	.word	0x40023800
 8009420:	40020000 	.word	0x40020000
 8009424:	40020c00 	.word	0x40020c00
 8009428:	10210000 	.word	0x10210000

0800942c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	4603      	mov	r3, r0
 8009434:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == GPIO_PIN_3 && id == 3 && ADS1256.data_startFlag == 1 && I2cC.i2cRecive == 0)
 8009436:	88fb      	ldrh	r3, [r7, #6]
 8009438:	2b08      	cmp	r3, #8
 800943a:	d17f      	bne.n	800953c <HAL_GPIO_EXTI_Callback+0x110>
 800943c:	4b41      	ldr	r3, [pc, #260]	; (8009544 <HAL_GPIO_EXTI_Callback+0x118>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	2b03      	cmp	r3, #3
 8009442:	d17b      	bne.n	800953c <HAL_GPIO_EXTI_Callback+0x110>
 8009444:	4a40      	ldr	r2, [pc, #256]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 8009446:	f244 0308 	movw	r3, #16392	; 0x4008
 800944a:	4413      	add	r3, r2
 800944c:	781b      	ldrb	r3, [r3, #0]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d174      	bne.n	800953c <HAL_GPIO_EXTI_Callback+0x110>
 8009452:	4b3e      	ldr	r3, [pc, #248]	; (800954c <HAL_GPIO_EXTI_Callback+0x120>)
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d170      	bne.n	800953c <HAL_GPIO_EXTI_Callback+0x110>
	{
		    /* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */
		HAL_SPI_TransmitReceive_DMA(&hspi1,RDATACsend_data,Databuffer,3);
 800945a:	2303      	movs	r3, #3
 800945c:	4a3c      	ldr	r2, [pc, #240]	; (8009550 <HAL_GPIO_EXTI_Callback+0x124>)
 800945e:	493d      	ldr	r1, [pc, #244]	; (8009554 <HAL_GPIO_EXTI_Callback+0x128>)
 8009460:	483d      	ldr	r0, [pc, #244]	; (8009558 <HAL_GPIO_EXTI_Callback+0x12c>)
 8009462:	f005 fdd1 	bl	800f008 <HAL_SPI_TransmitReceive_DMA>

				// construct 24 bit value
		read  = ((int32_t)Databuffer[0] << 16) & 0x00FF0000;
 8009466:	4b3a      	ldr	r3, [pc, #232]	; (8009550 <HAL_GPIO_EXTI_Callback+0x124>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	041b      	lsls	r3, r3, #16
 800946c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009470:	4a3a      	ldr	r2, [pc, #232]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 8009472:	6013      	str	r3, [r2, #0]
		read |= ((int32_t)Databuffer[1] << 8);
 8009474:	4b36      	ldr	r3, [pc, #216]	; (8009550 <HAL_GPIO_EXTI_Callback+0x124>)
 8009476:	785b      	ldrb	r3, [r3, #1]
 8009478:	021a      	lsls	r2, r3, #8
 800947a:	4b38      	ldr	r3, [pc, #224]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4313      	orrs	r3, r2
 8009480:	4a36      	ldr	r2, [pc, #216]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 8009482:	6013      	str	r3, [r2, #0]
		read |= Databuffer[2];
 8009484:	4b32      	ldr	r3, [pc, #200]	; (8009550 <HAL_GPIO_EXTI_Callback+0x124>)
 8009486:	789b      	ldrb	r3, [r3, #2]
 8009488:	461a      	mov	r2, r3
 800948a:	4b34      	ldr	r3, [pc, #208]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4313      	orrs	r3, r2
 8009490:	4a32      	ldr	r2, [pc, #200]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 8009492:	6013      	str	r3, [r2, #0]
		if (read & 0x800000){
 8009494:	4b31      	ldr	r3, [pc, #196]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d006      	beq.n	80094ae <HAL_GPIO_EXTI_Callback+0x82>
			read |= 0xFF000000;
 80094a0:	4b2e      	ldr	r3, [pc, #184]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a8:	461a      	mov	r2, r3
 80094aa:	4b2c      	ldr	r3, [pc, #176]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 80094ac:	601a      	str	r2, [r3, #0]

		}
		data = read;
 80094ae:	4b2b      	ldr	r3, [pc, #172]	; (800955c <HAL_GPIO_EXTI_Callback+0x130>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	ee07 3a90 	vmov	s15, r3
 80094b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80094ba:	4b29      	ldr	r3, [pc, #164]	; (8009560 <HAL_GPIO_EXTI_Callback+0x134>)
 80094bc:	edc3 7a00 	vstr	s15, [r3]
		data = data / 1677721;
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <HAL_GPIO_EXTI_Callback+0x134>)
 80094c2:	ed93 7a00 	vldr	s14, [r3]
 80094c6:	eddf 6a27 	vldr	s13, [pc, #156]	; 8009564 <HAL_GPIO_EXTI_Callback+0x138>
 80094ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80094ce:	4b24      	ldr	r3, [pc, #144]	; (8009560 <HAL_GPIO_EXTI_Callback+0x134>)
 80094d0:	edc3 7a00 	vstr	s15, [r3]
		ADS1256.data_buffer[ADS1256.data_index] = data; //plus 2 for FFT using
 80094d4:	4b1c      	ldr	r3, [pc, #112]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a21      	ldr	r2, [pc, #132]	; (8009560 <HAL_GPIO_EXTI_Callback+0x134>)
 80094da:	6812      	ldr	r2, [r2, #0]
 80094dc:	491a      	ldr	r1, [pc, #104]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80094de:	3302      	adds	r3, #2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	440b      	add	r3, r1
 80094e4:	601a      	str	r2, [r3, #0]
		ADS1256.data_index++;
 80094e6:	4b18      	ldr	r3, [pc, #96]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3301      	adds	r3, #1
 80094ec:	4a16      	ldr	r2, [pc, #88]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80094ee:	6013      	str	r3, [r2, #0]

		if(ADS1256.data_index == ADS1256.data_length) //divide 2 for FFT real data equal 4096
 80094f0:	4b15      	ldr	r3, [pc, #84]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	4b14      	ldr	r3, [pc, #80]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 80094f6:	685b      	ldr	r3, [r3, #4]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d11f      	bne.n	800953c <HAL_GPIO_EXTI_Callback+0x110>
		{
		/* The xHigherPriorityTaskWoken parameter must be initialized to pdFALSE because it will get set to pdTRUE inside the interrupt-safe API function if a context switch is required. */
			BaseType_t xHigherPriorityTaskWoken;
			xHigherPriorityTaskWoken = pdFALSE;
 80094fc:	2300      	movs	r3, #0
 80094fe:	60fb      	str	r3, [r7, #12]
			xSemaphoreGiveFromISR(adcBinarySemHandle,&xHigherPriorityTaskWoken); //Wakeup High Priority Task
 8009500:	4b19      	ldr	r3, [pc, #100]	; (8009568 <HAL_GPIO_EXTI_Callback+0x13c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f107 020c 	add.w	r2, r7, #12
 8009508:	4611      	mov	r1, r2
 800950a:	4618      	mov	r0, r3
 800950c:	f007 fda0 	bl	8011050 <xQueueGiveFromISR>

				if(xHigherPriorityTaskWoken == pdTRUE)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d10a      	bne.n	800952c <HAL_GPIO_EXTI_Callback+0x100>
				{
					portEND_SWITCHING_ISR( xHigherPriorityTaskWoken ); //Switch high priority task from ISR
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d007      	beq.n	800952c <HAL_GPIO_EXTI_Callback+0x100>
 800951c:	4b13      	ldr	r3, [pc, #76]	; (800956c <HAL_GPIO_EXTI_Callback+0x140>)
 800951e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009522:	601a      	str	r2, [r3, #0]
 8009524:	f3bf 8f4f 	dsb	sy
 8009528:	f3bf 8f6f 	isb	sy
				}

			ADS1256.data_index = 0;
 800952c:	4b06      	ldr	r3, [pc, #24]	; (8009548 <HAL_GPIO_EXTI_Callback+0x11c>)
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8009532:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009536:	480e      	ldr	r0, [pc, #56]	; (8009570 <HAL_GPIO_EXTI_Callback+0x144>)
 8009538:	f002 febd 	bl	800c2b6 <HAL_GPIO_TogglePin>
		}

	}
}
 800953c:	bf00      	nop
 800953e:	3710      	adds	r7, #16
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20000294 	.word	0x20000294
 8009548:	20003ffc 	.word	0x20003ffc
 800954c:	200187e8 	.word	0x200187e8
 8009550:	200002a0 	.word	0x200002a0
 8009554:	20000000 	.word	0x20000000
 8009558:	20018784 	.word	0x20018784
 800955c:	20000298 	.word	0x20000298
 8009560:	2000c4ac 	.word	0x2000c4ac
 8009564:	49ccccc8 	.word	0x49ccccc8
 8009568:	2000843c 	.word	0x2000843c
 800956c:	e000ed04 	.word	0xe000ed04
 8009570:	40020c00 	.word	0x40020c00

08009574 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */
  USARTBLE.iapbuffer[USARTBLE.RxCount++]= aRxBuffer[0];
 800957c:	4b26      	ldr	r3, [pc, #152]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	1c5a      	adds	r2, r3, #1
 8009582:	4925      	ldr	r1, [pc, #148]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 8009584:	604a      	str	r2, [r1, #4]
 8009586:	4a25      	ldr	r2, [pc, #148]	; (800961c <HAL_UART_RxCpltCallback+0xa8>)
 8009588:	7811      	ldrb	r1, [r2, #0]
 800958a:	4a23      	ldr	r2, [pc, #140]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 800958c:	4413      	add	r3, r2
 800958e:	460a      	mov	r2, r1
 8009590:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  if(aRxBuffer[0]==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command, Send a receive flag.
 8009594:	4b21      	ldr	r3, [pc, #132]	; (800961c <HAL_UART_RxCpltCallback+0xa8>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	2b0a      	cmp	r3, #10
 800959a:	d120      	bne.n	80095de <HAL_UART_RxCpltCallback+0x6a>
  	{
	  USARTBLE.RxCount=0;
 800959c:	4b1e      	ldr	r3, [pc, #120]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 800959e:	2200      	movs	r2, #0
 80095a0:	605a      	str	r2, [r3, #4]
	  _Bool command = checkBLECommandFromBLEGateway(USARTBLE.iapbuffer ,"request",7);
 80095a2:	2207      	movs	r2, #7
 80095a4:	491e      	ldr	r1, [pc, #120]	; (8009620 <HAL_UART_RxCpltCallback+0xac>)
 80095a6:	481f      	ldr	r0, [pc, #124]	; (8009624 <HAL_UART_RxCpltCallback+0xb0>)
 80095a8:	f7ff fa7a 	bl	8008aa0 <checkBLECommandFromBLEGateway>
 80095ac:	4603      	mov	r3, r0
 80095ae:	73fb      	strb	r3, [r7, #15]
	  if(command)
 80095b0:	7bfb      	ldrb	r3, [r7, #15]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00a      	beq.n	80095cc <HAL_UART_RxCpltCallback+0x58>
	  {
		  USARTBLE.IAPflag =1;
 80095b6:	4b18      	ldr	r3, [pc, #96]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 80095b8:	2201      	movs	r2, #1
 80095ba:	705a      	strb	r2, [r3, #1]
		  USARTBLE.sendflag = 0;
 80095bc:	4b16      	ldr	r3, [pc, #88]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 80095be:	2200      	movs	r2, #0
 80095c0:	701a      	strb	r2, [r3, #0]
		  BLE_USART(huart, &statistic_value);
 80095c2:	4919      	ldr	r1, [pc, #100]	; (8009628 <HAL_UART_RxCpltCallback+0xb4>)
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f7ff fa1d 	bl	8008a04 <BLE_USART>
 80095ca:	e008      	b.n	80095de <HAL_UART_RxCpltCallback+0x6a>
	  }
	  else
	  {
		  memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) );
 80095cc:	4815      	ldr	r0, [pc, #84]	; (8009624 <HAL_UART_RxCpltCallback+0xb0>)
 80095ce:	f7fe fe37 	bl	8008240 <strlen>
 80095d2:	4603      	mov	r3, r0
 80095d4:	461a      	mov	r2, r3
 80095d6:	2100      	movs	r1, #0
 80095d8:	4812      	ldr	r0, [pc, #72]	; (8009624 <HAL_UART_RxCpltCallback+0xb0>)
 80095da:	f009 fe3e 	bl	801325a <memset>
	  }

  	}
  	if(USARTBLE.RxCount>=15)//no  "\n" Line feeds string full over to 24 byte, clear data
 80095de:	4b0e      	ldr	r3, [pc, #56]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2b0e      	cmp	r3, #14
 80095e4:	dd0b      	ble.n	80095fe <HAL_UART_RxCpltCallback+0x8a>
  	{
  		USARTBLE.RxCount=0;
 80095e6:	4b0c      	ldr	r3, [pc, #48]	; (8009618 <HAL_UART_RxCpltCallback+0xa4>)
 80095e8:	2200      	movs	r2, #0
 80095ea:	605a      	str	r2, [r3, #4]
  		memset( USARTBLE.iapbuffer, 0, strlen(USARTBLE.iapbuffer) ); //clear Receive data
 80095ec:	480d      	ldr	r0, [pc, #52]	; (8009624 <HAL_UART_RxCpltCallback+0xb0>)
 80095ee:	f7fe fe27 	bl	8008240 <strlen>
 80095f2:	4603      	mov	r3, r0
 80095f4:	461a      	mov	r2, r3
 80095f6:	2100      	movs	r1, #0
 80095f8:	480a      	ldr	r0, [pc, #40]	; (8009624 <HAL_UART_RxCpltCallback+0xb0>)
 80095fa:	f009 fe2e 	bl	801325a <memset>
  	}

  while(HAL_UART_Receive_IT(huart, (uint8_t *)aRxBuffer, 1)==HAL_OK);
 80095fe:	bf00      	nop
 8009600:	2201      	movs	r2, #1
 8009602:	4906      	ldr	r1, [pc, #24]	; (800961c <HAL_UART_RxCpltCallback+0xa8>)
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f006 f949 	bl	800f89c <HAL_UART_Receive_IT>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d0f7      	beq.n	8009600 <HAL_UART_RxCpltCallback+0x8c>
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	200104c0 	.word	0x200104c0
 800961c:	20018780 	.word	0x20018780
 8009620:	0801335c 	.word	0x0801335c
 8009624:	20010660 	.word	0x20010660
 8009628:	20008058 	.word	0x20008058

0800962c <ADC_Thread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ADC_Thread */
void ADC_Thread(void const * argument)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  const TickType_t xMaxExpectedBlockTime = pdMS_TO_TICKS( 500 );
 8009634:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8009638:	60fb      	str	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 800963a:	4b13      	ldr	r3, [pc, #76]	; (8009688 <ADC_Thread+0x5c>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68f9      	ldr	r1, [r7, #12]
 8009640:	4618      	mov	r0, r3
 8009642:	f007 fe79 	bl	8011338 <xQueueSemaphoreTake>
 8009646:	4603      	mov	r3, r0
 8009648:	2b01      	cmp	r3, #1
 800964a:	d1f6      	bne.n	800963a <ADC_Thread+0xe>
 800964c:	4b0f      	ldr	r3, [pc, #60]	; (800968c <ADC_Thread+0x60>)
 800964e:	781b      	ldrb	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1f2      	bne.n	800963a <ADC_Thread+0xe>


				/*TODO: send data to buffer*/
				BaseType_t xStatus;
				xStatus = xQueueSendToBack(adcQueueHandle, &xdatatoSend , 0);
 8009654:	4b0e      	ldr	r3, [pc, #56]	; (8009690 <ADC_Thread+0x64>)
 8009656:	6818      	ldr	r0, [r3, #0]
 8009658:	2300      	movs	r3, #0
 800965a:	2200      	movs	r2, #0
 800965c:	490d      	ldr	r1, [pc, #52]	; (8009694 <ADC_Thread+0x68>)
 800965e:	f007 fbf5 	bl	8010e4c <xQueueGenericSend>
 8009662:	60b8      	str	r0, [r7, #8]
				queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 8009664:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <ADC_Thread+0x64>)
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4618      	mov	r0, r3
 800966a:	f007 ff75 	bl	8011558 <uxQueueMessagesWaiting>
 800966e:	4602      	mov	r2, r0
 8009670:	4b09      	ldr	r3, [pc, #36]	; (8009698 <ADC_Thread+0x6c>)
 8009672:	601a      	str	r2, [r3, #0]

				if(xStatus == pdPASS)
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d1df      	bne.n	800963a <ADC_Thread+0xe>
				{
					vTaskResume(FFT_TaskHandle);
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <ADC_Thread+0x70>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4618      	mov	r0, r3
 8009680:	f008 fb0e 	bl	8011ca0 <vTaskResume>
		 if( xSemaphoreTake( adcBinarySemHandle, xMaxExpectedBlockTime ) == pdPASS && I2cC.i2cRecive == 0){
 8009684:	e7d9      	b.n	800963a <ADC_Thread+0xe>
 8009686:	bf00      	nop
 8009688:	2000843c 	.word	0x2000843c
 800968c:	200187e8 	.word	0x200187e8
 8009690:	2000c4a8 	.word	0x2000c4a8
 8009694:	20000008 	.word	0x20000008
 8009698:	2000822c 	.word	0x2000822c
 800969c:	20008438 	.word	0x20008438

080096a0 <FFT_Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_FFT_Thread */
void FFT_Thread(void const * argument)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFT_Thread */
  /* Infinite loop */
  for(;;)
  {
	  BaseType_t xStatus;
	 	  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 80096a8:	4b50      	ldr	r3, [pc, #320]	; (80097ec <FFT_Thread+0x14c>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4618      	mov	r0, r3
 80096ae:	f007 ff53 	bl	8011558 <uxQueueMessagesWaiting>
 80096b2:	4602      	mov	r2, r0
 80096b4:	4b4e      	ldr	r3, [pc, #312]	; (80097f0 <FFT_Thread+0x150>)
 80096b6:	601a      	str	r2, [r3, #0]
	 	  if(queueCount!=0){
 80096b8:	4b4d      	ldr	r3, [pc, #308]	; (80097f0 <FFT_Thread+0x150>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	f000 8091 	beq.w	80097e4 <FFT_Thread+0x144>
	 			  xStatus = xQueueReceive(adcQueueHandle, &dataRecive, 100);
 80096c2:	4b4a      	ldr	r3, [pc, #296]	; (80097ec <FFT_Thread+0x14c>)
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	2264      	movs	r2, #100	; 0x64
 80096c8:	494a      	ldr	r1, [pc, #296]	; (80097f4 <FFT_Thread+0x154>)
 80096ca:	4618      	mov	r0, r3
 80096cc:	f007 fd52 	bl	8011174 <xQueueReceive>
 80096d0:	60b8      	str	r0, [r7, #8]
	 			  queueCount = uxQueueMessagesWaiting(adcQueueHandle);
 80096d2:	4b46      	ldr	r3, [pc, #280]	; (80097ec <FFT_Thread+0x14c>)
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f007 ff3e 	bl	8011558 <uxQueueMessagesWaiting>
 80096dc:	4602      	mov	r2, r0
 80096de:	4b44      	ldr	r3, [pc, #272]	; (80097f0 <FFT_Thread+0x150>)
 80096e0:	601a      	str	r2, [r3, #0]

	 			HAL_IWDG_Refresh(&hiwdg);
 80096e2:	4845      	ldr	r0, [pc, #276]	; (80097f8 <FFT_Thread+0x158>)
 80096e4:	f003 ff5a 	bl	800d59c <HAL_IWDG_Refresh>
	 			for(uint32_t i = 0; i<dataLength; i++)
 80096e8:	2300      	movs	r3, #0
 80096ea:	60fb      	str	r3, [r7, #12]
 80096ec:	e022      	b.n	8009734 <FFT_Thread+0x94>
	 			{
	 				//recivedata5 = *(dataRecive[0]+i);
	 				rawData[i]=*(dataRecive[0]+i);
 80096ee:	4b41      	ldr	r3, [pc, #260]	; (80097f4 <FFT_Thread+0x154>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4413      	add	r3, r2
 80096f8:	681a      	ldr	r2, [r3, #0]
 80096fa:	4940      	ldr	r1, [pc, #256]	; (80097fc <FFT_Thread+0x15c>)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	009b      	lsls	r3, r3, #2
 8009700:	440b      	add	r3, r1
 8009702:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2] = *(dataRecive[0]+i);
 8009704:	4b3b      	ldr	r3, [pc, #236]	; (80097f4 <FFT_Thread+0x154>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	441a      	add	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	005b      	lsls	r3, r3, #1
 8009712:	6812      	ldr	r2, [r2, #0]
 8009714:	493a      	ldr	r1, [pc, #232]	; (8009800 <FFT_Thread+0x160>)
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	601a      	str	r2, [r3, #0]
	 				FFTdata[i*2+1] = 0;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	3301      	adds	r3, #1
 8009722:	4a37      	ldr	r2, [pc, #220]	; (8009800 <FFT_Thread+0x160>)
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	f04f 0200 	mov.w	r2, #0
 800972c:	601a      	str	r2, [r3, #0]
	 			for(uint32_t i = 0; i<dataLength; i++)
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	3301      	adds	r3, #1
 8009732:	60fb      	str	r3, [r7, #12]
 8009734:	4b33      	ldr	r3, [pc, #204]	; (8009804 <FFT_Thread+0x164>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	429a      	cmp	r2, r3
 800973c:	d3d7      	bcc.n	80096ee <FFT_Thread+0x4e>
	 			}

	 			if(xStatus == pdPASS)
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d1b1      	bne.n	80096a8 <FFT_Thread+0x8>
	 			{



	 				arm_max_f32(statisticDataSet, dataLength, &statistic_value.Statistic_max, &maxtestIndex);
 8009744:	4b30      	ldr	r3, [pc, #192]	; (8009808 <FFT_Thread+0x168>)
 8009746:	6818      	ldr	r0, [r3, #0]
 8009748:	4b2e      	ldr	r3, [pc, #184]	; (8009804 <FFT_Thread+0x164>)
 800974a:	6819      	ldr	r1, [r3, #0]
 800974c:	4b2f      	ldr	r3, [pc, #188]	; (800980c <FFT_Thread+0x16c>)
 800974e:	4a30      	ldr	r2, [pc, #192]	; (8009810 <FFT_Thread+0x170>)
 8009750:	f7fe fefe 	bl	8008550 <arm_max_f32>
	 				arm_min_f32(statisticDataSet, dataLength, &statistic_value.Statistic_min, &mintestIndex);
 8009754:	4b2c      	ldr	r3, [pc, #176]	; (8009808 <FFT_Thread+0x168>)
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	4b2a      	ldr	r3, [pc, #168]	; (8009804 <FFT_Thread+0x164>)
 800975a:	6819      	ldr	r1, [r3, #0]
 800975c:	4b2d      	ldr	r3, [pc, #180]	; (8009814 <FFT_Thread+0x174>)
 800975e:	4a2e      	ldr	r2, [pc, #184]	; (8009818 <FFT_Thread+0x178>)
 8009760:	f7fe ff8c 	bl	800867c <arm_min_f32>
	 				/*TODO: Calculate skewness and kurtosis will cause delay*/
	 				//statistic_value.Statistic_kurtosis = Calculate_kurtosis(statisticDataSet, dataLength);
	 				//statistic_value.Statistic_skewness = Calculate_skewness(statisticDataSet, dataLength);

	 				/*TODO: to calculate 3 times moving average*/
	 				averageTimes++;
 8009764:	4b2d      	ldr	r3, [pc, #180]	; (800981c <FFT_Thread+0x17c>)
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	b2da      	uxtb	r2, r3
 800976c:	4b2b      	ldr	r3, [pc, #172]	; (800981c <FFT_Thread+0x17c>)
 800976e:	701a      	strb	r2, [r3, #0]
	 				if(averageTimes == 1)
 8009770:	4b2a      	ldr	r3, [pc, #168]	; (800981c <FFT_Thread+0x17c>)
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d103      	bne.n	8009780 <FFT_Thread+0xe0>
	 				{
	 					statistic_value.Statistic_max_Temp = statistic_value.Statistic_max;
 8009778:	4b25      	ldr	r3, [pc, #148]	; (8009810 <FFT_Thread+0x170>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	4a24      	ldr	r2, [pc, #144]	; (8009810 <FFT_Thread+0x170>)
 800977e:	67d3      	str	r3, [r2, #124]	; 0x7c
	 				}
	 				if(averageTimes == 2)
 8009780:	4b26      	ldr	r3, [pc, #152]	; (800981c <FFT_Thread+0x17c>)
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d10a      	bne.n	800979e <FFT_Thread+0xfe>
	 				{
	 					statistic_value.Statistic_max_Temp += statistic_value.Statistic_max;
 8009788:	4b21      	ldr	r3, [pc, #132]	; (8009810 <FFT_Thread+0x170>)
 800978a:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800978e:	4b20      	ldr	r3, [pc, #128]	; (8009810 <FFT_Thread+0x170>)
 8009790:	edd3 7a00 	vldr	s15, [r3]
 8009794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <FFT_Thread+0x170>)
 800979a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
	 				}
	 				if(averageTimes == 3)
 800979e:	4b1f      	ldr	r3, [pc, #124]	; (800981c <FFT_Thread+0x17c>)
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d118      	bne.n	80097d8 <FFT_Thread+0x138>
	 				{
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 80097a6:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <FFT_Thread+0x170>)
 80097a8:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
	 							statistic_value.Statistic_max) / 3;
 80097ac:	4b18      	ldr	r3, [pc, #96]	; (8009810 <FFT_Thread+0x170>)
 80097ae:	edd3 7a00 	vldr	s15, [r3]
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 80097b2:	ee37 7a27 	vadd.f32	s14, s14, s15
	 							statistic_value.Statistic_max) / 3;
 80097b6:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80097ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
	 					statistic_value.Statistic_max = (statistic_value.Statistic_max_Temp +
 80097be:	4b14      	ldr	r3, [pc, #80]	; (8009810 <FFT_Thread+0x170>)
 80097c0:	edc3 7a00 	vstr	s15, [r3]

	 					USARTBLE.sendflag = 1;
 80097c4:	4b16      	ldr	r3, [pc, #88]	; (8009820 <FFT_Thread+0x180>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	701a      	strb	r2, [r3, #0]
	 					averageTimes = 0;
 80097ca:	4b14      	ldr	r3, [pc, #80]	; (800981c <FFT_Thread+0x17c>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	701a      	strb	r2, [r3, #0]

	 					/*TODO: BLE send data*/
	 					BLE_USART(&huart6, &statistic_value);
 80097d0:	490f      	ldr	r1, [pc, #60]	; (8009810 <FFT_Thread+0x170>)
 80097d2:	4814      	ldr	r0, [pc, #80]	; (8009824 <FFT_Thread+0x184>)
 80097d4:	f7ff f916 	bl	8008a04 <BLE_USART>

	 				//snprintf_(bb,20, "%.3f Pa", statistic_value.Statistic_max);



	 				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80097d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80097dc:	4812      	ldr	r0, [pc, #72]	; (8009828 <FFT_Thread+0x188>)
 80097de:	f002 fd6a 	bl	800c2b6 <HAL_GPIO_TogglePin>
 80097e2:	e761      	b.n	80096a8 <FFT_Thread+0x8>
	 			}
	 */
	 	  }

	 	  else{
	 		 vTaskSuspend(NULL);
 80097e4:	2000      	movs	r0, #0
 80097e6:	f008 f995 	bl	8011b14 <vTaskSuspend>
  {
 80097ea:	e75d      	b.n	80096a8 <FFT_Thread+0x8>
 80097ec:	2000c4a8 	.word	0x2000c4a8
 80097f0:	2000822c 	.word	0x2000822c
 80097f4:	2001884c 	.word	0x2001884c
 80097f8:	200082dc 	.word	0x200082dc
 80097fc:	2000c4b0 	.word	0x2000c4b0
 8009800:	20010700 	.word	0x20010700
 8009804:	200002ac 	.word	0x200002ac
 8009808:	20008120 	.word	0x20008120
 800980c:	200002a4 	.word	0x200002a4
 8009810:	20008058 	.word	0x20008058
 8009814:	200002a8 	.word	0x200002a8
 8009818:	2000805c 	.word	0x2000805c
 800981c:	2000029c 	.word	0x2000029c
 8009820:	200104c0 	.word	0x200104c0
 8009824:	20018700 	.word	0x20018700
 8009828:	40020c00 	.word	0x40020c00

0800982c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800982c:	b480      	push	{r7}
 800982e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009830:	bf00      	nop
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 800983a:	b480      	push	{r7}
 800983c:	b085      	sub	sp, #20
 800983e:	af00      	add	r7, sp, #0
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
 8009844:	603b      	str	r3, [r7, #0]
 8009846:	4603      	mov	r3, r0
 8009848:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 800984a:	687a      	ldr	r2, [r7, #4]
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	429a      	cmp	r2, r3
 8009850:	d204      	bcs.n	800985c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8009852:	68ba      	ldr	r2, [r7, #8]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4413      	add	r3, r2
 8009858:	7bfa      	ldrb	r2, [r7, #15]
 800985a:	701a      	strb	r2, [r3, #0]
  }
}
 800985c:	bf00      	nop
 800985e:	3714      	adds	r7, #20
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	4603      	mov	r3, r0
 8009876:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8009878:	bf00      	nop
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e002      	b.n	800989a <_strnlen_s+0x16>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3301      	adds	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d004      	beq.n	80098ac <_strnlen_s+0x28>
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	1e5a      	subs	r2, r3, #1
 80098a6:	603a      	str	r2, [r7, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d1f3      	bne.n	8009894 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	1ad3      	subs	r3, r2, r3
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3714      	adds	r7, #20
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80098be:	b480      	push	{r7}
 80098c0:	b083      	sub	sp, #12
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	4603      	mov	r3, r0
 80098c6:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80098c8:	79fb      	ldrb	r3, [r7, #7]
 80098ca:	2b2f      	cmp	r3, #47	; 0x2f
 80098cc:	d904      	bls.n	80098d8 <_is_digit+0x1a>
 80098ce:	79fb      	ldrb	r3, [r7, #7]
 80098d0:	2b39      	cmp	r3, #57	; 0x39
 80098d2:	d801      	bhi.n	80098d8 <_is_digit+0x1a>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e000      	b.n	80098da <_is_digit+0x1c>
 80098d8:	2300      	movs	r3, #0
 80098da:	f003 0301 	and.w	r3, r3, #1
 80098de:	b2db      	uxtb	r3, r3
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80098f4:	2300      	movs	r3, #0
 80098f6:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80098f8:	e00e      	b.n	8009918 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4613      	mov	r3, r2
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	005b      	lsls	r3, r3, #1
 8009904:	4618      	mov	r0, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	1c59      	adds	r1, r3, #1
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	6011      	str	r1, [r2, #0]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	4403      	add	r3, r0
 8009914:	3b30      	subs	r3, #48	; 0x30
 8009916:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	4618      	mov	r0, r3
 8009920:	f7ff ffcd 	bl	80098be <_is_digit>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e7      	bne.n	80098fa <_atoi+0xe>
  }
  return i;
 800992a:	68fb      	ldr	r3, [r7, #12]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3710      	adds	r7, #16
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b087      	sub	sp, #28
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8009946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009948:	f003 0302 	and.w	r3, r3, #2
 800994c:	2b00      	cmp	r3, #0
 800994e:	d125      	bne.n	800999c <_out_rev+0x68>
 8009950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b00      	cmp	r3, #0
 8009958:	d120      	bne.n	800999c <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 800995a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995c:	617b      	str	r3, [r7, #20]
 800995e:	e00a      	b.n	8009976 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	1c53      	adds	r3, r2, #1
 8009964:	607b      	str	r3, [r7, #4]
 8009966:	68fc      	ldr	r4, [r7, #12]
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	68b9      	ldr	r1, [r7, #8]
 800996c:	2020      	movs	r0, #32
 800996e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	3301      	adds	r3, #1
 8009974:	617b      	str	r3, [r7, #20]
 8009976:	697a      	ldr	r2, [r7, #20]
 8009978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997a:	429a      	cmp	r2, r3
 800997c:	d3f0      	bcc.n	8009960 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800997e:	e00d      	b.n	800999c <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8009980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009982:	3b01      	subs	r3, #1
 8009984:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	4413      	add	r3, r2
 800998c:	7818      	ldrb	r0, [r3, #0]
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	1c53      	adds	r3, r2, #1
 8009992:	607b      	str	r3, [r7, #4]
 8009994:	68fc      	ldr	r4, [r7, #12]
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	47a0      	blx	r4
  while (len) {
 800999c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1ee      	bne.n	8009980 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80099a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a4:	f003 0302 	and.w	r3, r3, #2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <_out_rev+0x96>
    while (idx - start_idx < width) {
 80099ac:	e007      	b.n	80099be <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	1c53      	adds	r3, r2, #1
 80099b2:	607b      	str	r3, [r7, #4]
 80099b4:	68fc      	ldr	r4, [r7, #12]
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	68b9      	ldr	r1, [r7, #8]
 80099ba:	2020      	movs	r0, #32
 80099bc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	1ad3      	subs	r3, r2, r3
 80099c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d8f1      	bhi.n	80099ae <_out_rev+0x7a>
    }
  }

  return idx;
 80099ca:	687b      	ldr	r3, [r7, #4]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	371c      	adds	r7, #28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd90      	pop	{r4, r7, pc}

080099d4 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b088      	sub	sp, #32
 80099d8:	af04      	add	r7, sp, #16
 80099da:	60f8      	str	r0, [r7, #12]
 80099dc:	60b9      	str	r1, [r7, #8]
 80099de:	607a      	str	r2, [r7, #4]
 80099e0:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80099e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e4:	f003 0302 	and.w	r3, r3, #2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d136      	bne.n	8009a5a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80099ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d018      	beq.n	8009a24 <_ntoa_format+0x50>
 80099f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f4:	f003 0301 	and.w	r3, r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d013      	beq.n	8009a24 <_ntoa_format+0x50>
 80099fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d104      	bne.n	8009a0e <_ntoa_format+0x3a>
 8009a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a06:	f003 030c 	and.w	r3, r3, #12
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00a      	beq.n	8009a24 <_ntoa_format+0x50>
      width--;
 8009a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a10:	3b01      	subs	r3, #1
 8009a12:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009a14:	e006      	b.n	8009a24 <_ntoa_format+0x50>
      buf[len++] = '0';
 8009a16:	69fb      	ldr	r3, [r7, #28]
 8009a18:	1c5a      	adds	r2, r3, #1
 8009a1a:	61fa      	str	r2, [r7, #28]
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	4413      	add	r3, r2
 8009a20:	2230      	movs	r2, #48	; 0x30
 8009a22:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009a24:	69fa      	ldr	r2, [r7, #28]
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d20a      	bcs.n	8009a42 <_ntoa_format+0x6e>
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	2b1f      	cmp	r3, #31
 8009a30:	d9f1      	bls.n	8009a16 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009a32:	e006      	b.n	8009a42 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	61fa      	str	r2, [r7, #28]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	2230      	movs	r2, #48	; 0x30
 8009a40:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d006      	beq.n	8009a5a <_ntoa_format+0x86>
 8009a4c:	69fa      	ldr	r2, [r7, #28]
 8009a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d202      	bcs.n	8009a5a <_ntoa_format+0x86>
 8009a54:	69fb      	ldr	r3, [r7, #28]
 8009a56:	2b1f      	cmp	r3, #31
 8009a58:	d9ec      	bls.n	8009a34 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8009a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a5c:	f003 0310 	and.w	r3, r3, #16
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d058      	beq.n	8009b16 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8009a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d116      	bne.n	8009a9c <_ntoa_format+0xc8>
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d013      	beq.n	8009a9c <_ntoa_format+0xc8>
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d003      	beq.n	8009a84 <_ntoa_format+0xb0>
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d10b      	bne.n	8009a9c <_ntoa_format+0xc8>
      len--;
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	3b01      	subs	r3, #1
 8009a88:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d005      	beq.n	8009a9c <_ntoa_format+0xc8>
 8009a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a92:	2b10      	cmp	r3, #16
 8009a94:	d102      	bne.n	8009a9c <_ntoa_format+0xc8>
        len--;
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9e:	2b10      	cmp	r3, #16
 8009aa0:	d10f      	bne.n	8009ac2 <_ntoa_format+0xee>
 8009aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa4:	f003 0320 	and.w	r3, r3, #32
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10a      	bne.n	8009ac2 <_ntoa_format+0xee>
 8009aac:	69fb      	ldr	r3, [r7, #28]
 8009aae:	2b1f      	cmp	r3, #31
 8009ab0:	d807      	bhi.n	8009ac2 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	61fa      	str	r2, [r7, #28]
 8009ab8:	69ba      	ldr	r2, [r7, #24]
 8009aba:	4413      	add	r3, r2
 8009abc:	2278      	movs	r2, #120	; 0x78
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	e01f      	b.n	8009b02 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ac4:	2b10      	cmp	r3, #16
 8009ac6:	d10f      	bne.n	8009ae8 <_ntoa_format+0x114>
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aca:	f003 0320 	and.w	r3, r3, #32
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <_ntoa_format+0x114>
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	2b1f      	cmp	r3, #31
 8009ad6:	d807      	bhi.n	8009ae8 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	61fa      	str	r2, [r7, #28]
 8009ade:	69ba      	ldr	r2, [r7, #24]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	2258      	movs	r2, #88	; 0x58
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	e00c      	b.n	8009b02 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aea:	2b02      	cmp	r3, #2
 8009aec:	d109      	bne.n	8009b02 <_ntoa_format+0x12e>
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	2b1f      	cmp	r3, #31
 8009af2:	d806      	bhi.n	8009b02 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	61fa      	str	r2, [r7, #28]
 8009afa:	69ba      	ldr	r2, [r7, #24]
 8009afc:	4413      	add	r3, r2
 8009afe:	2262      	movs	r2, #98	; 0x62
 8009b00:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009b02:	69fb      	ldr	r3, [r7, #28]
 8009b04:	2b1f      	cmp	r3, #31
 8009b06:	d806      	bhi.n	8009b16 <_ntoa_format+0x142>
      buf[len++] = '0';
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	1c5a      	adds	r2, r3, #1
 8009b0c:	61fa      	str	r2, [r7, #28]
 8009b0e:	69ba      	ldr	r2, [r7, #24]
 8009b10:	4413      	add	r3, r2
 8009b12:	2230      	movs	r2, #48	; 0x30
 8009b14:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	2b1f      	cmp	r3, #31
 8009b1a:	d824      	bhi.n	8009b66 <_ntoa_format+0x192>
    if (negative) {
 8009b1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d007      	beq.n	8009b34 <_ntoa_format+0x160>
      buf[len++] = '-';
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	1c5a      	adds	r2, r3, #1
 8009b28:	61fa      	str	r2, [r7, #28]
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	4413      	add	r3, r2
 8009b2e:	222d      	movs	r2, #45	; 0x2d
 8009b30:	701a      	strb	r2, [r3, #0]
 8009b32:	e018      	b.n	8009b66 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8009b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d007      	beq.n	8009b4e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	1c5a      	adds	r2, r3, #1
 8009b42:	61fa      	str	r2, [r7, #28]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	4413      	add	r3, r2
 8009b48:	222b      	movs	r2, #43	; 0x2b
 8009b4a:	701a      	strb	r2, [r3, #0]
 8009b4c:	e00b      	b.n	8009b66 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8009b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b50:	f003 0308 	and.w	r3, r3, #8
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d006      	beq.n	8009b66 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8009b58:	69fb      	ldr	r3, [r7, #28]
 8009b5a:	1c5a      	adds	r2, r3, #1
 8009b5c:	61fa      	str	r2, [r7, #28]
 8009b5e:	69ba      	ldr	r2, [r7, #24]
 8009b60:	4413      	add	r3, r2
 8009b62:	2220      	movs	r2, #32
 8009b64:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8009b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b68:	9303      	str	r3, [sp, #12]
 8009b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6c:	9302      	str	r3, [sp, #8]
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	9301      	str	r3, [sp, #4]
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	687a      	ldr	r2, [r7, #4]
 8009b7a:	68b9      	ldr	r1, [r7, #8]
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f7ff fed9 	bl	8009934 <_out_rev>
 8009b82:	4603      	mov	r3, r0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3710      	adds	r7, #16
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b096      	sub	sp, #88	; 0x58
 8009b90:	af08      	add	r7, sp, #32
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	607a      	str	r2, [r7, #4]
 8009b98:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8009b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d103      	bne.n	8009bac <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8009ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ba6:	f023 0310 	bic.w	r3, r3, #16
 8009baa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8009bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d002      	beq.n	8009bbc <_ntoa_long+0x30>
 8009bb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d033      	beq.n	8009c24 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8009bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009bc0:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009bc6:	fb01 f202 	mul.w	r2, r1, r2
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bd4:	2b09      	cmp	r3, #9
 8009bd6:	d804      	bhi.n	8009be2 <_ntoa_long+0x56>
 8009bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bdc:	3330      	adds	r3, #48	; 0x30
 8009bde:	b2da      	uxtb	r2, r3
 8009be0:	e00d      	b.n	8009bfe <_ntoa_long+0x72>
 8009be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009be4:	f003 0320 	and.w	r3, r3, #32
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <_ntoa_long+0x64>
 8009bec:	2241      	movs	r2, #65	; 0x41
 8009bee:	e000      	b.n	8009bf2 <_ntoa_long+0x66>
 8009bf0:	2261      	movs	r2, #97	; 0x61
 8009bf2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009bf6:	4413      	add	r3, r2
 8009bf8:	b2db      	uxtb	r3, r3
 8009bfa:	3b0a      	subs	r3, #10
 8009bfc:	b2da      	uxtb	r2, r3
 8009bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c00:	1c59      	adds	r1, r3, #1
 8009c02:	6379      	str	r1, [r7, #52]	; 0x34
 8009c04:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009c08:	440b      	add	r3, r1
 8009c0a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8009c0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009c10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c16:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <_ntoa_long+0x98>
 8009c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c20:	2b1f      	cmp	r3, #31
 8009c22:	d9cb      	bls.n	8009bbc <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8009c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c26:	9306      	str	r3, [sp, #24]
 8009c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c2a:	9305      	str	r3, [sp, #20]
 8009c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c2e:	9304      	str	r3, [sp, #16]
 8009c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c32:	9303      	str	r3, [sp, #12]
 8009c34:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009c38:	9302      	str	r3, [sp, #8]
 8009c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c3c:	9301      	str	r3, [sp, #4]
 8009c3e:	f107 0310 	add.w	r3, r7, #16
 8009c42:	9300      	str	r3, [sp, #0]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	687a      	ldr	r2, [r7, #4]
 8009c48:	68b9      	ldr	r1, [r7, #8]
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f7ff fec2 	bl	80099d4 <_ntoa_format>
 8009c50:	4603      	mov	r3, r0
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3738      	adds	r7, #56	; 0x38
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009c5a:	b590      	push	{r4, r7, lr}
 8009c5c:	b097      	sub	sp, #92	; 0x5c
 8009c5e:	af08      	add	r7, sp, #32
 8009c60:	60f8      	str	r0, [r7, #12]
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	607a      	str	r2, [r7, #4]
 8009c66:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8009c6c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009c70:	4323      	orrs	r3, r4
 8009c72:	d103      	bne.n	8009c7c <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8009c74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c76:	f023 0310 	bic.w	r3, r3, #16
 8009c7a:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8009c7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d003      	beq.n	8009c8e <_ntoa_long_long+0x34>
 8009c86:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009c8a:	4323      	orrs	r3, r4
 8009c8c:	d039      	beq.n	8009d02 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8009c8e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009c96:	f7fe fadb 	bl	8008250 <__aeabi_uldivmod>
 8009c9a:	461c      	mov	r4, r3
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009ca2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ca6:	2b09      	cmp	r3, #9
 8009ca8:	d804      	bhi.n	8009cb4 <_ntoa_long_long+0x5a>
 8009caa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cae:	3330      	adds	r3, #48	; 0x30
 8009cb0:	b2da      	uxtb	r2, r3
 8009cb2:	e00d      	b.n	8009cd0 <_ntoa_long_long+0x76>
 8009cb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009cb6:	f003 0320 	and.w	r3, r3, #32
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d001      	beq.n	8009cc2 <_ntoa_long_long+0x68>
 8009cbe:	2241      	movs	r2, #65	; 0x41
 8009cc0:	e000      	b.n	8009cc4 <_ntoa_long_long+0x6a>
 8009cc2:	2261      	movs	r2, #97	; 0x61
 8009cc4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009cc8:	4413      	add	r3, r2
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	3b0a      	subs	r3, #10
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cd2:	1c59      	adds	r1, r3, #1
 8009cd4:	6379      	str	r1, [r7, #52]	; 0x34
 8009cd6:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8009cda:	440b      	add	r3, r1
 8009cdc:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8009ce0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ce4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009ce8:	f7fe fab2 	bl	8008250 <__aeabi_uldivmod>
 8009cec:	4603      	mov	r3, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009cf4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8009cf8:	4323      	orrs	r3, r4
 8009cfa:	d002      	beq.n	8009d02 <_ntoa_long_long+0xa8>
 8009cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cfe:	2b1f      	cmp	r3, #31
 8009d00:	d9c5      	bls.n	8009c8e <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8009d02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d04:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d06:	9206      	str	r2, [sp, #24]
 8009d08:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009d0a:	9205      	str	r2, [sp, #20]
 8009d0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d0e:	9204      	str	r2, [sp, #16]
 8009d10:	9303      	str	r3, [sp, #12]
 8009d12:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d1a:	9301      	str	r3, [sp, #4]
 8009d1c:	f107 0310 	add.w	r3, r7, #16
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	687a      	ldr	r2, [r7, #4]
 8009d26:	68b9      	ldr	r1, [r7, #8]
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f7ff fe53 	bl	80099d4 <_ntoa_format>
 8009d2e:	4603      	mov	r3, r0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	373c      	adds	r7, #60	; 0x3c
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd90      	pop	{r4, r7, pc}

08009d38 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009d38:	b590      	push	{r4, r7, lr}
 8009d3a:	b09d      	sub	sp, #116	; 0x74
 8009d3c:	af04      	add	r7, sp, #16
 8009d3e:	6178      	str	r0, [r7, #20]
 8009d40:	6139      	str	r1, [r7, #16]
 8009d42:	60fa      	str	r2, [r7, #12]
 8009d44:	60bb      	str	r3, [r7, #8]
 8009d46:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8009d4e:	f04f 0300 	mov.w	r3, #0
 8009d52:	f04f 0400 	mov.w	r4, #0
 8009d56:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8009d5a:	ed97 6b00 	vldr	d6, [r7]
 8009d5e:	ed97 7b00 	vldr	d7, [r7]
 8009d62:	eeb4 6b47 	vcmp.f64	d6, d7
 8009d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d6a:	d00f      	beq.n	8009d8c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8009d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d6e:	9303      	str	r3, [sp, #12]
 8009d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d72:	9302      	str	r3, [sp, #8]
 8009d74:	2303      	movs	r3, #3
 8009d76:	9301      	str	r3, [sp, #4]
 8009d78:	4bb7      	ldr	r3, [pc, #732]	; (800a058 <_ftoa+0x320>)
 8009d7a:	9300      	str	r3, [sp, #0]
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	6939      	ldr	r1, [r7, #16]
 8009d82:	6978      	ldr	r0, [r7, #20]
 8009d84:	f7ff fdd6 	bl	8009934 <_out_rev>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	e21e      	b.n	800a1ca <_ftoa+0x492>
  if (value < -DBL_MAX)
 8009d8c:	ed97 7b00 	vldr	d7, [r7]
 8009d90:	ed9f 6ba7 	vldr	d6, [pc, #668]	; 800a030 <_ftoa+0x2f8>
 8009d94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d9c:	d50f      	bpl.n	8009dbe <_ftoa+0x86>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8009d9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009da0:	9303      	str	r3, [sp, #12]
 8009da2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009da4:	9302      	str	r3, [sp, #8]
 8009da6:	2304      	movs	r3, #4
 8009da8:	9301      	str	r3, [sp, #4]
 8009daa:	4bac      	ldr	r3, [pc, #688]	; (800a05c <_ftoa+0x324>)
 8009dac:	9300      	str	r3, [sp, #0]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	6939      	ldr	r1, [r7, #16]
 8009db4:	6978      	ldr	r0, [r7, #20]
 8009db6:	f7ff fdbd 	bl	8009934 <_out_rev>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	e205      	b.n	800a1ca <_ftoa+0x492>
  if (value > DBL_MAX)
 8009dbe:	ed97 7b00 	vldr	d7, [r7]
 8009dc2:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800a038 <_ftoa+0x300>
 8009dc6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dce:	dd1d      	ble.n	8009e0c <_ftoa+0xd4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8009dd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dd2:	f003 0304 	and.w	r3, r3, #4
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d001      	beq.n	8009dde <_ftoa+0xa6>
 8009dda:	4ba1      	ldr	r3, [pc, #644]	; (800a060 <_ftoa+0x328>)
 8009ddc:	e000      	b.n	8009de0 <_ftoa+0xa8>
 8009dde:	4ba1      	ldr	r3, [pc, #644]	; (800a064 <_ftoa+0x32c>)
 8009de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009de2:	f002 0204 	and.w	r2, r2, #4
 8009de6:	2a00      	cmp	r2, #0
 8009de8:	d001      	beq.n	8009dee <_ftoa+0xb6>
 8009dea:	2204      	movs	r2, #4
 8009dec:	e000      	b.n	8009df0 <_ftoa+0xb8>
 8009dee:	2203      	movs	r2, #3
 8009df0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009df2:	9103      	str	r1, [sp, #12]
 8009df4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009df6:	9102      	str	r1, [sp, #8]
 8009df8:	9201      	str	r2, [sp, #4]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	6939      	ldr	r1, [r7, #16]
 8009e02:	6978      	ldr	r0, [r7, #20]
 8009e04:	f7ff fd96 	bl	8009934 <_out_rev>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	e1de      	b.n	800a1ca <_ftoa+0x492>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8009e0c:	ed97 7b00 	vldr	d7, [r7]
 8009e10:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 800a040 <_ftoa+0x308>
 8009e14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1c:	dc08      	bgt.n	8009e30 <_ftoa+0xf8>
 8009e1e:	ed97 7b00 	vldr	d7, [r7]
 8009e22:	ed9f 6b89 	vldr	d6, [pc, #548]	; 800a048 <_ftoa+0x310>
 8009e26:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e2e:	d50f      	bpl.n	8009e50 <_ftoa+0x118>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8009e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e32:	9302      	str	r3, [sp, #8]
 8009e34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009e36:	9301      	str	r3, [sp, #4]
 8009e38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e3a:	9300      	str	r3, [sp, #0]
 8009e3c:	ed97 0b00 	vldr	d0, [r7]
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	6939      	ldr	r1, [r7, #16]
 8009e46:	6978      	ldr	r0, [r7, #20]
 8009e48:	f000 f9c6 	bl	800a1d8 <_etoa>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	e1bc      	b.n	800a1ca <_ftoa+0x492>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8009e50:	2300      	movs	r3, #0
 8009e52:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8009e56:	ed97 7b00 	vldr	d7, [r7]
 8009e5a:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	d50a      	bpl.n	8009e7a <_ftoa+0x142>
    negative = true;
 8009e64:	2301      	movs	r3, #1
 8009e66:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8009e6a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800a050 <_ftoa+0x318>
 8009e6e:	ed97 7b00 	vldr	d7, [r7]
 8009e72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009e76:	ed87 7b00 	vstr	d7, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8009e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d10e      	bne.n	8009ea2 <_ftoa+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8009e84:	2306      	movs	r3, #6
 8009e86:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8009e88:	e00b      	b.n	8009ea2 <_ftoa+0x16a>
    buf[len++] = '0';
 8009e8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009e8c:	1c5a      	adds	r2, r3, #1
 8009e8e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009e90:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8009e94:	4413      	add	r3, r2
 8009e96:	2230      	movs	r2, #48	; 0x30
 8009e98:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8009e9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8009ea2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ea4:	2b1f      	cmp	r3, #31
 8009ea6:	d802      	bhi.n	8009eae <_ftoa+0x176>
 8009ea8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eaa:	2b09      	cmp	r3, #9
 8009eac:	d8ed      	bhi.n	8009e8a <_ftoa+0x152>
  }

  int whole = (int)value;
 8009eae:	ed97 7b00 	vldr	d7, [r7]
 8009eb2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8009eb6:	ee17 3a90 	vmov	r3, s15
 8009eba:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8009ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ebe:	ee07 3a90 	vmov	s15, r3
 8009ec2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ec6:	ed97 6b00 	vldr	d6, [r7]
 8009eca:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ece:	4a66      	ldr	r2, [pc, #408]	; (800a068 <_ftoa+0x330>)
 8009ed0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ed2:	00db      	lsls	r3, r3, #3
 8009ed4:	4413      	add	r3, r2
 8009ed6:	ed93 7b00 	vldr	d7, [r3]
 8009eda:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009ede:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8009ee2:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8009ee6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8009eea:	ee17 3a90 	vmov	r3, s15
 8009eee:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8009ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ef2:	ee07 3a90 	vmov	s15, r3
 8009ef6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009efa:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8009efe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009f02:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8009f06:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009f0a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009f0e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f16:	dd18      	ble.n	8009f4a <_ftoa+0x212>
    ++frac;
 8009f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8009f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f20:	ee07 3a90 	vmov	s15, r3
 8009f24:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8009f28:	4a4f      	ldr	r2, [pc, #316]	; (800a068 <_ftoa+0x330>)
 8009f2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f2c:	00db      	lsls	r3, r3, #3
 8009f2e:	4413      	add	r3, r2
 8009f30:	ed93 7b00 	vldr	d7, [r3]
 8009f34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3c:	db19      	blt.n	8009f72 <_ftoa+0x23a>
      frac = 0;
 8009f3e:	2300      	movs	r3, #0
 8009f40:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8009f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f44:	3301      	adds	r3, #1
 8009f46:	657b      	str	r3, [r7, #84]	; 0x54
 8009f48:	e013      	b.n	8009f72 <_ftoa+0x23a>
    }
  }
  else if (diff < 0.5) {
 8009f4a:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009f4e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009f52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f5a:	d40a      	bmi.n	8009f72 <_ftoa+0x23a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8009f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <_ftoa+0x234>
 8009f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f64:	f003 0301 	and.w	r3, r3, #1
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <_ftoa+0x23a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8009f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f6e:	3301      	adds	r3, #1
 8009f70:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8009f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d12e      	bne.n	8009fd6 <_ftoa+0x29e>
    diff = value - (double)whole;
 8009f78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009f7a:	ee07 3a90 	vmov	s15, r3
 8009f7e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009f82:	ed97 6b00 	vldr	d6, [r7]
 8009f86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009f8a:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8009f8e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009f92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009f96:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9e:	bf4c      	ite	mi
 8009fa0:	2301      	movmi	r3, #1
 8009fa2:	2300      	movpl	r3, #0
 8009fa4:	b2db      	uxtb	r3, r3
 8009fa6:	f083 0301 	eor.w	r3, r3, #1
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d108      	bne.n	8009fc2 <_ftoa+0x28a>
 8009fb0:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8009fb4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009fb8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fc0:	dd73      	ble.n	800a0aa <_ftoa+0x372>
 8009fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	f000 8091 	beq.w	800a0f0 <_ftoa+0x3b8>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8009fce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009fd0:	3301      	adds	r3, #1
 8009fd2:	657b      	str	r3, [r7, #84]	; 0x54
 8009fd4:	e08c      	b.n	800a0f0 <_ftoa+0x3b8>
    }
  }
  else {
    unsigned int count = prec;
 8009fd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009fda:	e020      	b.n	800a01e <_ftoa+0x2e6>
      --count;
 8009fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 8009fe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009fe4:	4b21      	ldr	r3, [pc, #132]	; (800a06c <_ftoa+0x334>)
 8009fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8009fea:	08da      	lsrs	r2, r3, #3
 8009fec:	4613      	mov	r3, r2
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	005b      	lsls	r3, r3, #1
 8009ff4:	1aca      	subs	r2, r1, r3
 8009ff6:	b2d2      	uxtb	r2, r2
 8009ff8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ffa:	1c59      	adds	r1, r3, #1
 8009ffc:	65f9      	str	r1, [r7, #92]	; 0x5c
 8009ffe:	3230      	adds	r2, #48	; 0x30
 800a000:	b2d2      	uxtb	r2, r2
 800a002:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a006:	440b      	add	r3, r1
 800a008:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800a00c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a00e:	4a17      	ldr	r2, [pc, #92]	; (800a06c <_ftoa+0x334>)
 800a010:	fba2 2303 	umull	r2, r3, r2, r3
 800a014:	08db      	lsrs	r3, r3, #3
 800a016:	653b      	str	r3, [r7, #80]	; 0x50
 800a018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d003      	beq.n	800a026 <_ftoa+0x2ee>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a01e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a020:	2b1f      	cmp	r3, #31
 800a022:	d9db      	bls.n	8009fdc <_ftoa+0x2a4>
 800a024:	e02d      	b.n	800a082 <_ftoa+0x34a>
        break;
 800a026:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800a028:	e02b      	b.n	800a082 <_ftoa+0x34a>
 800a02a:	bf00      	nop
 800a02c:	f3af 8000 	nop.w
 800a030:	ffffffff 	.word	0xffffffff
 800a034:	ffefffff 	.word	0xffefffff
 800a038:	ffffffff 	.word	0xffffffff
 800a03c:	7fefffff 	.word	0x7fefffff
 800a040:	00000000 	.word	0x00000000
 800a044:	41cdcd65 	.word	0x41cdcd65
 800a048:	00000000 	.word	0x00000000
 800a04c:	c1cdcd65 	.word	0xc1cdcd65
	...
 800a058:	08013364 	.word	0x08013364
 800a05c:	08013368 	.word	0x08013368
 800a060:	08013370 	.word	0x08013370
 800a064:	08013378 	.word	0x08013378
 800a068:	08013388 	.word	0x08013388
 800a06c:	cccccccd 	.word	0xcccccccd
      buf[len++] = '0';
 800a070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a072:	1c5a      	adds	r2, r3, #1
 800a074:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a076:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a07a:	4413      	add	r3, r2
 800a07c:	2230      	movs	r2, #48	; 0x30
 800a07e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800a082:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a084:	2b1f      	cmp	r3, #31
 800a086:	d804      	bhi.n	800a092 <_ftoa+0x35a>
 800a088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08a:	1e5a      	subs	r2, r3, #1
 800a08c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d1ee      	bne.n	800a070 <_ftoa+0x338>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a094:	2b1f      	cmp	r3, #31
 800a096:	d82b      	bhi.n	800a0f0 <_ftoa+0x3b8>
      // add decimal
      buf[len++] = '.';
 800a098:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a09e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a0a2:	4413      	add	r3, r2
 800a0a4:	222e      	movs	r2, #46	; 0x2e
 800a0a6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a0aa:	e021      	b.n	800a0f0 <_ftoa+0x3b8>
    buf[len++] = (char)(48 + (whole % 10));
 800a0ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a0ae:	4b49      	ldr	r3, [pc, #292]	; (800a1d4 <_ftoa+0x49c>)
 800a0b0:	fb83 1302 	smull	r1, r3, r3, r2
 800a0b4:	1099      	asrs	r1, r3, #2
 800a0b6:	17d3      	asrs	r3, r2, #31
 800a0b8:	1ac9      	subs	r1, r1, r3
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	005b      	lsls	r3, r3, #1
 800a0c2:	1ad1      	subs	r1, r2, r3
 800a0c4:	b2ca      	uxtb	r2, r1
 800a0c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0c8:	1c59      	adds	r1, r3, #1
 800a0ca:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a0cc:	3230      	adds	r2, #48	; 0x30
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800a0d4:	440b      	add	r3, r1
 800a0d6:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800a0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0dc:	4a3d      	ldr	r2, [pc, #244]	; (800a1d4 <_ftoa+0x49c>)
 800a0de:	fb82 1203 	smull	r1, r2, r2, r3
 800a0e2:	1092      	asrs	r2, r2, #2
 800a0e4:	17db      	asrs	r3, r3, #31
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	657b      	str	r3, [r7, #84]	; 0x54
 800a0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <_ftoa+0x3c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a0f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0f2:	2b1f      	cmp	r3, #31
 800a0f4:	d9da      	bls.n	800a0ac <_ftoa+0x374>
 800a0f6:	e000      	b.n	800a0fa <_ftoa+0x3c2>
      break;
 800a0f8:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800a0fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0fc:	f003 0302 	and.w	r3, r3, #2
 800a100:	2b00      	cmp	r3, #0
 800a102:	d124      	bne.n	800a14e <_ftoa+0x416>
 800a104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a106:	f003 0301 	and.w	r3, r3, #1
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d01f      	beq.n	800a14e <_ftoa+0x416>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800a10e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a110:	2b00      	cmp	r3, #0
 800a112:	d015      	beq.n	800a140 <_ftoa+0x408>
 800a114:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d104      	bne.n	800a126 <_ftoa+0x3ee>
 800a11c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a11e:	f003 030c 	and.w	r3, r3, #12
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00c      	beq.n	800a140 <_ftoa+0x408>
      width--;
 800a126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a128:	3b01      	subs	r3, #1
 800a12a:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800a12c:	e008      	b.n	800a140 <_ftoa+0x408>
      buf[len++] = '0';
 800a12e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a134:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a138:	4413      	add	r3, r2
 800a13a:	2230      	movs	r2, #48	; 0x30
 800a13c:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800a140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a142:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a144:	429a      	cmp	r2, r3
 800a146:	d202      	bcs.n	800a14e <_ftoa+0x416>
 800a148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a14a:	2b1f      	cmp	r3, #31
 800a14c:	d9ef      	bls.n	800a12e <_ftoa+0x3f6>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a14e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a150:	2b1f      	cmp	r3, #31
 800a152:	d82a      	bhi.n	800a1aa <_ftoa+0x472>
    if (negative) {
 800a154:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <_ftoa+0x438>
      buf[len++] = '-';
 800a15c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a15e:	1c5a      	adds	r2, r3, #1
 800a160:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a162:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a166:	4413      	add	r3, r2
 800a168:	222d      	movs	r2, #45	; 0x2d
 800a16a:	f803 2c48 	strb.w	r2, [r3, #-72]
 800a16e:	e01c      	b.n	800a1aa <_ftoa+0x472>
    }
    else if (flags & FLAGS_PLUS) {
 800a170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a172:	f003 0304 	and.w	r3, r3, #4
 800a176:	2b00      	cmp	r3, #0
 800a178:	d009      	beq.n	800a18e <_ftoa+0x456>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800a17a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a17c:	1c5a      	adds	r2, r3, #1
 800a17e:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a180:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a184:	4413      	add	r3, r2
 800a186:	222b      	movs	r2, #43	; 0x2b
 800a188:	f803 2c48 	strb.w	r2, [r3, #-72]
 800a18c:	e00d      	b.n	800a1aa <_ftoa+0x472>
    }
    else if (flags & FLAGS_SPACE) {
 800a18e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b00      	cmp	r3, #0
 800a196:	d008      	beq.n	800a1aa <_ftoa+0x472>
      buf[len++] = ' ';
 800a198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a19a:	1c5a      	adds	r2, r3, #1
 800a19c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a19e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800a1a2:	4413      	add	r3, r2
 800a1a4:	2220      	movs	r2, #32
 800a1a6:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800a1aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ac:	9303      	str	r3, [sp, #12]
 800a1ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a1b0:	9302      	str	r3, [sp, #8]
 800a1b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1b4:	9301      	str	r3, [sp, #4]
 800a1b6:	f107 0318 	add.w	r3, r7, #24
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	68fa      	ldr	r2, [r7, #12]
 800a1c0:	6939      	ldr	r1, [r7, #16]
 800a1c2:	6978      	ldr	r0, [r7, #20]
 800a1c4:	f7ff fbb6 	bl	8009934 <_out_rev>
 800a1c8:	4603      	mov	r3, r0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3764      	adds	r7, #100	; 0x64
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd90      	pop	{r4, r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	66666667 	.word	0x66666667

0800a1d8 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a1d8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a1dc:	b09a      	sub	sp, #104	; 0x68
 800a1de:	af06      	add	r7, sp, #24
 800a1e0:	6178      	str	r0, [r7, #20]
 800a1e2:	6139      	str	r1, [r7, #16]
 800a1e4:	60fa      	str	r2, [r7, #12]
 800a1e6:	60bb      	str	r3, [r7, #8]
 800a1e8:	ed87 0b00 	vstr	d0, [r7]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800a1ec:	ed97 6b00 	vldr	d6, [r7]
 800a1f0:	ed97 7b00 	vldr	d7, [r7]
 800a1f4:	eeb4 6b47 	vcmp.f64	d6, d7
 800a1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1fc:	d111      	bne.n	800a222 <_etoa+0x4a>
 800a1fe:	ed97 7b00 	vldr	d7, [r7]
 800a202:	ed9f 6bc5 	vldr	d6, [pc, #788]	; 800a518 <_etoa+0x340>
 800a206:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a20a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20e:	dc08      	bgt.n	800a222 <_etoa+0x4a>
 800a210:	ed97 7b00 	vldr	d7, [r7]
 800a214:	ed9f 6bc2 	vldr	d6, [pc, #776]	; 800a520 <_etoa+0x348>
 800a218:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a220:	d50f      	bpl.n	800a242 <_etoa+0x6a>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800a222:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a224:	9302      	str	r3, [sp, #8]
 800a226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a228:	9301      	str	r3, [sp, #4]
 800a22a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a22c:	9300      	str	r3, [sp, #0]
 800a22e:	ed97 0b00 	vldr	d0, [r7]
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	6939      	ldr	r1, [r7, #16]
 800a238:	6978      	ldr	r0, [r7, #20]
 800a23a:	f7ff fd7d 	bl	8009d38 <_ftoa>
 800a23e:	4603      	mov	r3, r0
 800a240:	e1cd      	b.n	800a5de <_etoa+0x406>
  }

  // determine the sign
  const bool negative = value < 0;
 800a242:	ed97 7b00 	vldr	d7, [r7]
 800a246:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a24a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a24e:	bf4c      	ite	mi
 800a250:	2301      	movmi	r3, #1
 800a252:	2300      	movpl	r3, #0
 800a254:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (negative) {
 800a258:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <_etoa+0x94>
    value = -value;
 800a260:	ed97 7b00 	vldr	d7, [r7]
 800a264:	eeb1 7b47 	vneg.f64	d7, d7
 800a268:	ed87 7b00 	vstr	d7, [r7]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800a26c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a26e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a272:	2b00      	cmp	r3, #0
 800a274:	d101      	bne.n	800a27a <_etoa+0xa2>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800a276:	2306      	movs	r3, #6
 800a278:	663b      	str	r3, [r7, #96]	; 0x60
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800a27a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800a27e:	e9c7 3406 	strd	r3, r4, [r7, #24]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800a282:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a286:	f04f 0300 	mov.w	r3, #0
 800a28a:	f04f 0400 	mov.w	r4, #0
 800a28e:	0d13      	lsrs	r3, r2, #20
 800a290:	2400      	movs	r4, #0
 800a292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a296:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a29a:	63fb      	str	r3, [r7, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800a29c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800a2a0:	f04f 31ff 	mov.w	r1, #4294967295
 800a2a4:	4ab0      	ldr	r2, [pc, #704]	; (800a568 <_etoa+0x390>)
 800a2a6:	ea03 0b01 	and.w	fp, r3, r1
 800a2aa:	ea04 0c02 	and.w	ip, r4, r2
 800a2ae:	f04f 0100 	mov.w	r1, #0
 800a2b2:	4aae      	ldr	r2, [pc, #696]	; (800a56c <_etoa+0x394>)
 800a2b4:	ea4b 0301 	orr.w	r3, fp, r1
 800a2b8:	ea4c 0402 	orr.w	r4, ip, r2
 800a2bc:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800a2c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2c2:	ee07 3a90 	vmov	s15, r3
 800a2c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a2ca:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a528 <_etoa+0x350>
 800a2ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a2d2:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a530 <_etoa+0x358>
 800a2d6:	ee37 6b06 	vadd.f64	d6, d7, d6
 800a2da:	ed97 7b06 	vldr	d7, [r7, #24]
 800a2de:	eeb7 5b08 	vmov.f64	d5, #120	; 0x3fc00000  1.5
 800a2e2:	ee37 7b45 	vsub.f64	d7, d7, d5
 800a2e6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800a538 <_etoa+0x360>
 800a2ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a2ee:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a2f2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a2f6:	ee17 3a90 	vmov	r3, s15
 800a2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800a2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2fe:	ee07 3a90 	vmov	s15, r3
 800a302:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a306:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800a540 <_etoa+0x368>
 800a30a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a30e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a312:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a316:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800a31a:	ee17 3a90 	vmov	r3, s15
 800a31e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800a320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a322:	ee07 3a90 	vmov	s15, r3
 800a326:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a32a:	ed9f 6b87 	vldr	d6, [pc, #540]	; 800a548 <_etoa+0x370>
 800a32e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a334:	ee07 3a90 	vmov	s15, r3
 800a338:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a33c:	ed9f 5b84 	vldr	d5, [pc, #528]	; 800a550 <_etoa+0x378>
 800a340:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a344:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a348:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
  const double z2 = z * z;
 800a34c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
 800a350:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800a354:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a358:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800a35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a35e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a362:	4619      	mov	r1, r3
 800a364:	ea4f 72e1 	mov.w	r2, r1, asr #31
 800a368:	f04f 0300 	mov.w	r3, #0
 800a36c:	f04f 0400 	mov.w	r4, #0
 800a370:	050c      	lsls	r4, r1, #20
 800a372:	2300      	movs	r3, #0
 800a374:	e9c7 3406 	strd	r3, r4, [r7, #24]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800a378:	ed97 6b06 	vldr	d6, [r7, #24]
 800a37c:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800a380:	ee37 4b07 	vadd.f64	d4, d7, d7
 800a384:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a388:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 800a38c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a390:	ed97 3b0a 	vldr	d3, [r7, #40]	; 0x28
 800a394:	eeb2 2b0c 	vmov.f64	d2, #44	; 0x41600000  14.0
 800a398:	ee83 7b02 	vdiv.f64	d7, d3, d2
 800a39c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a3a0:	ee37 3b03 	vadd.f64	d3, d7, d3
 800a3a4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800a3a8:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800a3ac:	eeb1 3b08 	vmov.f64	d3, #24	; 0x40c00000  6.0
 800a3b0:	ee37 3b03 	vadd.f64	d3, d7, d3
 800a3b4:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 800a3b8:	ee82 7b03 	vdiv.f64	d7, d2, d3
 800a3bc:	ee35 5b07 	vadd.f64	d5, d5, d7
 800a3c0:	ee84 7b05 	vdiv.f64	d7, d4, d5
 800a3c4:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800a3c8:	ee37 7b05 	vadd.f64	d7, d7, d5
 800a3cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a3d0:	ed87 7b06 	vstr	d7, [r7, #24]
  // correct for rounding errors
  if (value < conv.F) {
 800a3d4:	ed97 7b06 	vldr	d7, [r7, #24]
 800a3d8:	ed97 6b00 	vldr	d6, [r7]
 800a3dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a3e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3e4:	d50a      	bpl.n	800a3fc <_etoa+0x224>
    expval--;
 800a3e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3e8:	3b01      	subs	r3, #1
 800a3ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    conv.F /= 10;
 800a3ec:	ed97 6b06 	vldr	d6, [r7, #24]
 800a3f0:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800a3f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a3f8:	ed87 7b06 	vstr	d7, [r7, #24]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800a3fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fe:	2b63      	cmp	r3, #99	; 0x63
 800a400:	dc05      	bgt.n	800a40e <_etoa+0x236>
 800a402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a404:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800a408:	db01      	blt.n	800a40e <_etoa+0x236>
 800a40a:	2304      	movs	r3, #4
 800a40c:	e000      	b.n	800a410 <_etoa+0x238>
 800a40e:	2305      	movs	r3, #5
 800a410:	64bb      	str	r3, [r7, #72]	; 0x48

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800a412:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d031      	beq.n	800a480 <_etoa+0x2a8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800a41c:	ed97 7b00 	vldr	d7, [r7]
 800a420:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 800a558 <_etoa+0x380>
 800a424:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42c:	db1d      	blt.n	800a46a <_etoa+0x292>
 800a42e:	ed97 7b00 	vldr	d7, [r7]
 800a432:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800a560 <_etoa+0x388>
 800a436:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43e:	d514      	bpl.n	800a46a <_etoa+0x292>
      if ((int)prec > expval) {
 800a440:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a442:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a444:	429a      	cmp	r2, r3
 800a446:	da05      	bge.n	800a454 <_etoa+0x27c>
        prec = (unsigned)((int)prec - expval - 1);
 800a448:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44c:	1ad3      	subs	r3, r2, r3
 800a44e:	3b01      	subs	r3, #1
 800a450:	663b      	str	r3, [r7, #96]	; 0x60
 800a452:	e001      	b.n	800a458 <_etoa+0x280>
      }
      else {
        prec = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	663b      	str	r3, [r7, #96]	; 0x60
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800a458:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a45a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a45e:	66bb      	str	r3, [r7, #104]	; 0x68
      // no characters in exponent
      minwidth = 0U;
 800a460:	2300      	movs	r3, #0
 800a462:	64bb      	str	r3, [r7, #72]	; 0x48
      expval   = 0;
 800a464:	2300      	movs	r3, #0
 800a466:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a468:	e00a      	b.n	800a480 <_etoa+0x2a8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800a46a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d007      	beq.n	800a480 <_etoa+0x2a8>
 800a470:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <_etoa+0x2a8>
        --prec;
 800a47a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a47c:	3b01      	subs	r3, #1
 800a47e:	663b      	str	r3, [r7, #96]	; 0x60
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800a480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a482:	647b      	str	r3, [r7, #68]	; 0x44
  if (width > minwidth) {
 800a484:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a488:	429a      	cmp	r2, r3
 800a48a:	d904      	bls.n	800a496 <_etoa+0x2be>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800a48c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a48e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	647b      	str	r3, [r7, #68]	; 0x44
 800a494:	e001      	b.n	800a49a <_etoa+0x2c2>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800a496:	2300      	movs	r3, #0
 800a498:	647b      	str	r3, [r7, #68]	; 0x44
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800a49a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d004      	beq.n	800a4ae <_etoa+0x2d6>
 800a4a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d001      	beq.n	800a4ae <_etoa+0x2d6>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // rescale the float value
  if (expval) {
 800a4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d007      	beq.n	800a4c4 <_etoa+0x2ec>
    value /= conv.F;
 800a4b4:	ed97 6b06 	vldr	d6, [r7, #24]
 800a4b8:	ed97 5b00 	vldr	d5, [r7]
 800a4bc:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800a4c0:	ed87 7b00 	vstr	d7, [r7]
  }

  // output the floating part
  const size_t start_idx = idx;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	627b      	str	r3, [r7, #36]	; 0x24
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800a4c8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d004      	beq.n	800a4da <_etoa+0x302>
 800a4d0:	ed97 7b00 	vldr	d7, [r7]
 800a4d4:	eeb1 7b47 	vneg.f64	d7, d7
 800a4d8:	e001      	b.n	800a4de <_etoa+0x306>
 800a4da:	ed97 7b00 	vldr	d7, [r7]
 800a4de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a4e4:	9302      	str	r3, [sp, #8]
 800a4e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	eeb0 0b47 	vmov.f64	d0, d7
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	6939      	ldr	r1, [r7, #16]
 800a4f8:	6978      	ldr	r0, [r7, #20]
 800a4fa:	f7ff fc1d 	bl	8009d38 <_ftoa>
 800a4fe:	60f8      	str	r0, [r7, #12]

  // output the exponent part
  if (minwidth) {
 800a500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a502:	2b00      	cmp	r3, #0
 800a504:	d06a      	beq.n	800a5dc <_etoa+0x404>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800a506:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d02f      	beq.n	800a570 <_etoa+0x398>
 800a510:	2045      	movs	r0, #69	; 0x45
 800a512:	e02e      	b.n	800a572 <_etoa+0x39a>
 800a514:	f3af 8000 	nop.w
 800a518:	ffffffff 	.word	0xffffffff
 800a51c:	7fefffff 	.word	0x7fefffff
 800a520:	ffffffff 	.word	0xffffffff
 800a524:	ffefffff 	.word	0xffefffff
 800a528:	509f79fb 	.word	0x509f79fb
 800a52c:	3fd34413 	.word	0x3fd34413
 800a530:	8b60c8b3 	.word	0x8b60c8b3
 800a534:	3fc68a28 	.word	0x3fc68a28
 800a538:	636f4361 	.word	0x636f4361
 800a53c:	3fd287a7 	.word	0x3fd287a7
 800a540:	0979a371 	.word	0x0979a371
 800a544:	400a934f 	.word	0x400a934f
 800a548:	bbb55516 	.word	0xbbb55516
 800a54c:	40026bb1 	.word	0x40026bb1
 800a550:	fefa39ef 	.word	0xfefa39ef
 800a554:	3fe62e42 	.word	0x3fe62e42
 800a558:	eb1c432d 	.word	0xeb1c432d
 800a55c:	3f1a36e2 	.word	0x3f1a36e2
 800a560:	00000000 	.word	0x00000000
 800a564:	412e8480 	.word	0x412e8480
 800a568:	000fffff 	.word	0x000fffff
 800a56c:	3ff00000 	.word	0x3ff00000
 800a570:	2065      	movs	r0, #101	; 0x65
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	1c53      	adds	r3, r2, #1
 800a576:	60fb      	str	r3, [r7, #12]
 800a578:	697c      	ldr	r4, [r7, #20]
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	6939      	ldr	r1, [r7, #16]
 800a57e:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800a580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a582:	2b00      	cmp	r3, #0
 800a584:	bfb8      	it	lt
 800a586:	425b      	neglt	r3, r3
 800a588:	4618      	mov	r0, r3
 800a58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58c:	0fdb      	lsrs	r3, r3, #31
 800a58e:	b2db      	uxtb	r3, r3
 800a590:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a592:	3a01      	subs	r2, #1
 800a594:	2105      	movs	r1, #5
 800a596:	9105      	str	r1, [sp, #20]
 800a598:	9204      	str	r2, [sp, #16]
 800a59a:	2200      	movs	r2, #0
 800a59c:	9203      	str	r2, [sp, #12]
 800a59e:	220a      	movs	r2, #10
 800a5a0:	9202      	str	r2, [sp, #8]
 800a5a2:	9301      	str	r3, [sp, #4]
 800a5a4:	9000      	str	r0, [sp, #0]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	6939      	ldr	r1, [r7, #16]
 800a5ac:	6978      	ldr	r0, [r7, #20]
 800a5ae:	f7ff faed 	bl	8009b8c <_ntoa_long>
 800a5b2:	60f8      	str	r0, [r7, #12]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800a5b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a5b6:	f003 0302 	and.w	r3, r3, #2
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00e      	beq.n	800a5dc <_etoa+0x404>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800a5be:	e007      	b.n	800a5d0 <_etoa+0x3f8>
 800a5c0:	68fa      	ldr	r2, [r7, #12]
 800a5c2:	1c53      	adds	r3, r2, #1
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	697c      	ldr	r4, [r7, #20]
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	6939      	ldr	r1, [r7, #16]
 800a5cc:	2020      	movs	r0, #32
 800a5ce:	47a0      	blx	r4
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5d4:	1ad3      	subs	r3, r2, r3
 800a5d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a5d8:	429a      	cmp	r2, r3
 800a5da:	d8f1      	bhi.n	800a5c0 <_etoa+0x3e8>
    }
  }
  return idx;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3750      	adds	r7, #80	; 0x50
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a5e8 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800a5e8:	b5b0      	push	{r4, r5, r7, lr}
 800a5ea:	b0a0      	sub	sp, #128	; 0x80
 800a5ec:	af0a      	add	r7, sp, #40	; 0x28
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	f040 848e 	bne.w	800af1e <_vsnprintf+0x936>
    // use null output function
    out = _out_null;
 800a602:	4ba0      	ldr	r3, [pc, #640]	; (800a884 <_vsnprintf+0x29c>)
 800a604:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800a606:	f000 bc8a 	b.w	800af1e <_vsnprintf+0x936>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	781b      	ldrb	r3, [r3, #0]
 800a60e:	2b25      	cmp	r3, #37	; 0x25
 800a610:	d00d      	beq.n	800a62e <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	7818      	ldrb	r0, [r3, #0]
 800a616:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a618:	1c53      	adds	r3, r2, #1
 800a61a:	647b      	str	r3, [r7, #68]	; 0x44
 800a61c:	68fc      	ldr	r4, [r7, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	68b9      	ldr	r1, [r7, #8]
 800a622:	47a0      	blx	r4
      format++;
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	3301      	adds	r3, #1
 800a628:	603b      	str	r3, [r7, #0]
      continue;
 800a62a:	f000 bc78 	b.w	800af1e <_vsnprintf+0x936>
    }
    else {
      // yes, evaluate it
      format++;
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	3301      	adds	r3, #1
 800a632:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	3b20      	subs	r3, #32
 800a63e:	2b10      	cmp	r3, #16
 800a640:	d856      	bhi.n	800a6f0 <_vsnprintf+0x108>
 800a642:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <_vsnprintf+0x60>)
 800a644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a648:	0800a6c9 	.word	0x0800a6c9
 800a64c:	0800a6f1 	.word	0x0800a6f1
 800a650:	0800a6f1 	.word	0x0800a6f1
 800a654:	0800a6dd 	.word	0x0800a6dd
 800a658:	0800a6f1 	.word	0x0800a6f1
 800a65c:	0800a6f1 	.word	0x0800a6f1
 800a660:	0800a6f1 	.word	0x0800a6f1
 800a664:	0800a6f1 	.word	0x0800a6f1
 800a668:	0800a6f1 	.word	0x0800a6f1
 800a66c:	0800a6f1 	.word	0x0800a6f1
 800a670:	0800a6f1 	.word	0x0800a6f1
 800a674:	0800a6b5 	.word	0x0800a6b5
 800a678:	0800a6f1 	.word	0x0800a6f1
 800a67c:	0800a6a1 	.word	0x0800a6a1
 800a680:	0800a6f1 	.word	0x0800a6f1
 800a684:	0800a6f1 	.word	0x0800a6f1
 800a688:	0800a68d 	.word	0x0800a68d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800a68c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68e:	f043 0301 	orr.w	r3, r3, #1
 800a692:	657b      	str	r3, [r7, #84]	; 0x54
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	3301      	adds	r3, #1
 800a698:	603b      	str	r3, [r7, #0]
 800a69a:	2301      	movs	r3, #1
 800a69c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a69e:	e02a      	b.n	800a6f6 <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800a6a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6a2:	f043 0302 	orr.w	r3, r3, #2
 800a6a6:	657b      	str	r3, [r7, #84]	; 0x54
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	603b      	str	r3, [r7, #0]
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6b2:	e020      	b.n	800a6f6 <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800a6b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6b6:	f043 0304 	orr.w	r3, r3, #4
 800a6ba:	657b      	str	r3, [r7, #84]	; 0x54
 800a6bc:	683b      	ldr	r3, [r7, #0]
 800a6be:	3301      	adds	r3, #1
 800a6c0:	603b      	str	r3, [r7, #0]
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6c6:	e016      	b.n	800a6f6 <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800a6c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ca:	f043 0308 	orr.w	r3, r3, #8
 800a6ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	603b      	str	r3, [r7, #0]
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6da:	e00c      	b.n	800a6f6 <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800a6dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6de:	f043 0310 	orr.w	r3, r3, #16
 800a6e2:	657b      	str	r3, [r7, #84]	; 0x54
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	3301      	adds	r3, #1
 800a6e8:	603b      	str	r3, [r7, #0]
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6ee:	e002      	b.n	800a6f6 <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a6f4:	bf00      	nop
      }
    } while (n);
 800a6f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d19d      	bne.n	800a638 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	4618      	mov	r0, r3
 800a706:	f7ff f8da 	bl	80098be <_is_digit>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <_vsnprintf+0x134>
      width = _atoi(&format);
 800a710:	463b      	mov	r3, r7
 800a712:	4618      	mov	r0, r3
 800a714:	f7ff f8ea 	bl	80098ec <_atoi>
 800a718:	6538      	str	r0, [r7, #80]	; 0x50
 800a71a:	e018      	b.n	800a74e <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	781b      	ldrb	r3, [r3, #0]
 800a720:	2b2a      	cmp	r3, #42	; 0x2a
 800a722:	d114      	bne.n	800a74e <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800a724:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a726:	1d1a      	adds	r2, r3, #4
 800a728:	66ba      	str	r2, [r7, #104]	; 0x68
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	2b00      	cmp	r3, #0
 800a732:	da07      	bge.n	800a744 <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800a734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a736:	f043 0302 	orr.w	r3, r3, #2
 800a73a:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800a73c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73e:	425b      	negs	r3, r3
 800a740:	653b      	str	r3, [r7, #80]	; 0x50
 800a742:	e001      	b.n	800a748 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800a744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a746:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	3301      	adds	r3, #1
 800a74c:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	781b      	ldrb	r3, [r3, #0]
 800a756:	2b2e      	cmp	r3, #46	; 0x2e
 800a758:	d124      	bne.n	800a7a4 <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 800a75a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a75c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a760:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	3301      	adds	r3, #1
 800a766:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f7ff f8a6 	bl	80098be <_is_digit>
 800a772:	4603      	mov	r3, r0
 800a774:	2b00      	cmp	r3, #0
 800a776:	d005      	beq.n	800a784 <_vsnprintf+0x19c>
        precision = _atoi(&format);
 800a778:	463b      	mov	r3, r7
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7ff f8b6 	bl	80098ec <_atoi>
 800a780:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a782:	e00f      	b.n	800a7a4 <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	2b2a      	cmp	r3, #42	; 0x2a
 800a78a:	d10b      	bne.n	800a7a4 <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 800a78c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a78e:	1d1a      	adds	r2, r3, #4
 800a790:	66ba      	str	r2, [r7, #104]	; 0x68
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800a796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a798:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a79c:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	3301      	adds	r3, #1
 800a7a2:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	3b68      	subs	r3, #104	; 0x68
 800a7aa:	2b12      	cmp	r3, #18
 800a7ac:	d866      	bhi.n	800a87c <_vsnprintf+0x294>
 800a7ae:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <_vsnprintf+0x1cc>)
 800a7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b4:	0800a827 	.word	0x0800a827
 800a7b8:	0800a87d 	.word	0x0800a87d
 800a7bc:	0800a85d 	.word	0x0800a85d
 800a7c0:	0800a87d 	.word	0x0800a87d
 800a7c4:	0800a801 	.word	0x0800a801
 800a7c8:	0800a87d 	.word	0x0800a87d
 800a7cc:	0800a87d 	.word	0x0800a87d
 800a7d0:	0800a87d 	.word	0x0800a87d
 800a7d4:	0800a87d 	.word	0x0800a87d
 800a7d8:	0800a87d 	.word	0x0800a87d
 800a7dc:	0800a87d 	.word	0x0800a87d
 800a7e0:	0800a87d 	.word	0x0800a87d
 800a7e4:	0800a84d 	.word	0x0800a84d
 800a7e8:	0800a87d 	.word	0x0800a87d
 800a7ec:	0800a87d 	.word	0x0800a87d
 800a7f0:	0800a87d 	.word	0x0800a87d
 800a7f4:	0800a87d 	.word	0x0800a87d
 800a7f8:	0800a87d 	.word	0x0800a87d
 800a7fc:	0800a86d 	.word	0x0800a86d
      case 'l' :
        flags |= FLAGS_LONG;
 800a800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a806:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b6c      	cmp	r3, #108	; 0x6c
 800a814:	d134      	bne.n	800a880 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800a816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a818:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a81c:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	3301      	adds	r3, #1
 800a822:	603b      	str	r3, [r7, #0]
        }
        break;
 800a824:	e02c      	b.n	800a880 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800a826:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a82c:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	3301      	adds	r3, #1
 800a832:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	781b      	ldrb	r3, [r3, #0]
 800a838:	2b68      	cmp	r3, #104	; 0x68
 800a83a:	d125      	bne.n	800a888 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 800a83c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a83e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a842:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	3301      	adds	r3, #1
 800a848:	603b      	str	r3, [r7, #0]
        }
        break;
 800a84a:	e01d      	b.n	800a888 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800a84c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a84e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a852:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	3301      	adds	r3, #1
 800a858:	603b      	str	r3, [r7, #0]
        break;
 800a85a:	e016      	b.n	800a88a <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800a85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a862:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	3301      	adds	r3, #1
 800a868:	603b      	str	r3, [r7, #0]
        break;
 800a86a:	e00e      	b.n	800a88a <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800a86c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a86e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a872:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	3301      	adds	r3, #1
 800a878:	603b      	str	r3, [r7, #0]
        break;
 800a87a:	e006      	b.n	800a88a <_vsnprintf+0x2a2>
      default :
        break;
 800a87c:	bf00      	nop
 800a87e:	e004      	b.n	800a88a <_vsnprintf+0x2a2>
        break;
 800a880:	bf00      	nop
 800a882:	e002      	b.n	800a88a <_vsnprintf+0x2a2>
 800a884:	08009869 	.word	0x08009869
        break;
 800a888:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	781b      	ldrb	r3, [r3, #0]
 800a88e:	3b25      	subs	r3, #37	; 0x25
 800a890:	2b53      	cmp	r3, #83	; 0x53
 800a892:	f200 8337 	bhi.w	800af04 <_vsnprintf+0x91c>
 800a896:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <_vsnprintf+0x2b4>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800aeed 	.word	0x0800aeed
 800a8a0:	0800af05 	.word	0x0800af05
 800a8a4:	0800af05 	.word	0x0800af05
 800a8a8:	0800af05 	.word	0x0800af05
 800a8ac:	0800af05 	.word	0x0800af05
 800a8b0:	0800af05 	.word	0x0800af05
 800a8b4:	0800af05 	.word	0x0800af05
 800a8b8:	0800af05 	.word	0x0800af05
 800a8bc:	0800af05 	.word	0x0800af05
 800a8c0:	0800af05 	.word	0x0800af05
 800a8c4:	0800af05 	.word	0x0800af05
 800a8c8:	0800af05 	.word	0x0800af05
 800a8cc:	0800af05 	.word	0x0800af05
 800a8d0:	0800af05 	.word	0x0800af05
 800a8d4:	0800af05 	.word	0x0800af05
 800a8d8:	0800af05 	.word	0x0800af05
 800a8dc:	0800af05 	.word	0x0800af05
 800a8e0:	0800af05 	.word	0x0800af05
 800a8e4:	0800af05 	.word	0x0800af05
 800a8e8:	0800af05 	.word	0x0800af05
 800a8ec:	0800af05 	.word	0x0800af05
 800a8f0:	0800af05 	.word	0x0800af05
 800a8f4:	0800af05 	.word	0x0800af05
 800a8f8:	0800af05 	.word	0x0800af05
 800a8fc:	0800af05 	.word	0x0800af05
 800a900:	0800af05 	.word	0x0800af05
 800a904:	0800af05 	.word	0x0800af05
 800a908:	0800af05 	.word	0x0800af05
 800a90c:	0800af05 	.word	0x0800af05
 800a910:	0800af05 	.word	0x0800af05
 800a914:	0800af05 	.word	0x0800af05
 800a918:	0800af05 	.word	0x0800af05
 800a91c:	0800acc1 	.word	0x0800acc1
 800a920:	0800ac79 	.word	0x0800ac79
 800a924:	0800acc1 	.word	0x0800acc1
 800a928:	0800af05 	.word	0x0800af05
 800a92c:	0800af05 	.word	0x0800af05
 800a930:	0800af05 	.word	0x0800af05
 800a934:	0800af05 	.word	0x0800af05
 800a938:	0800af05 	.word	0x0800af05
 800a93c:	0800af05 	.word	0x0800af05
 800a940:	0800af05 	.word	0x0800af05
 800a944:	0800af05 	.word	0x0800af05
 800a948:	0800af05 	.word	0x0800af05
 800a94c:	0800af05 	.word	0x0800af05
 800a950:	0800af05 	.word	0x0800af05
 800a954:	0800af05 	.word	0x0800af05
 800a958:	0800af05 	.word	0x0800af05
 800a95c:	0800af05 	.word	0x0800af05
 800a960:	0800af05 	.word	0x0800af05
 800a964:	0800af05 	.word	0x0800af05
 800a968:	0800a9ed 	.word	0x0800a9ed
 800a96c:	0800af05 	.word	0x0800af05
 800a970:	0800af05 	.word	0x0800af05
 800a974:	0800af05 	.word	0x0800af05
 800a978:	0800af05 	.word	0x0800af05
 800a97c:	0800af05 	.word	0x0800af05
 800a980:	0800af05 	.word	0x0800af05
 800a984:	0800af05 	.word	0x0800af05
 800a988:	0800af05 	.word	0x0800af05
 800a98c:	0800af05 	.word	0x0800af05
 800a990:	0800a9ed 	.word	0x0800a9ed
 800a994:	0800ad29 	.word	0x0800ad29
 800a998:	0800a9ed 	.word	0x0800a9ed
 800a99c:	0800acc1 	.word	0x0800acc1
 800a9a0:	0800ac79 	.word	0x0800ac79
 800a9a4:	0800acc1 	.word	0x0800acc1
 800a9a8:	0800af05 	.word	0x0800af05
 800a9ac:	0800a9ed 	.word	0x0800a9ed
 800a9b0:	0800af05 	.word	0x0800af05
 800a9b4:	0800af05 	.word	0x0800af05
 800a9b8:	0800af05 	.word	0x0800af05
 800a9bc:	0800af05 	.word	0x0800af05
 800a9c0:	0800af05 	.word	0x0800af05
 800a9c4:	0800a9ed 	.word	0x0800a9ed
 800a9c8:	0800ae61 	.word	0x0800ae61
 800a9cc:	0800af05 	.word	0x0800af05
 800a9d0:	0800af05 	.word	0x0800af05
 800a9d4:	0800ad9d 	.word	0x0800ad9d
 800a9d8:	0800af05 	.word	0x0800af05
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800af05 	.word	0x0800af05
 800a9e4:	0800af05 	.word	0x0800af05
 800a9e8:	0800a9ed 	.word	0x0800a9ed
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	2b78      	cmp	r3, #120	; 0x78
 800a9f2:	d003      	beq.n	800a9fc <_vsnprintf+0x414>
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	781b      	ldrb	r3, [r3, #0]
 800a9f8:	2b58      	cmp	r3, #88	; 0x58
 800a9fa:	d102      	bne.n	800aa02 <_vsnprintf+0x41a>
          base = 16U;
 800a9fc:	2310      	movs	r3, #16
 800a9fe:	643b      	str	r3, [r7, #64]	; 0x40
 800aa00:	e013      	b.n	800aa2a <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	2b6f      	cmp	r3, #111	; 0x6f
 800aa08:	d102      	bne.n	800aa10 <_vsnprintf+0x428>
          base =  8U;
 800aa0a:	2308      	movs	r3, #8
 800aa0c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa0e:	e00c      	b.n	800aa2a <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	2b62      	cmp	r3, #98	; 0x62
 800aa16:	d102      	bne.n	800aa1e <_vsnprintf+0x436>
          base =  2U;
 800aa18:	2302      	movs	r3, #2
 800aa1a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa1c:	e005      	b.n	800aa2a <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 800aa1e:	230a      	movs	r3, #10
 800aa20:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800aa22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa24:	f023 0310 	bic.w	r3, r3, #16
 800aa28:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	2b58      	cmp	r3, #88	; 0x58
 800aa30:	d103      	bne.n	800aa3a <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 800aa32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa34:	f043 0320 	orr.w	r3, r3, #32
 800aa38:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	781b      	ldrb	r3, [r3, #0]
 800aa3e:	2b69      	cmp	r3, #105	; 0x69
 800aa40:	d007      	beq.n	800aa52 <_vsnprintf+0x46a>
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	2b64      	cmp	r3, #100	; 0x64
 800aa48:	d003      	beq.n	800aa52 <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800aa4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa4c:	f023 030c 	bic.w	r3, r3, #12
 800aa50:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800aa52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d003      	beq.n	800aa64 <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 800aa5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa5e:	f023 0301 	bic.w	r3, r3, #1
 800aa62:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b69      	cmp	r3, #105	; 0x69
 800aa6a:	d004      	beq.n	800aa76 <_vsnprintf+0x48e>
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	781b      	ldrb	r3, [r3, #0]
 800aa70:	2b64      	cmp	r3, #100	; 0x64
 800aa72:	f040 808d 	bne.w	800ab90 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800aa76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d02e      	beq.n	800aade <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800aa80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa82:	3307      	adds	r3, #7
 800aa84:	f023 0307 	bic.w	r3, r3, #7
 800aa88:	f103 0208 	add.w	r2, r3, #8
 800aa8c:	66ba      	str	r2, [r7, #104]	; 0x68
 800aa8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aa92:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800aa96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f174 0200 	sbcs.w	r2, r4, #0
 800aaa0:	da02      	bge.n	800aaa8 <_vsnprintf+0x4c0>
 800aaa2:	425b      	negs	r3, r3
 800aaa4:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 800aaa8:	4619      	mov	r1, r3
 800aaaa:	4622      	mov	r2, r4
 800aaac:	697b      	ldr	r3, [r7, #20]
 800aaae:	0fdb      	lsrs	r3, r3, #31
 800aab0:	b2d8      	uxtb	r0, r3
 800aab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aab4:	f04f 0400 	mov.w	r4, #0
 800aab8:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800aaba:	9508      	str	r5, [sp, #32]
 800aabc:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800aabe:	9507      	str	r5, [sp, #28]
 800aac0:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 800aac2:	9506      	str	r5, [sp, #24]
 800aac4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aac8:	9002      	str	r0, [sp, #8]
 800aaca:	e9cd 1200 	strd	r1, r2, [sp]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aad2:	68b9      	ldr	r1, [r7, #8]
 800aad4:	68f8      	ldr	r0, [r7, #12]
 800aad6:	f7ff f8c0 	bl	8009c5a <_ntoa_long_long>
 800aada:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800aadc:	e0c8      	b.n	800ac70 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800aade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d01e      	beq.n	800ab26 <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 800aae8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaea:	1d1a      	adds	r2, r3, #4
 800aaec:	66ba      	str	r2, [r7, #104]	; 0x68
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfb8      	it	lt
 800aaf8:	425b      	neglt	r3, r3
 800aafa:	4619      	mov	r1, r3
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	0fdb      	lsrs	r3, r3, #31
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab04:	9205      	str	r2, [sp, #20]
 800ab06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab08:	9204      	str	r2, [sp, #16]
 800ab0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab0c:	9203      	str	r2, [sp, #12]
 800ab0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab10:	9202      	str	r2, [sp, #8]
 800ab12:	9301      	str	r3, [sp, #4]
 800ab14:	9100      	str	r1, [sp, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab1a:	68b9      	ldr	r1, [r7, #8]
 800ab1c:	68f8      	ldr	r0, [r7, #12]
 800ab1e:	f7ff f835 	bl	8009b8c <_ntoa_long>
 800ab22:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800ab24:	e0a4      	b.n	800ac70 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800ab26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d005      	beq.n	800ab3c <_vsnprintf+0x554>
 800ab30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab32:	1d1a      	adds	r2, r3, #4
 800ab34:	66ba      	str	r2, [r7, #104]	; 0x68
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	b2db      	uxtb	r3, r3
 800ab3a:	e00e      	b.n	800ab5a <_vsnprintf+0x572>
 800ab3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d005      	beq.n	800ab52 <_vsnprintf+0x56a>
 800ab46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab48:	1d1a      	adds	r2, r3, #4
 800ab4a:	66ba      	str	r2, [r7, #104]	; 0x68
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	b21b      	sxth	r3, r3
 800ab50:	e003      	b.n	800ab5a <_vsnprintf+0x572>
 800ab52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab54:	1d1a      	adds	r2, r3, #4
 800ab56:	66ba      	str	r2, [r7, #104]	; 0x68
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ab5c:	6a3b      	ldr	r3, [r7, #32]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	bfb8      	it	lt
 800ab62:	425b      	neglt	r3, r3
 800ab64:	4619      	mov	r1, r3
 800ab66:	6a3b      	ldr	r3, [r7, #32]
 800ab68:	0fdb      	lsrs	r3, r3, #31
 800ab6a:	b2db      	uxtb	r3, r3
 800ab6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab6e:	9205      	str	r2, [sp, #20]
 800ab70:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab72:	9204      	str	r2, [sp, #16]
 800ab74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab76:	9203      	str	r2, [sp, #12]
 800ab78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab7a:	9202      	str	r2, [sp, #8]
 800ab7c:	9301      	str	r3, [sp, #4]
 800ab7e:	9100      	str	r1, [sp, #0]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab84:	68b9      	ldr	r1, [r7, #8]
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff f800 	bl	8009b8c <_ntoa_long>
 800ab8c:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 800ab8e:	e06f      	b.n	800ac70 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800ab90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d020      	beq.n	800abdc <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800ab9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab9c:	3307      	adds	r3, #7
 800ab9e:	f023 0307 	bic.w	r3, r3, #7
 800aba2:	f103 0208 	add.w	r2, r3, #8
 800aba6:	66ba      	str	r2, [r7, #104]	; 0x68
 800aba8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800abac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abae:	4611      	mov	r1, r2
 800abb0:	f04f 0200 	mov.w	r2, #0
 800abb4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800abb6:	9008      	str	r0, [sp, #32]
 800abb8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800abba:	9007      	str	r0, [sp, #28]
 800abbc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800abbe:	9006      	str	r0, [sp, #24]
 800abc0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800abc4:	2200      	movs	r2, #0
 800abc6:	9202      	str	r2, [sp, #8]
 800abc8:	e9cd 3400 	strd	r3, r4, [sp]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abd0:	68b9      	ldr	r1, [r7, #8]
 800abd2:	68f8      	ldr	r0, [r7, #12]
 800abd4:	f7ff f841 	bl	8009c5a <_ntoa_long_long>
 800abd8:	6478      	str	r0, [r7, #68]	; 0x44
 800abda:	e049      	b.n	800ac70 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800abdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d016      	beq.n	800ac14 <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800abe6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abe8:	1d1a      	adds	r2, r3, #4
 800abea:	66ba      	str	r2, [r7, #104]	; 0x68
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abf0:	9205      	str	r2, [sp, #20]
 800abf2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800abf4:	9204      	str	r2, [sp, #16]
 800abf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800abf8:	9203      	str	r2, [sp, #12]
 800abfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abfc:	9202      	str	r2, [sp, #8]
 800abfe:	2200      	movs	r2, #0
 800ac00:	9201      	str	r2, [sp, #4]
 800ac02:	9300      	str	r3, [sp, #0]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac08:	68b9      	ldr	r1, [r7, #8]
 800ac0a:	68f8      	ldr	r0, [r7, #12]
 800ac0c:	f7fe ffbe 	bl	8009b8c <_ntoa_long>
 800ac10:	6478      	str	r0, [r7, #68]	; 0x44
 800ac12:	e02d      	b.n	800ac70 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800ac14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d005      	beq.n	800ac2a <_vsnprintf+0x642>
 800ac1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac20:	1d1a      	adds	r2, r3, #4
 800ac22:	66ba      	str	r2, [r7, #104]	; 0x68
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	b2db      	uxtb	r3, r3
 800ac28:	e00e      	b.n	800ac48 <_vsnprintf+0x660>
 800ac2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d005      	beq.n	800ac40 <_vsnprintf+0x658>
 800ac34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac36:	1d1a      	adds	r2, r3, #4
 800ac38:	66ba      	str	r2, [r7, #104]	; 0x68
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	e003      	b.n	800ac48 <_vsnprintf+0x660>
 800ac40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac42:	1d1a      	adds	r2, r3, #4
 800ac44:	66ba      	str	r2, [r7, #104]	; 0x68
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ac4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac4c:	9305      	str	r3, [sp, #20]
 800ac4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac50:	9304      	str	r3, [sp, #16]
 800ac52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac54:	9303      	str	r3, [sp, #12]
 800ac56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac58:	9302      	str	r3, [sp, #8]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9301      	str	r3, [sp, #4]
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	9300      	str	r3, [sp, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac66:	68b9      	ldr	r1, [r7, #8]
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	f7fe ff8f 	bl	8009b8c <_ntoa_long>
 800ac6e:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	3301      	adds	r3, #1
 800ac74:	603b      	str	r3, [r7, #0]
        break;
 800ac76:	e152      	b.n	800af1e <_vsnprintf+0x936>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	2b46      	cmp	r3, #70	; 0x46
 800ac7e:	d103      	bne.n	800ac88 <_vsnprintf+0x6a0>
 800ac80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac82:	f043 0320 	orr.w	r3, r3, #32
 800ac86:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ac88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac8a:	3307      	adds	r3, #7
 800ac8c:	f023 0307 	bic.w	r3, r3, #7
 800ac90:	f103 0208 	add.w	r2, r3, #8
 800ac94:	66ba      	str	r2, [r7, #104]	; 0x68
 800ac96:	ed93 7b00 	vldr	d7, [r3]
 800ac9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac9c:	9302      	str	r3, [sp, #8]
 800ac9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aca0:	9301      	str	r3, [sp, #4]
 800aca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aca4:	9300      	str	r3, [sp, #0]
 800aca6:	eeb0 0b47 	vmov.f64	d0, d7
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acae:	68b9      	ldr	r1, [r7, #8]
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f7ff f841 	bl	8009d38 <_ftoa>
 800acb6:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	3301      	adds	r3, #1
 800acbc:	603b      	str	r3, [r7, #0]
        break;
 800acbe:	e12e      	b.n	800af1e <_vsnprintf+0x936>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	781b      	ldrb	r3, [r3, #0]
 800acc4:	2b67      	cmp	r3, #103	; 0x67
 800acc6:	d003      	beq.n	800acd0 <_vsnprintf+0x6e8>
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b47      	cmp	r3, #71	; 0x47
 800acce:	d103      	bne.n	800acd8 <_vsnprintf+0x6f0>
 800acd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800acd6:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b45      	cmp	r3, #69	; 0x45
 800acde:	d003      	beq.n	800ace8 <_vsnprintf+0x700>
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2b47      	cmp	r3, #71	; 0x47
 800ace6:	d103      	bne.n	800acf0 <_vsnprintf+0x708>
 800ace8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800acea:	f043 0320 	orr.w	r3, r3, #32
 800acee:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800acf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acf2:	3307      	adds	r3, #7
 800acf4:	f023 0307 	bic.w	r3, r3, #7
 800acf8:	f103 0208 	add.w	r2, r3, #8
 800acfc:	66ba      	str	r2, [r7, #104]	; 0x68
 800acfe:	ed93 7b00 	vldr	d7, [r3]
 800ad02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad04:	9302      	str	r3, [sp, #8]
 800ad06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	eeb0 0b47 	vmov.f64	d0, d7
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad16:	68b9      	ldr	r1, [r7, #8]
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7ff fa5d 	bl	800a1d8 <_etoa>
 800ad1e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	3301      	adds	r3, #1
 800ad24:	603b      	str	r3, [r7, #0]
        break;
 800ad26:	e0fa      	b.n	800af1e <_vsnprintf+0x936>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800ad2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad2e:	f003 0302 	and.w	r3, r3, #2
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10e      	bne.n	800ad54 <_vsnprintf+0x76c>
          while (l++ < width) {
 800ad36:	e007      	b.n	800ad48 <_vsnprintf+0x760>
            out(' ', buffer, idx++, maxlen);
 800ad38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad3a:	1c53      	adds	r3, r2, #1
 800ad3c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad3e:	68fc      	ldr	r4, [r7, #12]
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	68b9      	ldr	r1, [r7, #8]
 800ad44:	2020      	movs	r0, #32
 800ad46:	47a0      	blx	r4
          while (l++ < width) {
 800ad48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad4a:	1c5a      	adds	r2, r3, #1
 800ad4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ad4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad50:	429a      	cmp	r2, r3
 800ad52:	d8f1      	bhi.n	800ad38 <_vsnprintf+0x750>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800ad54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad56:	1d1a      	adds	r2, r3, #4
 800ad58:	66ba      	str	r2, [r7, #104]	; 0x68
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	b2d8      	uxtb	r0, r3
 800ad5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad60:	1c53      	adds	r3, r2, #1
 800ad62:	647b      	str	r3, [r7, #68]	; 0x44
 800ad64:	68fc      	ldr	r4, [r7, #12]
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	68b9      	ldr	r1, [r7, #8]
 800ad6a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800ad6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad6e:	f003 0302 	and.w	r3, r3, #2
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d00e      	beq.n	800ad94 <_vsnprintf+0x7ac>
          while (l++ < width) {
 800ad76:	e007      	b.n	800ad88 <_vsnprintf+0x7a0>
            out(' ', buffer, idx++, maxlen);
 800ad78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ad7a:	1c53      	adds	r3, r2, #1
 800ad7c:	647b      	str	r3, [r7, #68]	; 0x44
 800ad7e:	68fc      	ldr	r4, [r7, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	68b9      	ldr	r1, [r7, #8]
 800ad84:	2020      	movs	r0, #32
 800ad86:	47a0      	blx	r4
          while (l++ < width) {
 800ad88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad8a:	1c5a      	adds	r2, r3, #1
 800ad8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ad8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d8f1      	bhi.n	800ad78 <_vsnprintf+0x790>
          }
        }
        format++;
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	3301      	adds	r3, #1
 800ad98:	603b      	str	r3, [r7, #0]
        break;
 800ad9a:	e0c0      	b.n	800af1e <_vsnprintf+0x936>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800ad9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ad9e:	1d1a      	adds	r2, r3, #4
 800ada0:	66ba      	str	r2, [r7, #104]	; 0x68
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800ada6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <_vsnprintf+0x7c8>
 800adac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adae:	e001      	b.n	800adb4 <_vsnprintf+0x7cc>
 800adb0:	f04f 33ff 	mov.w	r3, #4294967295
 800adb4:	4619      	mov	r1, r3
 800adb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800adb8:	f7fe fd64 	bl	8009884 <_strnlen_s>
 800adbc:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800adbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d005      	beq.n	800add4 <_vsnprintf+0x7ec>
          l = (l < precision ? l : precision);
 800adc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800adcc:	4293      	cmp	r3, r2
 800adce:	bf28      	it	cs
 800add0:	4613      	movcs	r3, r2
 800add2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800add4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800add6:	f003 0302 	and.w	r3, r3, #2
 800adda:	2b00      	cmp	r3, #0
 800addc:	d11a      	bne.n	800ae14 <_vsnprintf+0x82c>
          while (l++ < width) {
 800adde:	e007      	b.n	800adf0 <_vsnprintf+0x808>
            out(' ', buffer, idx++, maxlen);
 800ade0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ade2:	1c53      	adds	r3, r2, #1
 800ade4:	647b      	str	r3, [r7, #68]	; 0x44
 800ade6:	68fc      	ldr	r4, [r7, #12]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68b9      	ldr	r1, [r7, #8]
 800adec:	2020      	movs	r0, #32
 800adee:	47a0      	blx	r4
          while (l++ < width) {
 800adf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf2:	1c5a      	adds	r2, r3, #1
 800adf4:	637a      	str	r2, [r7, #52]	; 0x34
 800adf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d8f1      	bhi.n	800ade0 <_vsnprintf+0x7f8>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800adfc:	e00a      	b.n	800ae14 <_vsnprintf+0x82c>
          out(*(p++), buffer, idx++, maxlen);
 800adfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae00:	1c5a      	adds	r2, r3, #1
 800ae02:	63ba      	str	r2, [r7, #56]	; 0x38
 800ae04:	7818      	ldrb	r0, [r3, #0]
 800ae06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae08:	1c53      	adds	r3, r2, #1
 800ae0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae0c:	68fc      	ldr	r4, [r7, #12]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d009      	beq.n	800ae30 <_vsnprintf+0x848>
 800ae1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0eb      	beq.n	800adfe <_vsnprintf+0x816>
 800ae26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae28:	1e5a      	subs	r2, r3, #1
 800ae2a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d1e6      	bne.n	800adfe <_vsnprintf+0x816>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800ae30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae32:	f003 0302 	and.w	r3, r3, #2
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d00e      	beq.n	800ae58 <_vsnprintf+0x870>
          while (l++ < width) {
 800ae3a:	e007      	b.n	800ae4c <_vsnprintf+0x864>
            out(' ', buffer, idx++, maxlen);
 800ae3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae3e:	1c53      	adds	r3, r2, #1
 800ae40:	647b      	str	r3, [r7, #68]	; 0x44
 800ae42:	68fc      	ldr	r4, [r7, #12]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	2020      	movs	r0, #32
 800ae4a:	47a0      	blx	r4
          while (l++ < width) {
 800ae4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae4e:	1c5a      	adds	r2, r3, #1
 800ae50:	637a      	str	r2, [r7, #52]	; 0x34
 800ae52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d8f1      	bhi.n	800ae3c <_vsnprintf+0x854>
          }
        }
        format++;
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	603b      	str	r3, [r7, #0]
        break;
 800ae5e:	e05e      	b.n	800af1e <_vsnprintf+0x936>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800ae60:	2308      	movs	r3, #8
 800ae62:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800ae64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae66:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800ae6a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 800ae72:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d01d      	beq.n	800aeb6 <_vsnprintf+0x8ce>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800ae7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae7c:	1d1a      	adds	r2, r3, #4
 800ae7e:	66ba      	str	r2, [r7, #104]	; 0x68
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f04f 0400 	mov.w	r4, #0
 800ae86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae88:	9208      	str	r2, [sp, #32]
 800ae8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae8c:	9207      	str	r2, [sp, #28]
 800ae8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae90:	9206      	str	r2, [sp, #24]
 800ae92:	f04f 0110 	mov.w	r1, #16
 800ae96:	f04f 0200 	mov.w	r2, #0
 800ae9a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	9202      	str	r2, [sp, #8]
 800aea2:	e9cd 3400 	strd	r3, r4, [sp]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeaa:	68b9      	ldr	r1, [r7, #8]
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f7fe fed4 	bl	8009c5a <_ntoa_long_long>
 800aeb2:	6478      	str	r0, [r7, #68]	; 0x44
 800aeb4:	e016      	b.n	800aee4 <_vsnprintf+0x8fc>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800aeb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeb8:	1d1a      	adds	r2, r3, #4
 800aeba:	66ba      	str	r2, [r7, #104]	; 0x68
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aec6:	9304      	str	r3, [sp, #16]
 800aec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	2310      	movs	r3, #16
 800aece:	9302      	str	r3, [sp, #8]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	9200      	str	r2, [sp, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f7fe fe55 	bl	8009b8c <_ntoa_long>
 800aee2:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	3301      	adds	r3, #1
 800aee8:	603b      	str	r3, [r7, #0]
        break;
 800aeea:	e018      	b.n	800af1e <_vsnprintf+0x936>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800aeec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeee:	1c53      	adds	r3, r2, #1
 800aef0:	647b      	str	r3, [r7, #68]	; 0x44
 800aef2:	68fc      	ldr	r4, [r7, #12]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68b9      	ldr	r1, [r7, #8]
 800aef8:	2025      	movs	r0, #37	; 0x25
 800aefa:	47a0      	blx	r4
        format++;
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	3301      	adds	r3, #1
 800af00:	603b      	str	r3, [r7, #0]
        break;
 800af02:	e00c      	b.n	800af1e <_vsnprintf+0x936>

      default :
        out(*format, buffer, idx++, maxlen);
 800af04:	683b      	ldr	r3, [r7, #0]
 800af06:	7818      	ldrb	r0, [r3, #0]
 800af08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af0a:	1c53      	adds	r3, r2, #1
 800af0c:	647b      	str	r3, [r7, #68]	; 0x44
 800af0e:	68fc      	ldr	r4, [r7, #12]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	68b9      	ldr	r1, [r7, #8]
 800af14:	47a0      	blx	r4
        format++;
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	3301      	adds	r3, #1
 800af1a:	603b      	str	r3, [r7, #0]
        break;
 800af1c:	bf00      	nop
  while (*format)
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f47f ab71 	bne.w	800a60a <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800af28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d302      	bcc.n	800af36 <_vsnprintf+0x94e>
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	1e5a      	subs	r2, r3, #1
 800af34:	e000      	b.n	800af38 <_vsnprintf+0x950>
 800af36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af38:	68fc      	ldr	r4, [r7, #12]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68b9      	ldr	r1, [r7, #8]
 800af3e:	2000      	movs	r0, #0
 800af40:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800af42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800af44:	4618      	mov	r0, r3
 800af46:	3758      	adds	r7, #88	; 0x58
 800af48:	46bd      	mov	sp, r7
 800af4a:	bdb0      	pop	{r4, r5, r7, pc}

0800af4c <snprintf_>:
  return ret;
}


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 800af4c:	b40c      	push	{r2, r3}
 800af4e:	b580      	push	{r7, lr}
 800af50:	b086      	sub	sp, #24
 800af52:	af02      	add	r7, sp, #8
 800af54:	6078      	str	r0, [r7, #4]
 800af56:	6039      	str	r1, [r7, #0]
  va_list va;
  va_start(va, format);
 800af58:	f107 031c 	add.w	r3, r7, #28
 800af5c:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	69bb      	ldr	r3, [r7, #24]
 800af64:	683a      	ldr	r2, [r7, #0]
 800af66:	6879      	ldr	r1, [r7, #4]
 800af68:	4805      	ldr	r0, [pc, #20]	; (800af80 <snprintf_+0x34>)
 800af6a:	f7ff fb3d 	bl	800a5e8 <_vsnprintf>
 800af6e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800af70:	68fb      	ldr	r3, [r7, #12]
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af7c:	b002      	add	sp, #8
 800af7e:	4770      	bx	lr
 800af80:	0800983b 	.word	0x0800983b

0800af84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800af8a:	4b11      	ldr	r3, [pc, #68]	; (800afd0 <HAL_MspInit+0x4c>)
 800af8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8e:	4a10      	ldr	r2, [pc, #64]	; (800afd0 <HAL_MspInit+0x4c>)
 800af90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af94:	6413      	str	r3, [r2, #64]	; 0x40
 800af96:	4b0e      	ldr	r3, [pc, #56]	; (800afd0 <HAL_MspInit+0x4c>)
 800af98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af9e:	607b      	str	r3, [r7, #4]
 800afa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800afa2:	4b0b      	ldr	r3, [pc, #44]	; (800afd0 <HAL_MspInit+0x4c>)
 800afa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afa6:	4a0a      	ldr	r2, [pc, #40]	; (800afd0 <HAL_MspInit+0x4c>)
 800afa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800afac:	6453      	str	r3, [r2, #68]	; 0x44
 800afae:	4b08      	ldr	r3, [pc, #32]	; (800afd0 <HAL_MspInit+0x4c>)
 800afb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afb6:	603b      	str	r3, [r7, #0]
 800afb8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800afba:	2200      	movs	r2, #0
 800afbc:	210f      	movs	r1, #15
 800afbe:	f06f 0001 	mvn.w	r0, #1
 800afc2:	f000 fbce 	bl	800b762 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	40023800 	.word	0x40023800

0800afd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08c      	sub	sp, #48	; 0x30
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afdc:	f107 031c 	add.w	r3, r7, #28
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
 800afe4:	605a      	str	r2, [r3, #4]
 800afe6:	609a      	str	r2, [r3, #8]
 800afe8:	60da      	str	r2, [r3, #12]
 800afea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a4d      	ldr	r2, [pc, #308]	; (800b128 <HAL_I2C_MspInit+0x154>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d166      	bne.n	800b0c4 <HAL_I2C_MspInit+0xf0>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aff6:	4b4d      	ldr	r3, [pc, #308]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	4a4c      	ldr	r2, [pc, #304]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800affc:	f043 0302 	orr.w	r3, r3, #2
 800b000:	6313      	str	r3, [r2, #48]	; 0x30
 800b002:	4b4a      	ldr	r3, [pc, #296]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b006:	f003 0302 	and.w	r3, r3, #2
 800b00a:	61bb      	str	r3, [r7, #24]
 800b00c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b00e:	23c0      	movs	r3, #192	; 0xc0
 800b010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b012:	2312      	movs	r3, #18
 800b014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b016:	2301      	movs	r3, #1
 800b018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b01a:	2303      	movs	r3, #3
 800b01c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800b01e:	2304      	movs	r3, #4
 800b020:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b022:	f107 031c 	add.w	r3, r7, #28
 800b026:	4619      	mov	r1, r3
 800b028:	4841      	ldr	r0, [pc, #260]	; (800b130 <HAL_I2C_MspInit+0x15c>)
 800b02a:	f000 ff69 	bl	800bf00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800b02e:	4b3f      	ldr	r3, [pc, #252]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b032:	4a3e      	ldr	r2, [pc, #248]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b034:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b038:	6413      	str	r3, [r2, #64]	; 0x40
 800b03a:	4b3c      	ldr	r3, [pc, #240]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b03e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b042:	617b      	str	r3, [r7, #20]
 800b044:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 800b046:	4b3b      	ldr	r3, [pc, #236]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b048:	4a3b      	ldr	r2, [pc, #236]	; (800b138 <HAL_I2C_MspInit+0x164>)
 800b04a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800b04c:	4b39      	ldr	r3, [pc, #228]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b04e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800b052:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b054:	4b37      	ldr	r3, [pc, #220]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b056:	2240      	movs	r2, #64	; 0x40
 800b058:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b05a:	4b36      	ldr	r3, [pc, #216]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b060:	4b34      	ldr	r3, [pc, #208]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b062:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b066:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b068:	4b32      	ldr	r3, [pc, #200]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b06a:	2200      	movs	r2, #0
 800b06c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b06e:	4b31      	ldr	r3, [pc, #196]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b070:	2200      	movs	r2, #0
 800b072:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800b074:	4b2f      	ldr	r3, [pc, #188]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b076:	2200      	movs	r2, #0
 800b078:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b07a:	4b2e      	ldr	r3, [pc, #184]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b07c:	2200      	movs	r2, #0
 800b07e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b080:	4b2c      	ldr	r3, [pc, #176]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b082:	2200      	movs	r2, #0
 800b084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800b086:	482b      	ldr	r0, [pc, #172]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b088:	f000 fba2 	bl	800b7d0 <HAL_DMA_Init>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <HAL_I2C_MspInit+0xc2>
    {
      Error_Handler();
 800b092:	f7fe fbcb 	bl	800982c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	4a26      	ldr	r2, [pc, #152]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b09a:	639a      	str	r2, [r3, #56]	; 0x38
 800b09c:	4a25      	ldr	r2, [pc, #148]	; (800b134 <HAL_I2C_MspInit+0x160>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2105      	movs	r1, #5
 800b0a6:	201f      	movs	r0, #31
 800b0a8:	f000 fb5b 	bl	800b762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800b0ac:	201f      	movs	r0, #31
 800b0ae:	f000 fb74 	bl	800b79a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2105      	movs	r1, #5
 800b0b6:	2020      	movs	r0, #32
 800b0b8:	f000 fb53 	bl	800b762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800b0bc:	2020      	movs	r0, #32
 800b0be:	f000 fb6c 	bl	800b79a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800b0c2:	e02d      	b.n	800b120 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C2)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	4a1c      	ldr	r2, [pc, #112]	; (800b13c <HAL_I2C_MspInit+0x168>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d128      	bne.n	800b120 <HAL_I2C_MspInit+0x14c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0ce:	4b17      	ldr	r3, [pc, #92]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d2:	4a16      	ldr	r2, [pc, #88]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b0d4:	f043 0302 	orr.w	r3, r3, #2
 800b0d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b0dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0de:	f003 0302 	and.w	r3, r3, #2
 800b0e2:	613b      	str	r3, [r7, #16]
 800b0e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800b0e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b0ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800b0ec:	2312      	movs	r3, #18
 800b0ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b0f4:	2303      	movs	r3, #3
 800b0f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b0fc:	f107 031c 	add.w	r3, r7, #28
 800b100:	4619      	mov	r1, r3
 800b102:	480b      	ldr	r0, [pc, #44]	; (800b130 <HAL_I2C_MspInit+0x15c>)
 800b104:	f000 fefc 	bl	800bf00 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800b108:	4b08      	ldr	r3, [pc, #32]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b10c:	4a07      	ldr	r2, [pc, #28]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b10e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b112:	6413      	str	r3, [r2, #64]	; 0x40
 800b114:	4b05      	ldr	r3, [pc, #20]	; (800b12c <HAL_I2C_MspInit+0x158>)
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b11c:	60fb      	str	r3, [r7, #12]
 800b11e:	68fb      	ldr	r3, [r7, #12]
}
 800b120:	bf00      	nop
 800b122:	3730      	adds	r7, #48	; 0x30
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	40005400 	.word	0x40005400
 800b12c:	40023800 	.word	0x40023800
 800b130:	40020400 	.word	0x40020400
 800b134:	20008230 	.word	0x20008230
 800b138:	400260a0 	.word	0x400260a0
 800b13c:	40005800 	.word	0x40005800

0800b140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b08a      	sub	sp, #40	; 0x28
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b148:	f107 0314 	add.w	r3, r7, #20
 800b14c:	2200      	movs	r2, #0
 800b14e:	601a      	str	r2, [r3, #0]
 800b150:	605a      	str	r2, [r3, #4]
 800b152:	609a      	str	r2, [r3, #8]
 800b154:	60da      	str	r2, [r3, #12]
 800b156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a45      	ldr	r2, [pc, #276]	; (800b274 <HAL_SPI_MspInit+0x134>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	f040 8084 	bne.w	800b26c <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b164:	4b44      	ldr	r3, [pc, #272]	; (800b278 <HAL_SPI_MspInit+0x138>)
 800b166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b168:	4a43      	ldr	r2, [pc, #268]	; (800b278 <HAL_SPI_MspInit+0x138>)
 800b16a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b16e:	6453      	str	r3, [r2, #68]	; 0x44
 800b170:	4b41      	ldr	r3, [pc, #260]	; (800b278 <HAL_SPI_MspInit+0x138>)
 800b172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b174:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b178:	613b      	str	r3, [r7, #16]
 800b17a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b17c:	4b3e      	ldr	r3, [pc, #248]	; (800b278 <HAL_SPI_MspInit+0x138>)
 800b17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b180:	4a3d      	ldr	r2, [pc, #244]	; (800b278 <HAL_SPI_MspInit+0x138>)
 800b182:	f043 0301 	orr.w	r3, r3, #1
 800b186:	6313      	str	r3, [r2, #48]	; 0x30
 800b188:	4b3b      	ldr	r3, [pc, #236]	; (800b278 <HAL_SPI_MspInit+0x138>)
 800b18a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b18c:	f003 0301 	and.w	r3, r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800b194:	23e0      	movs	r3, #224	; 0xe0
 800b196:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b198:	2302      	movs	r3, #2
 800b19a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19c:	2300      	movs	r3, #0
 800b19e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b1a4:	2305      	movs	r3, #5
 800b1a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1a8:	f107 0314 	add.w	r3, r7, #20
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	4833      	ldr	r0, [pc, #204]	; (800b27c <HAL_SPI_MspInit+0x13c>)
 800b1b0:	f000 fea6 	bl	800bf00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800b1b4:	4b32      	ldr	r3, [pc, #200]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1b6:	4a33      	ldr	r2, [pc, #204]	; (800b284 <HAL_SPI_MspInit+0x144>)
 800b1b8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800b1ba:	4b31      	ldr	r3, [pc, #196]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1bc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800b1c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1c2:	4b2f      	ldr	r3, [pc, #188]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b1ce:	4b2c      	ldr	r3, [pc, #176]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b1d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b1d6:	4b2a      	ldr	r3, [pc, #168]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1d8:	2200      	movs	r2, #0
 800b1da:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b1dc:	4b28      	ldr	r3, [pc, #160]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1de:	2200      	movs	r2, #0
 800b1e0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 800b1e2:	4b27      	ldr	r3, [pc, #156]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b1e8:	4b25      	ldr	r3, [pc, #148]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b1ee:	4b24      	ldr	r3, [pc, #144]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800b1f4:	4822      	ldr	r0, [pc, #136]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b1f6:	f000 faeb 	bl	800b7d0 <HAL_DMA_Init>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d001      	beq.n	800b204 <HAL_SPI_MspInit+0xc4>
    {
      Error_Handler();
 800b200:	f7fe fb14 	bl	800982c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a1e      	ldr	r2, [pc, #120]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b208:	659a      	str	r2, [r3, #88]	; 0x58
 800b20a:	4a1d      	ldr	r2, [pc, #116]	; (800b280 <HAL_SPI_MspInit+0x140>)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800b210:	4b1d      	ldr	r3, [pc, #116]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b212:	4a1e      	ldr	r2, [pc, #120]	; (800b28c <HAL_SPI_MspInit+0x14c>)
 800b214:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800b216:	4b1c      	ldr	r3, [pc, #112]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b218:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800b21c:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b21e:	4b1a      	ldr	r3, [pc, #104]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b220:	2240      	movs	r2, #64	; 0x40
 800b222:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b224:	4b18      	ldr	r3, [pc, #96]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b226:	2200      	movs	r2, #0
 800b228:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b22a:	4b17      	ldr	r3, [pc, #92]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b22c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b230:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b232:	4b15      	ldr	r3, [pc, #84]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b234:	2200      	movs	r2, #0
 800b236:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b238:	4b13      	ldr	r3, [pc, #76]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b23a:	2200      	movs	r2, #0
 800b23c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800b23e:	4b12      	ldr	r3, [pc, #72]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b240:	2200      	movs	r2, #0
 800b242:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b244:	4b10      	ldr	r3, [pc, #64]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b246:	2200      	movs	r2, #0
 800b248:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b24a:	4b0f      	ldr	r3, [pc, #60]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b24c:	2200      	movs	r2, #0
 800b24e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800b250:	480d      	ldr	r0, [pc, #52]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b252:	f000 fabd 	bl	800b7d0 <HAL_DMA_Init>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 800b25c:	f7fe fae6 	bl	800982c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	4a09      	ldr	r2, [pc, #36]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b264:	655a      	str	r2, [r3, #84]	; 0x54
 800b266:	4a08      	ldr	r2, [pc, #32]	; (800b288 <HAL_SPI_MspInit+0x148>)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b26c:	bf00      	nop
 800b26e:	3728      	adds	r7, #40	; 0x28
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}
 800b274:	40013000 	.word	0x40013000
 800b278:	40023800 	.word	0x40023800
 800b27c:	40020000 	.word	0x40020000
 800b280:	200187ec 	.word	0x200187ec
 800b284:	40026410 	.word	0x40026410
 800b288:	2001c84c 	.word	0x2001c84c
 800b28c:	40026458 	.word	0x40026458

0800b290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b08a      	sub	sp, #40	; 0x28
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b298:	f107 0314 	add.w	r3, r7, #20
 800b29c:	2200      	movs	r2, #0
 800b29e:	601a      	str	r2, [r3, #0]
 800b2a0:	605a      	str	r2, [r3, #4]
 800b2a2:	609a      	str	r2, [r3, #8]
 800b2a4:	60da      	str	r2, [r3, #12]
 800b2a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a32      	ldr	r2, [pc, #200]	; (800b378 <HAL_UART_MspInit+0xe8>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d15d      	bne.n	800b36e <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800b2b2:	4b32      	ldr	r3, [pc, #200]	; (800b37c <HAL_UART_MspInit+0xec>)
 800b2b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2b6:	4a31      	ldr	r2, [pc, #196]	; (800b37c <HAL_UART_MspInit+0xec>)
 800b2b8:	f043 0320 	orr.w	r3, r3, #32
 800b2bc:	6453      	str	r3, [r2, #68]	; 0x44
 800b2be:	4b2f      	ldr	r3, [pc, #188]	; (800b37c <HAL_UART_MspInit+0xec>)
 800b2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c2:	f003 0320 	and.w	r3, r3, #32
 800b2c6:	613b      	str	r3, [r7, #16]
 800b2c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b2ca:	4b2c      	ldr	r3, [pc, #176]	; (800b37c <HAL_UART_MspInit+0xec>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ce:	4a2b      	ldr	r2, [pc, #172]	; (800b37c <HAL_UART_MspInit+0xec>)
 800b2d0:	f043 0304 	orr.w	r3, r3, #4
 800b2d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b2d6:	4b29      	ldr	r3, [pc, #164]	; (800b37c <HAL_UART_MspInit+0xec>)
 800b2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2da:	f003 0304 	and.w	r3, r3, #4
 800b2de:	60fb      	str	r3, [r7, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800b2e2:	23c0      	movs	r3, #192	; 0xc0
 800b2e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2ee:	2303      	movs	r3, #3
 800b2f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800b2f2:	2308      	movs	r3, #8
 800b2f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4820      	ldr	r0, [pc, #128]	; (800b380 <HAL_UART_MspInit+0xf0>)
 800b2fe:	f000 fdff 	bl	800bf00 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_TX Init */
    hdma_usart6_tx.Instance = DMA2_Stream6;
 800b302:	4b20      	ldr	r3, [pc, #128]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b304:	4a20      	ldr	r2, [pc, #128]	; (800b388 <HAL_UART_MspInit+0xf8>)
 800b306:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b30a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800b30e:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b310:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b312:	2240      	movs	r2, #64	; 0x40
 800b314:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b316:	4b1b      	ldr	r3, [pc, #108]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b318:	2200      	movs	r2, #0
 800b31a:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b31c:	4b19      	ldr	r3, [pc, #100]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b31e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b322:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b324:	4b17      	ldr	r3, [pc, #92]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b326:	2200      	movs	r2, #0
 800b328:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b32a:	4b16      	ldr	r3, [pc, #88]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b32c:	2200      	movs	r2, #0
 800b32e:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800b330:	4b14      	ldr	r3, [pc, #80]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b332:	2200      	movs	r2, #0
 800b334:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b336:	4b13      	ldr	r3, [pc, #76]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b338:	2200      	movs	r2, #0
 800b33a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800b33c:	4b11      	ldr	r3, [pc, #68]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b33e:	2200      	movs	r2, #0
 800b340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800b342:	4810      	ldr	r0, [pc, #64]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b344:	f000 fa44 	bl	800b7d0 <HAL_DMA_Init>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d001      	beq.n	800b352 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800b34e:	f7fe fa6d 	bl	800982c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4a0b      	ldr	r2, [pc, #44]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b356:	669a      	str	r2, [r3, #104]	; 0x68
 800b358:	4a0a      	ldr	r2, [pc, #40]	; (800b384 <HAL_UART_MspInit+0xf4>)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 3, 0);
 800b35e:	2200      	movs	r2, #0
 800b360:	2103      	movs	r1, #3
 800b362:	2047      	movs	r0, #71	; 0x47
 800b364:	f000 f9fd 	bl	800b762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800b368:	2047      	movs	r0, #71	; 0x47
 800b36a:	f000 fa16 	bl	800b79a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800b36e:	bf00      	nop
 800b370:	3728      	adds	r7, #40	; 0x28
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	40011400 	.word	0x40011400
 800b37c:	40023800 	.word	0x40023800
 800b380:	40020800 	.word	0x40020800
 800b384:	20008448 	.word	0x20008448
 800b388:	400264a0 	.word	0x400264a0

0800b38c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b38c:	b480      	push	{r7}
 800b38e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b390:	bf00      	nop
 800b392:	46bd      	mov	sp, r7
 800b394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b398:	4770      	bx	lr

0800b39a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b39a:	b480      	push	{r7}
 800b39c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b39e:	e7fe      	b.n	800b39e <HardFault_Handler+0x4>

0800b3a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b3a0:	b480      	push	{r7}
 800b3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b3a4:	e7fe      	b.n	800b3a4 <MemManage_Handler+0x4>

0800b3a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b3aa:	e7fe      	b.n	800b3aa <BusFault_Handler+0x4>

0800b3ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b3b0:	e7fe      	b.n	800b3b0 <UsageFault_Handler+0x4>

0800b3b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b3b2:	b480      	push	{r7}
 800b3b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b3b6:	bf00      	nop
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b3c4:	f000 f8d2 	bl	800b56c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800b3c8:	f007 f8d0 	bl	801256c <xTaskGetSchedulerState>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d001      	beq.n	800b3d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800b3d2:	f007 fca1 	bl	8012d18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b3d6:	bf00      	nop
 800b3d8:	bd80      	pop	{r7, pc}

0800b3da <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800b3da:	b580      	push	{r7, lr}
 800b3dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800b3de:	2008      	movs	r0, #8
 800b3e0:	f000 ff84 	bl	800c2ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800b3e4:	bf00      	nop
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800b3ec:	4802      	ldr	r0, [pc, #8]	; (800b3f8 <DMA1_Stream6_IRQHandler+0x10>)
 800b3ee:	f000 fb1f 	bl	800ba30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800b3f2:	bf00      	nop
 800b3f4:	bd80      	pop	{r7, pc}
 800b3f6:	bf00      	nop
 800b3f8:	20008230 	.word	0x20008230

0800b3fc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800b400:	4802      	ldr	r0, [pc, #8]	; (800b40c <I2C1_EV_IRQHandler+0x10>)
 800b402:	f001 f935 	bl	800c670 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800b406:	bf00      	nop
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	20008290 	.word	0x20008290

0800b410 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800b414:	4802      	ldr	r0, [pc, #8]	; (800b420 <I2C1_ER_IRQHandler+0x10>)
 800b416:	f001 f945 	bl	800c6a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800b41a:	bf00      	nop
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	20008290 	.word	0x20008290

0800b424 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800b428:	4802      	ldr	r0, [pc, #8]	; (800b434 <DMA2_Stream0_IRQHandler+0x10>)
 800b42a:	f000 fb01 	bl	800ba30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800b42e:	bf00      	nop
 800b430:	bd80      	pop	{r7, pc}
 800b432:	bf00      	nop
 800b434:	200187ec 	.word	0x200187ec

0800b438 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800b43c:	4802      	ldr	r0, [pc, #8]	; (800b448 <DMA2_Stream3_IRQHandler+0x10>)
 800b43e:	f000 faf7 	bl	800ba30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800b442:	bf00      	nop
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	2001c84c 	.word	0x2001c84c

0800b44c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800b450:	4802      	ldr	r0, [pc, #8]	; (800b45c <DMA2_Stream6_IRQHandler+0x10>)
 800b452:	f000 faed 	bl	800ba30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800b456:	bf00      	nop
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	20008448 	.word	0x20008448

0800b460 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800b464:	4802      	ldr	r0, [pc, #8]	; (800b470 <USART6_IRQHandler+0x10>)
 800b466:	f004 fb37 	bl	800fad8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800b46a:	bf00      	nop
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	20018700 	.word	0x20018700

0800b474 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800b474:	b480      	push	{r7}
 800b476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b478:	4b07      	ldr	r3, [pc, #28]	; (800b498 <SystemInit+0x24>)
 800b47a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b47e:	4a06      	ldr	r2, [pc, #24]	; (800b498 <SystemInit+0x24>)
 800b480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | 0x8000; /* Vector Table Relocation in Internal FLASH */
 800b488:	4b03      	ldr	r3, [pc, #12]	; (800b498 <SystemInit+0x24>)
 800b48a:	4a04      	ldr	r2, [pc, #16]	; (800b49c <SystemInit+0x28>)
 800b48c:	609a      	str	r2, [r3, #8]
#endif
}
 800b48e:	bf00      	nop
 800b490:	46bd      	mov	sp, r7
 800b492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b496:	4770      	bx	lr
 800b498:	e000ed00 	.word	0xe000ed00
 800b49c:	08008000 	.word	0x08008000

0800b4a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b4a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b4d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b4a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b4a6:	e003      	b.n	800b4b0 <LoopCopyDataInit>

0800b4a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b4aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b4ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b4ae:	3104      	adds	r1, #4

0800b4b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b4b0:	480b      	ldr	r0, [pc, #44]	; (800b4e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b4b2:	4b0c      	ldr	r3, [pc, #48]	; (800b4e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b4b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b4b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b4b8:	d3f6      	bcc.n	800b4a8 <CopyDataInit>
  ldr  r2, =_sbss
 800b4ba:	4a0b      	ldr	r2, [pc, #44]	; (800b4e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b4bc:	e002      	b.n	800b4c4 <LoopFillZerobss>

0800b4be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b4be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b4c0:	f842 3b04 	str.w	r3, [r2], #4

0800b4c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b4c4:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b4c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b4c8:	d3f9      	bcc.n	800b4be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b4ca:	f7ff ffd3 	bl	800b474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b4ce:	f007 fe95 	bl	80131fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b4d2:	f7fd fc0b 	bl	8008cec <main>
  bx  lr    
 800b4d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b4d8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 800b4dc:	08013408 	.word	0x08013408
  ldr  r0, =_sdata
 800b4e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b4e4:	2000001c 	.word	0x2000001c
  ldr  r2, =_sbss
 800b4e8:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 800b4ec:	2001c8b8 	.word	0x2001c8b8

0800b4f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b4f0:	e7fe      	b.n	800b4f0 <ADC_IRQHandler>

0800b4f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b4f2:	b580      	push	{r7, lr}
 800b4f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b4f6:	2003      	movs	r0, #3
 800b4f8:	f000 f928 	bl	800b74c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b4fc:	200f      	movs	r0, #15
 800b4fe:	f000 f805 	bl	800b50c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800b502:	f7ff fd3f 	bl	800af84 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800b514:	4b12      	ldr	r3, [pc, #72]	; (800b560 <HAL_InitTick+0x54>)
 800b516:	681a      	ldr	r2, [r3, #0]
 800b518:	4b12      	ldr	r3, [pc, #72]	; (800b564 <HAL_InitTick+0x58>)
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	4619      	mov	r1, r3
 800b51e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b522:	fbb3 f3f1 	udiv	r3, r3, r1
 800b526:	fbb2 f3f3 	udiv	r3, r2, r3
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 f943 	bl	800b7b6 <HAL_SYSTICK_Config>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d001      	beq.n	800b53a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800b536:	2301      	movs	r3, #1
 800b538:	e00e      	b.n	800b558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b0f      	cmp	r3, #15
 800b53e:	d80a      	bhi.n	800b556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800b540:	2200      	movs	r2, #0
 800b542:	6879      	ldr	r1, [r7, #4]
 800b544:	f04f 30ff 	mov.w	r0, #4294967295
 800b548:	f000 f90b 	bl	800b762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800b54c:	4a06      	ldr	r2, [pc, #24]	; (800b568 <HAL_InitTick+0x5c>)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800b552:	2300      	movs	r3, #0
 800b554:	e000      	b.n	800b558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	2000000c 	.word	0x2000000c
 800b564:	20000014 	.word	0x20000014
 800b568:	20000010 	.word	0x20000010

0800b56c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b56c:	b480      	push	{r7}
 800b56e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b570:	4b06      	ldr	r3, [pc, #24]	; (800b58c <HAL_IncTick+0x20>)
 800b572:	781b      	ldrb	r3, [r3, #0]
 800b574:	461a      	mov	r2, r3
 800b576:	4b06      	ldr	r3, [pc, #24]	; (800b590 <HAL_IncTick+0x24>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4413      	add	r3, r2
 800b57c:	4a04      	ldr	r2, [pc, #16]	; (800b590 <HAL_IncTick+0x24>)
 800b57e:	6013      	str	r3, [r2, #0]
}
 800b580:	bf00      	nop
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20000014 	.word	0x20000014
 800b590:	2001c8b4 	.word	0x2001c8b4

0800b594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b594:	b480      	push	{r7}
 800b596:	af00      	add	r7, sp, #0
  return uwTick;
 800b598:	4b03      	ldr	r3, [pc, #12]	; (800b5a8 <HAL_GetTick+0x14>)
 800b59a:	681b      	ldr	r3, [r3, #0]
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	2001c8b4 	.word	0x2001c8b4

0800b5ac <__NVIC_SetPriorityGrouping>:
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b5bc:	4b0b      	ldr	r3, [pc, #44]	; (800b5ec <__NVIC_SetPriorityGrouping+0x40>)
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b5c8:	4013      	ands	r3, r2
 800b5ca:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800b5d4:	4b06      	ldr	r3, [pc, #24]	; (800b5f0 <__NVIC_SetPriorityGrouping+0x44>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b5da:	4a04      	ldr	r2, [pc, #16]	; (800b5ec <__NVIC_SetPriorityGrouping+0x40>)
 800b5dc:	68bb      	ldr	r3, [r7, #8]
 800b5de:	60d3      	str	r3, [r2, #12]
}
 800b5e0:	bf00      	nop
 800b5e2:	3714      	adds	r7, #20
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	e000ed00 	.word	0xe000ed00
 800b5f0:	05fa0000 	.word	0x05fa0000

0800b5f4 <__NVIC_GetPriorityGrouping>:
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b5f8:	4b04      	ldr	r3, [pc, #16]	; (800b60c <__NVIC_GetPriorityGrouping+0x18>)
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	0a1b      	lsrs	r3, r3, #8
 800b5fe:	f003 0307 	and.w	r3, r3, #7
}
 800b602:	4618      	mov	r0, r3
 800b604:	46bd      	mov	sp, r7
 800b606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b60a:	4770      	bx	lr
 800b60c:	e000ed00 	.word	0xe000ed00

0800b610 <__NVIC_EnableIRQ>:
{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
 800b616:	4603      	mov	r3, r0
 800b618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b61a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	db0b      	blt.n	800b63a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	f003 021f 	and.w	r2, r3, #31
 800b628:	4907      	ldr	r1, [pc, #28]	; (800b648 <__NVIC_EnableIRQ+0x38>)
 800b62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b62e:	095b      	lsrs	r3, r3, #5
 800b630:	2001      	movs	r0, #1
 800b632:	fa00 f202 	lsl.w	r2, r0, r2
 800b636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800b63a:	bf00      	nop
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	e000e100 	.word	0xe000e100

0800b64c <__NVIC_SetPriority>:
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	4603      	mov	r3, r0
 800b654:	6039      	str	r1, [r7, #0]
 800b656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	db0a      	blt.n	800b676 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	b2da      	uxtb	r2, r3
 800b664:	490c      	ldr	r1, [pc, #48]	; (800b698 <__NVIC_SetPriority+0x4c>)
 800b666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b66a:	0112      	lsls	r2, r2, #4
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	440b      	add	r3, r1
 800b670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b674:	e00a      	b.n	800b68c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b676:	683b      	ldr	r3, [r7, #0]
 800b678:	b2da      	uxtb	r2, r3
 800b67a:	4908      	ldr	r1, [pc, #32]	; (800b69c <__NVIC_SetPriority+0x50>)
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	f003 030f 	and.w	r3, r3, #15
 800b682:	3b04      	subs	r3, #4
 800b684:	0112      	lsls	r2, r2, #4
 800b686:	b2d2      	uxtb	r2, r2
 800b688:	440b      	add	r3, r1
 800b68a:	761a      	strb	r2, [r3, #24]
}
 800b68c:	bf00      	nop
 800b68e:	370c      	adds	r7, #12
 800b690:	46bd      	mov	sp, r7
 800b692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b696:	4770      	bx	lr
 800b698:	e000e100 	.word	0xe000e100
 800b69c:	e000ed00 	.word	0xe000ed00

0800b6a0 <NVIC_EncodePriority>:
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b089      	sub	sp, #36	; 0x24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	f1c3 0307 	rsb	r3, r3, #7
 800b6ba:	2b04      	cmp	r3, #4
 800b6bc:	bf28      	it	cs
 800b6be:	2304      	movcs	r3, #4
 800b6c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	2b06      	cmp	r3, #6
 800b6c8:	d902      	bls.n	800b6d0 <NVIC_EncodePriority+0x30>
 800b6ca:	69fb      	ldr	r3, [r7, #28]
 800b6cc:	3b03      	subs	r3, #3
 800b6ce:	e000      	b.n	800b6d2 <NVIC_EncodePriority+0x32>
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b6d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b6d8:	69bb      	ldr	r3, [r7, #24]
 800b6da:	fa02 f303 	lsl.w	r3, r2, r3
 800b6de:	43da      	mvns	r2, r3
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	401a      	ands	r2, r3
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	fa01 f303 	lsl.w	r3, r1, r3
 800b6f2:	43d9      	mvns	r1, r3
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b6f8:	4313      	orrs	r3, r2
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3724      	adds	r7, #36	; 0x24
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
	...

0800b708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b082      	sub	sp, #8
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	3b01      	subs	r3, #1
 800b714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b718:	d301      	bcc.n	800b71e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b71a:	2301      	movs	r3, #1
 800b71c:	e00f      	b.n	800b73e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b71e:	4a0a      	ldr	r2, [pc, #40]	; (800b748 <SysTick_Config+0x40>)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	3b01      	subs	r3, #1
 800b724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b726:	210f      	movs	r1, #15
 800b728:	f04f 30ff 	mov.w	r0, #4294967295
 800b72c:	f7ff ff8e 	bl	800b64c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b730:	4b05      	ldr	r3, [pc, #20]	; (800b748 <SysTick_Config+0x40>)
 800b732:	2200      	movs	r2, #0
 800b734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b736:	4b04      	ldr	r3, [pc, #16]	; (800b748 <SysTick_Config+0x40>)
 800b738:	2207      	movs	r2, #7
 800b73a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b73c:	2300      	movs	r3, #0
}
 800b73e:	4618      	mov	r0, r3
 800b740:	3708      	adds	r7, #8
 800b742:	46bd      	mov	sp, r7
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	e000e010 	.word	0xe000e010

0800b74c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b082      	sub	sp, #8
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ff29 	bl	800b5ac <__NVIC_SetPriorityGrouping>
}
 800b75a:	bf00      	nop
 800b75c:	3708      	adds	r7, #8
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd80      	pop	{r7, pc}

0800b762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b762:	b580      	push	{r7, lr}
 800b764:	b086      	sub	sp, #24
 800b766:	af00      	add	r7, sp, #0
 800b768:	4603      	mov	r3, r0
 800b76a:	60b9      	str	r1, [r7, #8]
 800b76c:	607a      	str	r2, [r7, #4]
 800b76e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800b770:	2300      	movs	r3, #0
 800b772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b774:	f7ff ff3e 	bl	800b5f4 <__NVIC_GetPriorityGrouping>
 800b778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	68b9      	ldr	r1, [r7, #8]
 800b77e:	6978      	ldr	r0, [r7, #20]
 800b780:	f7ff ff8e 	bl	800b6a0 <NVIC_EncodePriority>
 800b784:	4602      	mov	r2, r0
 800b786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b78a:	4611      	mov	r1, r2
 800b78c:	4618      	mov	r0, r3
 800b78e:	f7ff ff5d 	bl	800b64c <__NVIC_SetPriority>
}
 800b792:	bf00      	nop
 800b794:	3718      	adds	r7, #24
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}

0800b79a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b79a:	b580      	push	{r7, lr}
 800b79c:	b082      	sub	sp, #8
 800b79e:	af00      	add	r7, sp, #0
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b7a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff ff31 	bl	800b610 <__NVIC_EnableIRQ>
}
 800b7ae:	bf00      	nop
 800b7b0:	3708      	adds	r7, #8
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}

0800b7b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b082      	sub	sp, #8
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f7ff ffa2 	bl	800b708 <SysTick_Config>
 800b7c4:	4603      	mov	r3, r0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3708      	adds	r7, #8
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b086      	sub	sp, #24
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b7dc:	f7ff feda 	bl	800b594 <HAL_GetTick>
 800b7e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d101      	bne.n	800b7ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	e099      	b.n	800b920 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	681a      	ldr	r2, [r3, #0]
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f022 0201 	bic.w	r2, r2, #1
 800b80a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b80c:	e00f      	b.n	800b82e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b80e:	f7ff fec1 	bl	800b594 <HAL_GetTick>
 800b812:	4602      	mov	r2, r0
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	2b05      	cmp	r3, #5
 800b81a:	d908      	bls.n	800b82e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2220      	movs	r2, #32
 800b820:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2203      	movs	r2, #3
 800b826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	e078      	b.n	800b920 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d1e8      	bne.n	800b80e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b844:	697a      	ldr	r2, [r7, #20]
 800b846:	4b38      	ldr	r3, [pc, #224]	; (800b928 <HAL_DMA_Init+0x158>)
 800b848:	4013      	ands	r3, r2
 800b84a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b85a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b866:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b872:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6a1b      	ldr	r3, [r3, #32]
 800b878:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	4313      	orrs	r3, r2
 800b87e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b884:	2b04      	cmp	r3, #4
 800b886:	d107      	bne.n	800b898 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b890:	4313      	orrs	r3, r2
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	4313      	orrs	r3, r2
 800b896:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	697a      	ldr	r2, [r7, #20]
 800b89e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	f023 0307 	bic.w	r3, r3, #7
 800b8ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8be:	2b04      	cmp	r3, #4
 800b8c0:	d117      	bne.n	800b8f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	4313      	orrs	r3, r2
 800b8ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00e      	beq.n	800b8f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fa99 	bl	800be0c <DMA_CheckFifoParam>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d008      	beq.n	800b8f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2240      	movs	r2, #64	; 0x40
 800b8e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2201      	movs	r2, #1
 800b8ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e016      	b.n	800b920 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	697a      	ldr	r2, [r7, #20]
 800b8f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fa50 	bl	800bda0 <DMA_CalcBaseAndBitshift>
 800b900:	4603      	mov	r3, r0
 800b902:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b908:	223f      	movs	r2, #63	; 0x3f
 800b90a:	409a      	lsls	r2, r3
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2201      	movs	r2, #1
 800b91a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b91e:	2300      	movs	r3, #0
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	e010803f 	.word	0xe010803f

0800b92c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
 800b938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b942:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b94a:	2b01      	cmp	r3, #1
 800b94c:	d101      	bne.n	800b952 <HAL_DMA_Start_IT+0x26>
 800b94e:	2302      	movs	r3, #2
 800b950:	e048      	b.n	800b9e4 <HAL_DMA_Start_IT+0xb8>
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	2201      	movs	r2, #1
 800b956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b960:	b2db      	uxtb	r3, r3
 800b962:	2b01      	cmp	r3, #1
 800b964:	d137      	bne.n	800b9d6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2202      	movs	r2, #2
 800b96a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	2200      	movs	r2, #0
 800b972:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	68b9      	ldr	r1, [r7, #8]
 800b97a:	68f8      	ldr	r0, [r7, #12]
 800b97c:	f000 f9e2 	bl	800bd44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b984:	223f      	movs	r2, #63	; 0x3f
 800b986:	409a      	lsls	r2, r3
 800b988:	693b      	ldr	r3, [r7, #16]
 800b98a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	681a      	ldr	r2, [r3, #0]
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f042 0216 	orr.w	r2, r2, #22
 800b99a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	695a      	ldr	r2, [r3, #20]
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b9aa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d007      	beq.n	800b9c4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f042 0208 	orr.w	r2, r2, #8
 800b9c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	681a      	ldr	r2, [r3, #0]
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f042 0201 	orr.w	r2, r2, #1
 800b9d2:	601a      	str	r2, [r3, #0]
 800b9d4:	e005      	b.n	800b9e2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b9de:	2302      	movs	r3, #2
 800b9e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	3718      	adds	r7, #24
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	d004      	beq.n	800ba0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2280      	movs	r2, #128	; 0x80
 800ba04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800ba06:	2301      	movs	r3, #1
 800ba08:	e00c      	b.n	800ba24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2205      	movs	r2, #5
 800ba0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	681a      	ldr	r2, [r3, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f022 0201 	bic.w	r2, r2, #1
 800ba20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ba22:	2300      	movs	r3, #0
}
 800ba24:	4618      	mov	r0, r3
 800ba26:	370c      	adds	r7, #12
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2e:	4770      	bx	lr

0800ba30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b086      	sub	sp, #24
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800ba3c:	4b92      	ldr	r3, [pc, #584]	; (800bc88 <HAL_DMA_IRQHandler+0x258>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a92      	ldr	r2, [pc, #584]	; (800bc8c <HAL_DMA_IRQHandler+0x25c>)
 800ba42:	fba2 2303 	umull	r2, r3, r2, r3
 800ba46:	0a9b      	lsrs	r3, r3, #10
 800ba48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba5a:	2208      	movs	r2, #8
 800ba5c:	409a      	lsls	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	4013      	ands	r3, r2
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d01a      	beq.n	800ba9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f003 0304 	and.w	r3, r3, #4
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d013      	beq.n	800ba9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	f022 0204 	bic.w	r2, r2, #4
 800ba82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba88:	2208      	movs	r2, #8
 800ba8a:	409a      	lsls	r2, r3
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba94:	f043 0201 	orr.w	r2, r3, #1
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baa0:	2201      	movs	r2, #1
 800baa2:	409a      	lsls	r2, r3
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	4013      	ands	r3, r2
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d012      	beq.n	800bad2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	695b      	ldr	r3, [r3, #20]
 800bab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d00b      	beq.n	800bad2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800babe:	2201      	movs	r2, #1
 800bac0:	409a      	lsls	r2, r3
 800bac2:	693b      	ldr	r3, [r7, #16]
 800bac4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baca:	f043 0202 	orr.w	r2, r3, #2
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bad6:	2204      	movs	r2, #4
 800bad8:	409a      	lsls	r2, r3
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	4013      	ands	r3, r2
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d012      	beq.n	800bb08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 0302 	and.w	r3, r3, #2
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00b      	beq.n	800bb08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800baf4:	2204      	movs	r2, #4
 800baf6:	409a      	lsls	r2, r3
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb00:	f043 0204 	orr.w	r2, r3, #4
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb0c:	2210      	movs	r2, #16
 800bb0e:	409a      	lsls	r2, r3
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	4013      	ands	r3, r2
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d043      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 0308 	and.w	r3, r3, #8
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d03c      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb2a:	2210      	movs	r2, #16
 800bb2c:	409a      	lsls	r2, r3
 800bb2e:	693b      	ldr	r3, [r7, #16]
 800bb30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d018      	beq.n	800bb72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d108      	bne.n	800bb60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d024      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	4798      	blx	r3
 800bb5e:	e01f      	b.n	800bba0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01b      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	4798      	blx	r3
 800bb70:	e016      	b.n	800bba0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d107      	bne.n	800bb90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	681a      	ldr	r2, [r3, #0]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f022 0208 	bic.w	r2, r2, #8
 800bb8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d003      	beq.n	800bba0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bba4:	2220      	movs	r2, #32
 800bba6:	409a      	lsls	r2, r3
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	4013      	ands	r3, r2
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	f000 808e 	beq.w	800bcce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f003 0310 	and.w	r3, r3, #16
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8086 	beq.w	800bcce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bbc6:	2220      	movs	r2, #32
 800bbc8:	409a      	lsls	r2, r3
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	2b05      	cmp	r3, #5
 800bbd8:	d136      	bne.n	800bc48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f022 0216 	bic.w	r2, r2, #22
 800bbe8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	695a      	ldr	r2, [r3, #20]
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d103      	bne.n	800bc0a <HAL_DMA_IRQHandler+0x1da>
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d007      	beq.n	800bc1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	f022 0208 	bic.w	r2, r2, #8
 800bc18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc1e:	223f      	movs	r2, #63	; 0x3f
 800bc20:	409a      	lsls	r2, r3
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2201      	movs	r2, #1
 800bc32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d07d      	beq.n	800bd3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	4798      	blx	r3
        }
        return;
 800bc46:	e078      	b.n	800bd3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d01c      	beq.n	800bc90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d108      	bne.n	800bc76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d030      	beq.n	800bcce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	4798      	blx	r3
 800bc74:	e02b      	b.n	800bcce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d027      	beq.n	800bcce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4798      	blx	r3
 800bc86:	e022      	b.n	800bcce <HAL_DMA_IRQHandler+0x29e>
 800bc88:	2000000c 	.word	0x2000000c
 800bc8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d10f      	bne.n	800bcbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f022 0210 	bic.w	r2, r2, #16
 800bcac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2201      	movs	r2, #1
 800bcba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d032      	beq.n	800bd3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcda:	f003 0301 	and.w	r3, r3, #1
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d022      	beq.n	800bd28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2205      	movs	r2, #5
 800bce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	681a      	ldr	r2, [r3, #0]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0201 	bic.w	r2, r2, #1
 800bcf8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800bcfa:	68bb      	ldr	r3, [r7, #8]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	60bb      	str	r3, [r7, #8]
 800bd00:	697a      	ldr	r2, [r7, #20]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d307      	bcc.n	800bd16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	f003 0301 	and.w	r3, r3, #1
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1f2      	bne.n	800bcfa <HAL_DMA_IRQHandler+0x2ca>
 800bd14:	e000      	b.n	800bd18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800bd16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d005      	beq.n	800bd3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd34:	6878      	ldr	r0, [r7, #4]
 800bd36:	4798      	blx	r3
 800bd38:	e000      	b.n	800bd3c <HAL_DMA_IRQHandler+0x30c>
        return;
 800bd3a:	bf00      	nop
    }
  }
}
 800bd3c:	3718      	adds	r7, #24
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop

0800bd44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	60f8      	str	r0, [r7, #12]
 800bd4c:	60b9      	str	r1, [r7, #8]
 800bd4e:	607a      	str	r2, [r7, #4]
 800bd50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	681a      	ldr	r2, [r3, #0]
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bd60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	683a      	ldr	r2, [r7, #0]
 800bd68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	2b40      	cmp	r3, #64	; 0x40
 800bd70:	d108      	bne.n	800bd84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	687a      	ldr	r2, [r7, #4]
 800bd78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	68ba      	ldr	r2, [r7, #8]
 800bd80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bd82:	e007      	b.n	800bd94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68ba      	ldr	r2, [r7, #8]
 800bd8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	687a      	ldr	r2, [r7, #4]
 800bd92:	60da      	str	r2, [r3, #12]
}
 800bd94:	bf00      	nop
 800bd96:	3714      	adds	r7, #20
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b085      	sub	sp, #20
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	3b10      	subs	r3, #16
 800bdb0:	4a13      	ldr	r2, [pc, #76]	; (800be00 <DMA_CalcBaseAndBitshift+0x60>)
 800bdb2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdb6:	091b      	lsrs	r3, r3, #4
 800bdb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bdba:	4a12      	ldr	r2, [pc, #72]	; (800be04 <DMA_CalcBaseAndBitshift+0x64>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	781b      	ldrb	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	2b03      	cmp	r3, #3
 800bdcc:	d908      	bls.n	800bde0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	4b0c      	ldr	r3, [pc, #48]	; (800be08 <DMA_CalcBaseAndBitshift+0x68>)
 800bdd6:	4013      	ands	r3, r2
 800bdd8:	1d1a      	adds	r2, r3, #4
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	659a      	str	r2, [r3, #88]	; 0x58
 800bdde:	e006      	b.n	800bdee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	461a      	mov	r2, r3
 800bde6:	4b08      	ldr	r3, [pc, #32]	; (800be08 <DMA_CalcBaseAndBitshift+0x68>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	687a      	ldr	r2, [r7, #4]
 800bdec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3714      	adds	r7, #20
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	aaaaaaab 	.word	0xaaaaaaab
 800be04:	080133f0 	.word	0x080133f0
 800be08:	fffffc00 	.word	0xfffffc00

0800be0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b085      	sub	sp, #20
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d11f      	bne.n	800be66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	2b03      	cmp	r3, #3
 800be2a:	d855      	bhi.n	800bed8 <DMA_CheckFifoParam+0xcc>
 800be2c:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <DMA_CheckFifoParam+0x28>)
 800be2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be32:	bf00      	nop
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be57 	.word	0x0800be57
 800be3c:	0800be45 	.word	0x0800be45
 800be40:	0800bed9 	.word	0x0800bed9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d045      	beq.n	800bedc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800be50:	2301      	movs	r3, #1
 800be52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be54:	e042      	b.n	800bedc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800be5e:	d13f      	bne.n	800bee0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800be60:	2301      	movs	r3, #1
 800be62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800be64:	e03c      	b.n	800bee0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	699b      	ldr	r3, [r3, #24]
 800be6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800be6e:	d121      	bne.n	800beb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	2b03      	cmp	r3, #3
 800be74:	d836      	bhi.n	800bee4 <DMA_CheckFifoParam+0xd8>
 800be76:	a201      	add	r2, pc, #4	; (adr r2, 800be7c <DMA_CheckFifoParam+0x70>)
 800be78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be7c:	0800be8d 	.word	0x0800be8d
 800be80:	0800be93 	.word	0x0800be93
 800be84:	0800be8d 	.word	0x0800be8d
 800be88:	0800bea5 	.word	0x0800bea5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	73fb      	strb	r3, [r7, #15]
      break;
 800be90:	e02f      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d024      	beq.n	800bee8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800be9e:	2301      	movs	r3, #1
 800bea0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bea2:	e021      	b.n	800bee8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bea8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800beac:	d11e      	bne.n	800beec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800beae:	2301      	movs	r3, #1
 800beb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800beb2:	e01b      	b.n	800beec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b02      	cmp	r3, #2
 800beb8:	d902      	bls.n	800bec0 <DMA_CheckFifoParam+0xb4>
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d003      	beq.n	800bec6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bebe:	e018      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800bec0:	2301      	movs	r3, #1
 800bec2:	73fb      	strb	r3, [r7, #15]
      break;
 800bec4:	e015      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d00e      	beq.n	800bef0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	73fb      	strb	r3, [r7, #15]
      break;
 800bed6:	e00b      	b.n	800bef0 <DMA_CheckFifoParam+0xe4>
      break;
 800bed8:	bf00      	nop
 800beda:	e00a      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bedc:	bf00      	nop
 800bede:	e008      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bee0:	bf00      	nop
 800bee2:	e006      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bee4:	bf00      	nop
 800bee6:	e004      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bee8:	bf00      	nop
 800beea:	e002      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;   
 800beec:	bf00      	nop
 800beee:	e000      	b.n	800bef2 <DMA_CheckFifoParam+0xe6>
      break;
 800bef0:	bf00      	nop
    }
  } 
  
  return status; 
 800bef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b089      	sub	sp, #36	; 0x24
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800bf12:	2300      	movs	r3, #0
 800bf14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800bf16:	2300      	movs	r3, #0
 800bf18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	61fb      	str	r3, [r7, #28]
 800bf1e:	e175      	b.n	800c20c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800bf20:	2201      	movs	r2, #1
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	fa02 f303 	lsl.w	r3, r2, r3
 800bf28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	697a      	ldr	r2, [r7, #20]
 800bf30:	4013      	ands	r3, r2
 800bf32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bf34:	693a      	ldr	r2, [r7, #16]
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	429a      	cmp	r2, r3
 800bf3a:	f040 8164 	bne.w	800c206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	685b      	ldr	r3, [r3, #4]
 800bf42:	2b01      	cmp	r3, #1
 800bf44:	d00b      	beq.n	800bf5e <HAL_GPIO_Init+0x5e>
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	2b02      	cmp	r3, #2
 800bf4c:	d007      	beq.n	800bf5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bf52:	2b11      	cmp	r3, #17
 800bf54:	d003      	beq.n	800bf5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	2b12      	cmp	r3, #18
 800bf5c:	d130      	bne.n	800bfc0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	005b      	lsls	r3, r3, #1
 800bf68:	2203      	movs	r2, #3
 800bf6a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6e:	43db      	mvns	r3, r3
 800bf70:	69ba      	ldr	r2, [r7, #24]
 800bf72:	4013      	ands	r3, r2
 800bf74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800bf76:	683b      	ldr	r3, [r7, #0]
 800bf78:	68da      	ldr	r2, [r3, #12]
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bf82:	69ba      	ldr	r2, [r7, #24]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bf94:	2201      	movs	r2, #1
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	fa02 f303 	lsl.w	r3, r2, r3
 800bf9c:	43db      	mvns	r3, r3
 800bf9e:	69ba      	ldr	r2, [r7, #24]
 800bfa0:	4013      	ands	r3, r2
 800bfa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	091b      	lsrs	r3, r3, #4
 800bfaa:	f003 0201 	and.w	r2, r3, #1
 800bfae:	69fb      	ldr	r3, [r7, #28]
 800bfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfb4:	69ba      	ldr	r2, [r7, #24]
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	69ba      	ldr	r2, [r7, #24]
 800bfbe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	68db      	ldr	r3, [r3, #12]
 800bfc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	005b      	lsls	r3, r3, #1
 800bfca:	2203      	movs	r2, #3
 800bfcc:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd0:	43db      	mvns	r3, r3
 800bfd2:	69ba      	ldr	r2, [r7, #24]
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	689a      	ldr	r2, [r3, #8]
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	005b      	lsls	r3, r3, #1
 800bfe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe4:	69ba      	ldr	r2, [r7, #24]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bff0:	683b      	ldr	r3, [r7, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	d003      	beq.n	800c000 <HAL_GPIO_Init+0x100>
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	2b12      	cmp	r3, #18
 800bffe:	d123      	bne.n	800c048 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	08da      	lsrs	r2, r3, #3
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	3208      	adds	r2, #8
 800c008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	f003 0307 	and.w	r3, r3, #7
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	220f      	movs	r2, #15
 800c018:	fa02 f303 	lsl.w	r3, r2, r3
 800c01c:	43db      	mvns	r3, r3
 800c01e:	69ba      	ldr	r2, [r7, #24]
 800c020:	4013      	ands	r3, r2
 800c022:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	691a      	ldr	r2, [r3, #16]
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	fa02 f303 	lsl.w	r3, r2, r3
 800c034:	69ba      	ldr	r2, [r7, #24]
 800c036:	4313      	orrs	r3, r2
 800c038:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	08da      	lsrs	r2, r3, #3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	3208      	adds	r2, #8
 800c042:	69b9      	ldr	r1, [r7, #24]
 800c044:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	005b      	lsls	r3, r3, #1
 800c052:	2203      	movs	r2, #3
 800c054:	fa02 f303 	lsl.w	r3, r2, r3
 800c058:	43db      	mvns	r3, r3
 800c05a:	69ba      	ldr	r2, [r7, #24]
 800c05c:	4013      	ands	r3, r2
 800c05e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f003 0203 	and.w	r2, r3, #3
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	005b      	lsls	r3, r3, #1
 800c06c:	fa02 f303 	lsl.w	r3, r2, r3
 800c070:	69ba      	ldr	r2, [r7, #24]
 800c072:	4313      	orrs	r3, r2
 800c074:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	69ba      	ldr	r2, [r7, #24]
 800c07a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c084:	2b00      	cmp	r3, #0
 800c086:	f000 80be 	beq.w	800c206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c08a:	4b65      	ldr	r3, [pc, #404]	; (800c220 <HAL_GPIO_Init+0x320>)
 800c08c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c08e:	4a64      	ldr	r2, [pc, #400]	; (800c220 <HAL_GPIO_Init+0x320>)
 800c090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c094:	6453      	str	r3, [r2, #68]	; 0x44
 800c096:	4b62      	ldr	r3, [pc, #392]	; (800c220 <HAL_GPIO_Init+0x320>)
 800c098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c09e:	60fb      	str	r3, [r7, #12]
 800c0a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800c0a2:	4a60      	ldr	r2, [pc, #384]	; (800c224 <HAL_GPIO_Init+0x324>)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	089b      	lsrs	r3, r3, #2
 800c0a8:	3302      	adds	r3, #2
 800c0aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f003 0303 	and.w	r3, r3, #3
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	220f      	movs	r2, #15
 800c0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c0be:	43db      	mvns	r3, r3
 800c0c0:	69ba      	ldr	r2, [r7, #24]
 800c0c2:	4013      	ands	r3, r2
 800c0c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a57      	ldr	r2, [pc, #348]	; (800c228 <HAL_GPIO_Init+0x328>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d037      	beq.n	800c13e <HAL_GPIO_Init+0x23e>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a56      	ldr	r2, [pc, #344]	; (800c22c <HAL_GPIO_Init+0x32c>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d031      	beq.n	800c13a <HAL_GPIO_Init+0x23a>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a55      	ldr	r2, [pc, #340]	; (800c230 <HAL_GPIO_Init+0x330>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d02b      	beq.n	800c136 <HAL_GPIO_Init+0x236>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a54      	ldr	r2, [pc, #336]	; (800c234 <HAL_GPIO_Init+0x334>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d025      	beq.n	800c132 <HAL_GPIO_Init+0x232>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a53      	ldr	r2, [pc, #332]	; (800c238 <HAL_GPIO_Init+0x338>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d01f      	beq.n	800c12e <HAL_GPIO_Init+0x22e>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a52      	ldr	r2, [pc, #328]	; (800c23c <HAL_GPIO_Init+0x33c>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d019      	beq.n	800c12a <HAL_GPIO_Init+0x22a>
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	4a51      	ldr	r2, [pc, #324]	; (800c240 <HAL_GPIO_Init+0x340>)
 800c0fa:	4293      	cmp	r3, r2
 800c0fc:	d013      	beq.n	800c126 <HAL_GPIO_Init+0x226>
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	4a50      	ldr	r2, [pc, #320]	; (800c244 <HAL_GPIO_Init+0x344>)
 800c102:	4293      	cmp	r3, r2
 800c104:	d00d      	beq.n	800c122 <HAL_GPIO_Init+0x222>
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a4f      	ldr	r2, [pc, #316]	; (800c248 <HAL_GPIO_Init+0x348>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d007      	beq.n	800c11e <HAL_GPIO_Init+0x21e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a4e      	ldr	r2, [pc, #312]	; (800c24c <HAL_GPIO_Init+0x34c>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d101      	bne.n	800c11a <HAL_GPIO_Init+0x21a>
 800c116:	2309      	movs	r3, #9
 800c118:	e012      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c11a:	230a      	movs	r3, #10
 800c11c:	e010      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c11e:	2308      	movs	r3, #8
 800c120:	e00e      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c122:	2307      	movs	r3, #7
 800c124:	e00c      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c126:	2306      	movs	r3, #6
 800c128:	e00a      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c12a:	2305      	movs	r3, #5
 800c12c:	e008      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c12e:	2304      	movs	r3, #4
 800c130:	e006      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c132:	2303      	movs	r3, #3
 800c134:	e004      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c136:	2302      	movs	r3, #2
 800c138:	e002      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e000      	b.n	800c140 <HAL_GPIO_Init+0x240>
 800c13e:	2300      	movs	r3, #0
 800c140:	69fa      	ldr	r2, [r7, #28]
 800c142:	f002 0203 	and.w	r2, r2, #3
 800c146:	0092      	lsls	r2, r2, #2
 800c148:	4093      	lsls	r3, r2
 800c14a:	69ba      	ldr	r2, [r7, #24]
 800c14c:	4313      	orrs	r3, r2
 800c14e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800c150:	4934      	ldr	r1, [pc, #208]	; (800c224 <HAL_GPIO_Init+0x324>)
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	089b      	lsrs	r3, r3, #2
 800c156:	3302      	adds	r3, #2
 800c158:	69ba      	ldr	r2, [r7, #24]
 800c15a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800c15e:	4b3c      	ldr	r3, [pc, #240]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	43db      	mvns	r3, r3
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	4013      	ands	r3, r2
 800c16c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	685b      	ldr	r3, [r3, #4]
 800c172:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	4313      	orrs	r3, r2
 800c180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800c182:	4a33      	ldr	r2, [pc, #204]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800c188:	4b31      	ldr	r3, [pc, #196]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	43db      	mvns	r3, r3
 800c192:	69ba      	ldr	r2, [r7, #24]
 800c194:	4013      	ands	r3, r2
 800c196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800c1a4:	69ba      	ldr	r2, [r7, #24]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800c1ac:	4a28      	ldr	r2, [pc, #160]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800c1b2:	4b27      	ldr	r3, [pc, #156]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	43db      	mvns	r3, r3
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	4013      	ands	r3, r2
 800c1c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d003      	beq.n	800c1d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800c1ce:	69ba      	ldr	r2, [r7, #24]
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	4313      	orrs	r3, r2
 800c1d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800c1d6:	4a1e      	ldr	r2, [pc, #120]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c1d8:	69bb      	ldr	r3, [r7, #24]
 800c1da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800c1dc:	4b1c      	ldr	r3, [pc, #112]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c1de:	68db      	ldr	r3, [r3, #12]
 800c1e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	43db      	mvns	r3, r3
 800c1e6:	69ba      	ldr	r2, [r7, #24]
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	685b      	ldr	r3, [r3, #4]
 800c1f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d003      	beq.n	800c200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800c1f8:	69ba      	ldr	r2, [r7, #24]
 800c1fa:	693b      	ldr	r3, [r7, #16]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800c200:	4a13      	ldr	r2, [pc, #76]	; (800c250 <HAL_GPIO_Init+0x350>)
 800c202:	69bb      	ldr	r3, [r7, #24]
 800c204:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800c206:	69fb      	ldr	r3, [r7, #28]
 800c208:	3301      	adds	r3, #1
 800c20a:	61fb      	str	r3, [r7, #28]
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	2b0f      	cmp	r3, #15
 800c210:	f67f ae86 	bls.w	800bf20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800c214:	bf00      	nop
 800c216:	3724      	adds	r7, #36	; 0x24
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr
 800c220:	40023800 	.word	0x40023800
 800c224:	40013800 	.word	0x40013800
 800c228:	40020000 	.word	0x40020000
 800c22c:	40020400 	.word	0x40020400
 800c230:	40020800 	.word	0x40020800
 800c234:	40020c00 	.word	0x40020c00
 800c238:	40021000 	.word	0x40021000
 800c23c:	40021400 	.word	0x40021400
 800c240:	40021800 	.word	0x40021800
 800c244:	40021c00 	.word	0x40021c00
 800c248:	40022000 	.word	0x40022000
 800c24c:	40022400 	.word	0x40022400
 800c250:	40013c00 	.word	0x40013c00

0800c254 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	691a      	ldr	r2, [r3, #16]
 800c264:	887b      	ldrh	r3, [r7, #2]
 800c266:	4013      	ands	r3, r2
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c26c:	2301      	movs	r3, #1
 800c26e:	73fb      	strb	r3, [r7, #15]
 800c270:	e001      	b.n	800c276 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c276:	7bfb      	ldrb	r3, [r7, #15]
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3714      	adds	r7, #20
 800c27c:	46bd      	mov	sp, r7
 800c27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c282:	4770      	bx	lr

0800c284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c284:	b480      	push	{r7}
 800c286:	b083      	sub	sp, #12
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	460b      	mov	r3, r1
 800c28e:	807b      	strh	r3, [r7, #2]
 800c290:	4613      	mov	r3, r2
 800c292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c294:	787b      	ldrb	r3, [r7, #1]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d003      	beq.n	800c2a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c29a:	887a      	ldrh	r2, [r7, #2]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800c2a0:	e003      	b.n	800c2aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800c2a2:	887b      	ldrh	r3, [r7, #2]
 800c2a4:	041a      	lsls	r2, r3, #16
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	619a      	str	r2, [r3, #24]
}
 800c2aa:	bf00      	nop
 800c2ac:	370c      	adds	r7, #12
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b4:	4770      	bx	lr

0800c2b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c2b6:	b480      	push	{r7}
 800c2b8:	b083      	sub	sp, #12
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	695a      	ldr	r2, [r3, #20]
 800c2c6:	887b      	ldrh	r3, [r7, #2]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d004      	beq.n	800c2d8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c2ce:	887b      	ldrh	r3, [r7, #2]
 800c2d0:	041a      	lsls	r2, r3, #16
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800c2d6:	e002      	b.n	800c2de <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c2d8:	887a      	ldrh	r2, [r7, #2]
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	619a      	str	r2, [r3, #24]
}
 800c2de:	bf00      	nop
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr
	...

0800c2ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800c2f6:	4b08      	ldr	r3, [pc, #32]	; (800c318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c2f8:	695a      	ldr	r2, [r3, #20]
 800c2fa:	88fb      	ldrh	r3, [r7, #6]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d006      	beq.n	800c310 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800c302:	4a05      	ldr	r2, [pc, #20]	; (800c318 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c304:	88fb      	ldrh	r3, [r7, #6]
 800c306:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800c308:	88fb      	ldrh	r3, [r7, #6]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fd f88e 	bl	800942c <HAL_GPIO_EXTI_Callback>
  }
}
 800c310:	bf00      	nop
 800c312:	3708      	adds	r7, #8
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}
 800c318:	40013c00 	.word	0x40013c00

0800c31c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d101      	bne.n	800c32e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	e07f      	b.n	800c42e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	2200      	movs	r2, #0
 800c33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7fe fe46 	bl	800afd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2224      	movs	r2, #36	; 0x24
 800c34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	681a      	ldr	r2, [r3, #0]
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f022 0201 	bic.w	r2, r2, #1
 800c35e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	685a      	ldr	r2, [r3, #4]
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c36c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	689a      	ldr	r2, [r3, #8]
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c37c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	68db      	ldr	r3, [r3, #12]
 800c382:	2b01      	cmp	r3, #1
 800c384:	d107      	bne.n	800c396 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	689a      	ldr	r2, [r3, #8]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c392:	609a      	str	r2, [r3, #8]
 800c394:	e006      	b.n	800c3a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	689a      	ldr	r2, [r3, #8]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c3a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	2b02      	cmp	r3, #2
 800c3aa:	d104      	bne.n	800c3b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c3b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	6859      	ldr	r1, [r3, #4]
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681a      	ldr	r2, [r3, #0]
 800c3c0:	4b1d      	ldr	r3, [pc, #116]	; (800c438 <HAL_I2C_Init+0x11c>)
 800c3c2:	430b      	orrs	r3, r1
 800c3c4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	68da      	ldr	r2, [r3, #12]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c3d4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	691a      	ldr	r2, [r3, #16]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	695b      	ldr	r3, [r3, #20]
 800c3de:	ea42 0103 	orr.w	r1, r2, r3
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	699b      	ldr	r3, [r3, #24]
 800c3e6:	021a      	lsls	r2, r3, #8
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	430a      	orrs	r2, r1
 800c3ee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	69d9      	ldr	r1, [r3, #28]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6a1a      	ldr	r2, [r3, #32]
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	430a      	orrs	r2, r1
 800c3fe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	681a      	ldr	r2, [r3, #0]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	f042 0201 	orr.w	r2, r2, #1
 800c40e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2200      	movs	r2, #0
 800c414:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2220      	movs	r2, #32
 800c41a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2200      	movs	r2, #0
 800c422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2200      	movs	r2, #0
 800c428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c42c:	2300      	movs	r3, #0
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3708      	adds	r7, #8
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	02008000 	.word	0x02008000

0800c43c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af02      	add	r7, sp, #8
 800c442:	60f8      	str	r0, [r7, #12]
 800c444:	4608      	mov	r0, r1
 800c446:	4611      	mov	r1, r2
 800c448:	461a      	mov	r2, r3
 800c44a:	4603      	mov	r3, r0
 800c44c:	817b      	strh	r3, [r7, #10]
 800c44e:	460b      	mov	r3, r1
 800c450:	813b      	strh	r3, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c45c:	b2db      	uxtb	r3, r3
 800c45e:	2b20      	cmp	r3, #32
 800c460:	f040 80fd 	bne.w	800c65e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800c464:	6a3b      	ldr	r3, [r7, #32]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d002      	beq.n	800c470 <HAL_I2C_Mem_Read+0x34>
 800c46a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d105      	bne.n	800c47c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c476:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800c478:	2301      	movs	r3, #1
 800c47a:	e0f1      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c482:	2b01      	cmp	r3, #1
 800c484:	d101      	bne.n	800c48a <HAL_I2C_Mem_Read+0x4e>
 800c486:	2302      	movs	r3, #2
 800c488:	e0ea      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800c492:	f7ff f87f 	bl	800b594 <HAL_GetTick>
 800c496:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800c498:	697b      	ldr	r3, [r7, #20]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	2319      	movs	r3, #25
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c4a4:	68f8      	ldr	r0, [r7, #12]
 800c4a6:	f000 fde7 	bl	800d078 <I2C_WaitOnFlagUntilTimeout>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d001      	beq.n	800c4b4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	e0d5      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2222      	movs	r2, #34	; 0x22
 800c4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2240      	movs	r2, #64	; 0x40
 800c4c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	6a3a      	ldr	r2, [r7, #32]
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c4dc:	88f8      	ldrh	r0, [r7, #6]
 800c4de:	893a      	ldrh	r2, [r7, #8]
 800c4e0:	8979      	ldrh	r1, [r7, #10]
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	9301      	str	r3, [sp, #4]
 800c4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 fa7d 	bl	800c9ec <I2C_RequestMemoryRead>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d005      	beq.n	800c504 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800c500:	2301      	movs	r3, #1
 800c502:	e0ad      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c508:	b29b      	uxth	r3, r3
 800c50a:	2bff      	cmp	r3, #255	; 0xff
 800c50c:	d90e      	bls.n	800c52c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	22ff      	movs	r2, #255	; 0xff
 800c512:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	8979      	ldrh	r1, [r7, #10]
 800c51c:	4b52      	ldr	r3, [pc, #328]	; (800c668 <HAL_I2C_Mem_Read+0x22c>)
 800c51e:	9300      	str	r3, [sp, #0]
 800c520:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f000 fec9 	bl	800d2bc <I2C_TransferConfig>
 800c52a:	e00f      	b.n	800c54c <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c530:	b29a      	uxth	r2, r3
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c53a:	b2da      	uxtb	r2, r3
 800c53c:	8979      	ldrh	r1, [r7, #10]
 800c53e:	4b4a      	ldr	r3, [pc, #296]	; (800c668 <HAL_I2C_Mem_Read+0x22c>)
 800c540:	9300      	str	r3, [sp, #0]
 800c542:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c546:	68f8      	ldr	r0, [r7, #12]
 800c548:	f000 feb8 	bl	800d2bc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c552:	2200      	movs	r2, #0
 800c554:	2104      	movs	r1, #4
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f000 fd8e 	bl	800d078 <I2C_WaitOnFlagUntilTimeout>
 800c55c:	4603      	mov	r3, r0
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d001      	beq.n	800c566 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e07c      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c570:	b2d2      	uxtb	r2, r2
 800c572:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c578:	1c5a      	adds	r2, r3, #1
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c582:	3b01      	subs	r3, #1
 800c584:	b29a      	uxth	r2, r3
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c58e:	b29b      	uxth	r3, r3
 800c590:	3b01      	subs	r3, #1
 800c592:	b29a      	uxth	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d034      	beq.n	800c60c <HAL_I2C_Mem_Read+0x1d0>
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d130      	bne.n	800c60c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	9300      	str	r3, [sp, #0]
 800c5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	2180      	movs	r1, #128	; 0x80
 800c5b4:	68f8      	ldr	r0, [r7, #12]
 800c5b6:	f000 fd5f 	bl	800d078 <I2C_WaitOnFlagUntilTimeout>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d001      	beq.n	800c5c4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	e04d      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5c8:	b29b      	uxth	r3, r3
 800c5ca:	2bff      	cmp	r3, #255	; 0xff
 800c5cc:	d90e      	bls.n	800c5ec <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	22ff      	movs	r2, #255	; 0xff
 800c5d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5d8:	b2da      	uxtb	r2, r3
 800c5da:	8979      	ldrh	r1, [r7, #10]
 800c5dc:	2300      	movs	r3, #0
 800c5de:	9300      	str	r3, [sp, #0]
 800c5e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	f000 fe69 	bl	800d2bc <I2C_TransferConfig>
 800c5ea:	e00f      	b.n	800c60c <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c5f0:	b29a      	uxth	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c5fa:	b2da      	uxtb	r2, r3
 800c5fc:	8979      	ldrh	r1, [r7, #10]
 800c5fe:	2300      	movs	r3, #0
 800c600:	9300      	str	r3, [sp, #0]
 800c602:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	f000 fe58 	bl	800d2bc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c610:	b29b      	uxth	r3, r3
 800c612:	2b00      	cmp	r3, #0
 800c614:	d19a      	bne.n	800c54c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f000 fdac 	bl	800d178 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c620:	4603      	mov	r3, r0
 800c622:	2b00      	cmp	r3, #0
 800c624:	d001      	beq.n	800c62a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800c626:	2301      	movs	r3, #1
 800c628:	e01a      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	2220      	movs	r2, #32
 800c630:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	6859      	ldr	r1, [r3, #4]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	681a      	ldr	r2, [r3, #0]
 800c63c:	4b0b      	ldr	r3, [pc, #44]	; (800c66c <HAL_I2C_Mem_Read+0x230>)
 800c63e:	400b      	ands	r3, r1
 800c640:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2220      	movs	r2, #32
 800c646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	e000      	b.n	800c660 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800c65e:	2302      	movs	r3, #2
  }
}
 800c660:	4618      	mov	r0, r3
 800c662:	3718      	adds	r7, #24
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}
 800c668:	80002400 	.word	0x80002400
 800c66c:	fe00e800 	.word	0xfe00e800

0800c670 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	699b      	ldr	r3, [r3, #24]
 800c67e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d005      	beq.n	800c69c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c694:	68ba      	ldr	r2, [r7, #8]
 800c696:	68f9      	ldr	r1, [r7, #12]
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	4798      	blx	r3
  }
}
 800c69c:	bf00      	nop
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b086      	sub	sp, #24
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	699b      	ldr	r3, [r3, #24]
 800c6b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	0a1b      	lsrs	r3, r3, #8
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d010      	beq.n	800c6ea <HAL_I2C_ER_IRQHandler+0x46>
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	09db      	lsrs	r3, r3, #7
 800c6cc:	f003 0301 	and.w	r3, r3, #1
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d00a      	beq.n	800c6ea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6d8:	f043 0201 	orr.w	r2, r3, #1
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	0a9b      	lsrs	r3, r3, #10
 800c6ee:	f003 0301 	and.w	r3, r3, #1
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d010      	beq.n	800c718 <HAL_I2C_ER_IRQHandler+0x74>
 800c6f6:	693b      	ldr	r3, [r7, #16]
 800c6f8:	09db      	lsrs	r3, r3, #7
 800c6fa:	f003 0301 	and.w	r3, r3, #1
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d00a      	beq.n	800c718 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c706:	f043 0208 	orr.w	r2, r3, #8
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c716:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	0a5b      	lsrs	r3, r3, #9
 800c71c:	f003 0301 	and.w	r3, r3, #1
 800c720:	2b00      	cmp	r3, #0
 800c722:	d010      	beq.n	800c746 <HAL_I2C_ER_IRQHandler+0xa2>
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	09db      	lsrs	r3, r3, #7
 800c728:	f003 0301 	and.w	r3, r3, #1
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d00a      	beq.n	800c746 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c734:	f043 0202 	orr.w	r2, r3, #2
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c744:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c74a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f003 030b 	and.w	r3, r3, #11
 800c752:	2b00      	cmp	r3, #0
 800c754:	d003      	beq.n	800c75e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800c756:	68f9      	ldr	r1, [r7, #12]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 fb85 	bl	800ce68 <I2C_ITError>
  }
}
 800c75e:	bf00      	nop
 800c760:	3718      	adds	r7, #24
 800c762:	46bd      	mov	sp, r7
 800c764:	bd80      	pop	{r7, pc}

0800c766 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c766:	b480      	push	{r7}
 800c768:	b083      	sub	sp, #12
 800c76a:	af00      	add	r7, sp, #0
 800c76c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800c76e:	bf00      	nop
 800c770:	370c      	adds	r7, #12
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b083      	sub	sp, #12
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800c782:	bf00      	nop
 800c784:	370c      	adds	r7, #12
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr

0800c78e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800c78e:	b480      	push	{r7}
 800c790:	b083      	sub	sp, #12
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	460b      	mov	r3, r1
 800c798:	70fb      	strb	r3, [r7, #3]
 800c79a:	4613      	mov	r3, r2
 800c79c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800c79e:	bf00      	nop
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c7aa:	b480      	push	{r7}
 800c7ac:	b083      	sub	sp, #12
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800c7b2:	bf00      	nop
 800c7b4:	370c      	adds	r7, #12
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7bc:	4770      	bx	lr

0800c7be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800c7be:	b480      	push	{r7}
 800c7c0:	b083      	sub	sp, #12
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800c7c6:	bf00      	nop
 800c7c8:	370c      	adds	r7, #12
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr

0800c7d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800c7d2:	b480      	push	{r7}
 800c7d4:	b083      	sub	sp, #12
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800c7da:	bf00      	nop
 800c7dc:	370c      	adds	r7, #12
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr

0800c7e6 <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b086      	sub	sp, #24
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	60f8      	str	r0, [r7, #12]
 800c7ee:	60b9      	str	r1, [r7, #8]
 800c7f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c802:	2b01      	cmp	r3, #1
 800c804:	d101      	bne.n	800c80a <I2C_Slave_ISR_IT+0x24>
 800c806:	2302      	movs	r3, #2
 800c808:	e0ec      	b.n	800c9e4 <I2C_Slave_ISR_IT+0x1fe>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	2201      	movs	r2, #1
 800c80e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	095b      	lsrs	r3, r3, #5
 800c816:	f003 0301 	and.w	r3, r3, #1
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d009      	beq.n	800c832 <I2C_Slave_ISR_IT+0x4c>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	095b      	lsrs	r3, r3, #5
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d003      	beq.n	800c832 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800c82a:	6939      	ldr	r1, [r7, #16]
 800c82c:	68f8      	ldr	r0, [r7, #12]
 800c82e:	f000 f9f1 	bl	800cc14 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	091b      	lsrs	r3, r3, #4
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d04d      	beq.n	800c8da <I2C_Slave_ISR_IT+0xf4>
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	091b      	lsrs	r3, r3, #4
 800c842:	f003 0301 	and.w	r3, r3, #1
 800c846:	2b00      	cmp	r3, #0
 800c848:	d047      	beq.n	800c8da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c84e:	b29b      	uxth	r3, r3
 800c850:	2b00      	cmp	r3, #0
 800c852:	d128      	bne.n	800c8a6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME)) /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	2b28      	cmp	r3, #40	; 0x28
 800c85e:	d108      	bne.n	800c872 <I2C_Slave_ISR_IT+0x8c>
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c866:	d104      	bne.n	800c872 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800c868:	6939      	ldr	r1, [r7, #16]
 800c86a:	68f8      	ldr	r0, [r7, #12]
 800c86c:	f000 faa8 	bl	800cdc0 <I2C_ITListenCplt>
 800c870:	e032      	b.n	800c8d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	2b29      	cmp	r3, #41	; 0x29
 800c87c:	d10e      	bne.n	800c89c <I2C_Slave_ISR_IT+0xb6>
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c884:	d00a      	beq.n	800c89c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	2210      	movs	r2, #16
 800c88c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f000 fbaa 	bl	800cfe8 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c894:	68f8      	ldr	r0, [r7, #12]
 800c896:	f000 f97f 	bl	800cb98 <I2C_ITSlaveSeqCplt>
 800c89a:	e01d      	b.n	800c8d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2210      	movs	r2, #16
 800c8a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800c8a4:	e096      	b.n	800c9d4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2210      	movs	r2, #16
 800c8ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	f043 0204 	orr.w	r2, r3, #4
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d004      	beq.n	800c8ca <I2C_Slave_ISR_IT+0xe4>
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c8c6:	f040 8085 	bne.w	800c9d4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 fac9 	bl	800ce68 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800c8d6:	e07d      	b.n	800c9d4 <I2C_Slave_ISR_IT+0x1ee>
 800c8d8:	e07c      	b.n	800c9d4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	089b      	lsrs	r3, r3, #2
 800c8de:	f003 0301 	and.w	r3, r3, #1
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d030      	beq.n	800c948 <I2C_Slave_ISR_IT+0x162>
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	089b      	lsrs	r3, r3, #2
 800c8ea:	f003 0301 	and.w	r3, r3, #1
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d02a      	beq.n	800c948 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c8f6:	b29b      	uxth	r3, r3
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d018      	beq.n	800c92e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90e:	1c5a      	adds	r2, r3, #1
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c918:	3b01      	subs	r3, #1
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c924:	b29b      	uxth	r3, r3
 800c926:	3b01      	subs	r3, #1
 800c928:	b29a      	uxth	r2, r3
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c932:	b29b      	uxth	r3, r3
 800c934:	2b00      	cmp	r3, #0
 800c936:	d14f      	bne.n	800c9d8 <I2C_Slave_ISR_IT+0x1f2>
 800c938:	697b      	ldr	r3, [r7, #20]
 800c93a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800c93e:	d04b      	beq.n	800c9d8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f000 f929 	bl	800cb98 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800c946:	e047      	b.n	800c9d8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	08db      	lsrs	r3, r3, #3
 800c94c:	f003 0301 	and.w	r3, r3, #1
 800c950:	2b00      	cmp	r3, #0
 800c952:	d00a      	beq.n	800c96a <I2C_Slave_ISR_IT+0x184>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	08db      	lsrs	r3, r3, #3
 800c958:	f003 0301 	and.w	r3, r3, #1
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d004      	beq.n	800c96a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800c960:	6939      	ldr	r1, [r7, #16]
 800c962:	68f8      	ldr	r0, [r7, #12]
 800c964:	f000 f896 	bl	800ca94 <I2C_ITAddrCplt>
 800c968:	e037      	b.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	085b      	lsrs	r3, r3, #1
 800c96e:	f003 0301 	and.w	r3, r3, #1
 800c972:	2b00      	cmp	r3, #0
 800c974:	d031      	beq.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	085b      	lsrs	r3, r3, #1
 800c97a:	f003 0301 	and.w	r3, r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d02b      	beq.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Datas have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c986:	b29b      	uxth	r3, r3
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d018      	beq.n	800c9be <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c990:	781a      	ldrb	r2, [r3, #0]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	3b01      	subs	r3, #1
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b4:	3b01      	subs	r3, #1
 800c9b6:	b29a      	uxth	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	851a      	strh	r2, [r3, #40]	; 0x28
 800c9bc:	e00d      	b.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800c9be:	697b      	ldr	r3, [r7, #20]
 800c9c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c9c4:	d002      	beq.n	800c9cc <I2C_Slave_ISR_IT+0x1e6>
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d106      	bne.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800c9cc:	68f8      	ldr	r0, [r7, #12]
 800c9ce:	f000 f8e3 	bl	800cb98 <I2C_ITSlaveSeqCplt>
 800c9d2:	e002      	b.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800c9d4:	bf00      	nop
 800c9d6:	e000      	b.n	800c9da <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800c9d8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2200      	movs	r2, #0
 800c9de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af02      	add	r7, sp, #8
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	4608      	mov	r0, r1
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	461a      	mov	r2, r3
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	817b      	strh	r3, [r7, #10]
 800c9fe:	460b      	mov	r3, r1
 800ca00:	813b      	strh	r3, [r7, #8]
 800ca02:	4613      	mov	r3, r2
 800ca04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ca06:	88fb      	ldrh	r3, [r7, #6]
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	8979      	ldrh	r1, [r7, #10]
 800ca0c:	4b20      	ldr	r3, [pc, #128]	; (800ca90 <I2C_RequestMemoryRead+0xa4>)
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	2300      	movs	r3, #0
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 fc52 	bl	800d2bc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca18:	69fa      	ldr	r2, [r7, #28]
 800ca1a:	69b9      	ldr	r1, [r7, #24]
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f000 fb6b 	bl	800d0f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca22:	4603      	mov	r3, r0
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d001      	beq.n	800ca2c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e02c      	b.n	800ca86 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ca2c:	88fb      	ldrh	r3, [r7, #6]
 800ca2e:	2b01      	cmp	r3, #1
 800ca30:	d105      	bne.n	800ca3e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca32:	893b      	ldrh	r3, [r7, #8]
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	629a      	str	r2, [r3, #40]	; 0x28
 800ca3c:	e015      	b.n	800ca6a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ca3e:	893b      	ldrh	r3, [r7, #8]
 800ca40:	0a1b      	lsrs	r3, r3, #8
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	b2da      	uxtb	r2, r3
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ca4c:	69fa      	ldr	r2, [r7, #28]
 800ca4e:	69b9      	ldr	r1, [r7, #24]
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 fb51 	bl	800d0f8 <I2C_WaitOnTXISFlagUntilTimeout>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d001      	beq.n	800ca60 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e012      	b.n	800ca86 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ca60:	893b      	ldrh	r3, [r7, #8]
 800ca62:	b2da      	uxtb	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ca6a:	69fb      	ldr	r3, [r7, #28]
 800ca6c:	9300      	str	r3, [sp, #0]
 800ca6e:	69bb      	ldr	r3, [r7, #24]
 800ca70:	2200      	movs	r2, #0
 800ca72:	2140      	movs	r1, #64	; 0x40
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f000 faff 	bl	800d078 <I2C_WaitOnFlagUntilTimeout>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ca80:	2301      	movs	r3, #1
 800ca82:	e000      	b.n	800ca86 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ca84:	2300      	movs	r3, #0
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3710      	adds	r7, #16
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	80002000 	.word	0x80002000

0800ca94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800caaa:	2b28      	cmp	r3, #40	; 0x28
 800caac:	d168      	bne.n	800cb80 <I2C_ITAddrCplt+0xec>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	699b      	ldr	r3, [r3, #24]
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	b2db      	uxtb	r3, r3
 800cab8:	f003 0301 	and.w	r3, r3, #1
 800cabc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	699b      	ldr	r3, [r3, #24]
 800cac4:	0c1b      	lsrs	r3, r3, #16
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cacc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	689b      	ldr	r3, [r3, #8]
 800cad4:	b29b      	uxth	r3, r3
 800cad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cada:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800cae8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	2b02      	cmp	r3, #2
 800caf0:	d137      	bne.n	800cb62 <I2C_ITAddrCplt+0xce>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 800caf2:	897b      	ldrh	r3, [r7, #10]
 800caf4:	09db      	lsrs	r3, r3, #7
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	89bb      	ldrh	r3, [r7, #12]
 800cafa:	4053      	eors	r3, r2
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	f003 0306 	and.w	r3, r3, #6
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d11c      	bne.n	800cb40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800cb06:	897b      	ldrh	r3, [r7, #10]
 800cb08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cb18:	2b02      	cmp	r3, #2
 800cb1a:	d139      	bne.n	800cb90 <I2C_ITAddrCplt+0xfc>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	2208      	movs	r2, #8
 800cb28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb32:	89ba      	ldrh	r2, [r7, #12]
 800cb34:	7bfb      	ldrb	r3, [r7, #15]
 800cb36:	4619      	mov	r1, r3
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	f7ff fe28 	bl	800c78e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800cb3e:	e027      	b.n	800cb90 <I2C_ITAddrCplt+0xfc>
        slaveaddrcode = ownadd2code;
 800cb40:	893b      	ldrh	r3, [r7, #8]
 800cb42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cb44:	2104      	movs	r1, #4
 800cb46:	6878      	ldr	r0, [r7, #4]
 800cb48:	f000 fbe6 	bl	800d318 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb54:	89ba      	ldrh	r2, [r7, #12]
 800cb56:	7bfb      	ldrb	r3, [r7, #15]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7ff fe17 	bl	800c78e <HAL_I2C_AddrCallback>
}
 800cb60:	e016      	b.n	800cb90 <I2C_ITAddrCplt+0xfc>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800cb62:	2104      	movs	r1, #4
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fbd7 	bl	800d318 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800cb72:	89ba      	ldrh	r2, [r7, #12]
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f7ff fe08 	bl	800c78e <HAL_I2C_AddrCallback>
}
 800cb7e:	e007      	b.n	800cb90 <I2C_ITAddrCplt+0xfc>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	2208      	movs	r2, #8
 800cb86:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800cb90:	bf00      	nop
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbae:	b2db      	uxtb	r3, r3
 800cbb0:	2b29      	cmp	r3, #41	; 0x29
 800cbb2:	d112      	bne.n	800cbda <I2C_ITSlaveSeqCplt+0x42>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2228      	movs	r2, #40	; 0x28
 800cbb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	2221      	movs	r2, #33	; 0x21
 800cbc0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800cbc2:	2101      	movs	r1, #1
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	f000 fba7 	bl	800d318 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2200      	movs	r2, #0
 800cbce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cbd2:	6878      	ldr	r0, [r7, #4]
 800cbd4:	f7ff fdc7 	bl	800c766 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cbd8:	e017      	b.n	800cc0a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cbe0:	b2db      	uxtb	r3, r3
 800cbe2:	2b2a      	cmp	r3, #42	; 0x2a
 800cbe4:	d111      	bne.n	800cc0a <I2C_ITSlaveSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2228      	movs	r2, #40	; 0x28
 800cbea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2222      	movs	r2, #34	; 0x22
 800cbf2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cbf4:	2102      	movs	r1, #2
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 fb8e 	bl	800d318 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff fdb8 	bl	800c77a <HAL_I2C_SlaveRxCpltCallback>
}
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
	...

0800cc14 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	60bb      	str	r3, [r7, #8]
  uint32_t tmpITFlags = ITFlags;
 800cc26:	683b      	ldr	r3, [r7, #0]
 800cc28:	60fb      	str	r3, [r7, #12]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2220      	movs	r2, #32
 800cc30:	61da      	str	r2, [r3, #28]

  /* Disable all interrupts */
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800cc32:	2107      	movs	r1, #7
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fb6f 	bl	800d318 <I2C_Disable_IRQ>

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	685a      	ldr	r2, [r3, #4]
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cc48:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	6859      	ldr	r1, [r3, #4]
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	4b58      	ldr	r3, [pc, #352]	; (800cdb8 <I2C_ITSlaveCplt+0x1a4>)
 800cc56:	400b      	ands	r3, r1
 800cc58:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f9c4 	bl	800cfe8 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800cc60:	68bb      	ldr	r3, [r7, #8]
 800cc62:	0b9b      	lsrs	r3, r3, #14
 800cc64:	f003 0301 	and.w	r3, r3, #1
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d00b      	beq.n	800cc84 <I2C_ITSlaveCplt+0x70>
  {
    if (hi2c->hdmatx != NULL)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d018      	beq.n	800cca6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	b29a      	uxth	r2, r3
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cc82:	e010      	b.n	800cca6 <I2C_ITSlaveCplt+0x92>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800cc84:	68bb      	ldr	r3, [r7, #8]
 800cc86:	0bdb      	lsrs	r3, r3, #15
 800cc88:	f003 0301 	and.w	r3, r3, #1
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <I2C_ITSlaveCplt+0x92>
  {
    if (hi2c->hdmarx != NULL)
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d006      	beq.n	800cca6 <I2C_ITSlaveCplt+0x92>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	685b      	ldr	r3, [r3, #4]
 800cca0:	b29a      	uxth	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	089b      	lsrs	r3, r3, #2
 800ccaa:	f003 0301 	and.w	r3, r3, #1
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d020      	beq.n	800ccf4 <I2C_ITSlaveCplt+0xe0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f023 0304 	bic.w	r3, r3, #4
 800ccb8:	60fb      	str	r3, [r7, #12]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	b2d2      	uxtb	r2, r2
 800ccc6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00c      	beq.n	800ccf4 <I2C_ITSlaveCplt+0xe0>
    {
      hi2c->XferSize--;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccde:	3b01      	subs	r3, #1
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccea:	b29b      	uxth	r3, r3
 800ccec:	3b01      	subs	r3, #1
 800ccee:	b29a      	uxth	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d005      	beq.n	800cd0a <I2C_ITSlaveCplt+0xf6>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd02:	f043 0204 	orr.w	r2, r3, #4
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->PreviousState = I2C_STATE_NONE;
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d010      	beq.n	800cd48 <I2C_ITSlaveCplt+0x134>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd2a:	4619      	mov	r1, r3
 800cd2c:	6878      	ldr	r0, [r7, #4]
 800cd2e:	f000 f89b 	bl	800ce68 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd38:	b2db      	uxtb	r3, r3
 800cd3a:	2b28      	cmp	r3, #40	; 0x28
 800cd3c:	d138      	bne.n	800cdb0 <I2C_ITSlaveCplt+0x19c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800cd3e:	68f9      	ldr	r1, [r7, #12]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f83d 	bl	800cdc0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cd46:	e033      	b.n	800cdb0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cd50:	d011      	beq.n	800cd76 <I2C_ITSlaveCplt+0x162>
    I2C_ITSlaveSeqCplt(hi2c);
 800cd52:	6878      	ldr	r0, [r7, #4]
 800cd54:	f7ff ff20 	bl	800cb98 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	4a18      	ldr	r2, [pc, #96]	; (800cdbc <I2C_ITSlaveCplt+0x1a8>)
 800cd5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	2220      	movs	r2, #32
 800cd62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff fd1b 	bl	800c7aa <HAL_I2C_ListenCpltCallback>
}
 800cd74:	e01c      	b.n	800cdb0 <I2C_ITSlaveCplt+0x19c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd7c:	b2db      	uxtb	r3, r3
 800cd7e:	2b22      	cmp	r3, #34	; 0x22
 800cd80:	d10b      	bne.n	800cd9a <I2C_ITSlaveCplt+0x186>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2220      	movs	r2, #32
 800cd86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff fcf1 	bl	800c77a <HAL_I2C_SlaveRxCpltCallback>
}
 800cd98:	e00a      	b.n	800cdb0 <I2C_ITSlaveCplt+0x19c>
    hi2c->State = HAL_I2C_STATE_READY;
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2220      	movs	r2, #32
 800cd9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2200      	movs	r2, #0
 800cda6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7ff fcdb 	bl	800c766 <HAL_I2C_SlaveTxCpltCallback>
}
 800cdb0:	bf00      	nop
 800cdb2:	3710      	adds	r7, #16
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	fe00e800 	.word	0xfe00e800
 800cdbc:	ffff0000 	.word	0xffff0000

0800cdc0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	4a25      	ldr	r2, [pc, #148]	; (800ce64 <I2C_ITListenCplt+0xa4>)
 800cdce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2220      	movs	r2, #32
 800cdda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2200      	movs	r2, #0
 800cdea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	089b      	lsrs	r3, r3, #2
 800cdf0:	f003 0301 	and.w	r3, r3, #1
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d022      	beq.n	800ce3e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	b2d2      	uxtb	r2, r2
 800ce04:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0a:	1c5a      	adds	r2, r3, #1
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d012      	beq.n	800ce3e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce1c:	3b01      	subs	r3, #1
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	3b01      	subs	r3, #1
 800ce2c:	b29a      	uxth	r2, r3
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce36:	f043 0204 	orr.w	r2, r3, #4
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ce3e:	2107      	movs	r1, #7
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fa69 	bl	800d318 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f7ff fca7 	bl	800c7aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800ce5c:	bf00      	nop
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	ffff0000 	.word	0xffff0000

0800ce68 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b084      	sub	sp, #16
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce78:	73fb      	strb	r3, [r7, #15]

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a55      	ldr	r2, [pc, #340]	; (800cfdc <I2C_ITError+0x174>)
 800ce86:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	431a      	orrs	r2, r3
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ce9a:	7bfb      	ldrb	r3, [r7, #15]
 800ce9c:	2b28      	cmp	r3, #40	; 0x28
 800ce9e:	d005      	beq.n	800ceac <I2C_ITError+0x44>
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
 800cea2:	2b29      	cmp	r3, #41	; 0x29
 800cea4:	d002      	beq.n	800ceac <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800cea6:	7bfb      	ldrb	r3, [r7, #15]
 800cea8:	2b2a      	cmp	r3, #42	; 0x2a
 800ceaa:	d10e      	bne.n	800ceca <I2C_ITError+0x62>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ceac:	2103      	movs	r1, #3
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fa32 	bl	800d318 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	2228      	movs	r2, #40	; 0x28
 800ceb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	2200      	movs	r2, #0
 800cec0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	4a46      	ldr	r2, [pc, #280]	; (800cfe0 <I2C_ITError+0x178>)
 800cec6:	635a      	str	r2, [r3, #52]	; 0x34
 800cec8:	e013      	b.n	800cef2 <I2C_ITError+0x8a>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ceca:	2107      	movs	r1, #7
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	f000 fa23 	bl	800d318 <I2C_Disable_IRQ>

    /* If state is an abort treatment on goind, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b60      	cmp	r3, #96	; 0x60
 800cedc:	d003      	beq.n	800cee6 <I2C_ITError+0x7e>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2220      	movs	r2, #32
 800cee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2200      	movs	r2, #0
 800ceea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2200      	movs	r2, #0
 800cef0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cefc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cf00:	d123      	bne.n	800cf4a <I2C_ITError+0xe2>
  {
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	681a      	ldr	r2, [r3, #0]
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf10:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d05c      	beq.n	800cfd4 <I2C_ITError+0x16c>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf1e:	4a31      	ldr	r2, [pc, #196]	; (800cfe4 <I2C_ITError+0x17c>)
 800cf20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	2200      	movs	r2, #0
 800cf26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f7fe fd5c 	bl	800b9ec <HAL_DMA_Abort_IT>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d04c      	beq.n	800cfd4 <I2C_ITError+0x16c>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800cf44:	4610      	mov	r0, r2
 800cf46:	4798      	blx	r3
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800cf48:	e044      	b.n	800cfd4 <I2C_ITError+0x16c>
  else if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf58:	d123      	bne.n	800cfa2 <I2C_ITError+0x13a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cf68:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d030      	beq.n	800cfd4 <I2C_ITError+0x16c>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf76:	4a1b      	ldr	r2, [pc, #108]	; (800cfe4 <I2C_ITError+0x17c>)
 800cf78:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fe fd30 	bl	800b9ec <HAL_DMA_Abort_IT>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d020      	beq.n	800cfd4 <I2C_ITError+0x16c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800cf9c:	4610      	mov	r0, r2
 800cf9e:	4798      	blx	r3
}
 800cfa0:	e018      	b.n	800cfd4 <I2C_ITError+0x16c>
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b60      	cmp	r3, #96	; 0x60
 800cfac:	d10b      	bne.n	800cfc6 <I2C_ITError+0x15e>
    hi2c->State = HAL_I2C_STATE_READY;
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	2220      	movs	r2, #32
 800cfb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f7ff fc07 	bl	800c7d2 <HAL_I2C_AbortCpltCallback>
}
 800cfc4:	e006      	b.n	800cfd4 <I2C_ITError+0x16c>
    __HAL_UNLOCK(hi2c);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f7ff fbf5 	bl	800c7be <HAL_I2C_ErrorCallback>
}
 800cfd4:	bf00      	nop
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}
 800cfdc:	ffff0000 	.word	0xffff0000
 800cfe0:	0800c7e7 	.word	0x0800c7e7
 800cfe4:	0800d031 	.word	0x0800d031

0800cfe8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	699b      	ldr	r3, [r3, #24]
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d103      	bne.n	800d006 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2200      	movs	r2, #0
 800d004:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	699b      	ldr	r3, [r3, #24]
 800d00c:	f003 0301 	and.w	r3, r3, #1
 800d010:	2b01      	cmp	r3, #1
 800d012:	d007      	beq.n	800d024 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	699a      	ldr	r2, [r3, #24]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f042 0201 	orr.w	r2, r2, #1
 800d022:	619a      	str	r2, [r3, #24]
  }
}
 800d024:	bf00      	nop
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr

0800d030 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03c:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d042:	2200      	movs	r2, #0
 800d044:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d04a:	2200      	movs	r2, #0
 800d04c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b60      	cmp	r3, #96	; 0x60
 800d058:	d107      	bne.n	800d06a <I2C_DMAAbort+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2220      	movs	r2, #32
 800d05e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f7ff fbb5 	bl	800c7d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800d068:	e002      	b.n	800d070 <I2C_DMAAbort+0x40>
    HAL_I2C_ErrorCallback(hi2c);
 800d06a:	68f8      	ldr	r0, [r7, #12]
 800d06c:	f7ff fba7 	bl	800c7be <HAL_I2C_ErrorCallback>
}
 800d070:	bf00      	nop
 800d072:	3710      	adds	r7, #16
 800d074:	46bd      	mov	sp, r7
 800d076:	bd80      	pop	{r7, pc}

0800d078 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800d078:	b580      	push	{r7, lr}
 800d07a:	b084      	sub	sp, #16
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	603b      	str	r3, [r7, #0]
 800d084:	4613      	mov	r3, r2
 800d086:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d088:	e022      	b.n	800d0d0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d090:	d01e      	beq.n	800d0d0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d092:	f7fe fa7f 	bl	800b594 <HAL_GetTick>
 800d096:	4602      	mov	r2, r0
 800d098:	69bb      	ldr	r3, [r7, #24]
 800d09a:	1ad3      	subs	r3, r2, r3
 800d09c:	683a      	ldr	r2, [r7, #0]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d302      	bcc.n	800d0a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d113      	bne.n	800d0d0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ac:	f043 0220 	orr.w	r2, r3, #32
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	2220      	movs	r2, #32
 800d0b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e00f      	b.n	800d0f0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	699a      	ldr	r2, [r3, #24]
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	4013      	ands	r3, r2
 800d0da:	68ba      	ldr	r2, [r7, #8]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	bf0c      	ite	eq
 800d0e0:	2301      	moveq	r3, #1
 800d0e2:	2300      	movne	r3, #0
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	79fb      	ldrb	r3, [r7, #7]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d0cd      	beq.n	800d08a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d0ee:	2300      	movs	r3, #0
}
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	3710      	adds	r7, #16
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b084      	sub	sp, #16
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	60f8      	str	r0, [r7, #12]
 800d100:	60b9      	str	r1, [r7, #8]
 800d102:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d104:	e02c      	b.n	800d160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	68b9      	ldr	r1, [r7, #8]
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f000 f870 	bl	800d1f0 <I2C_IsAcknowledgeFailed>
 800d110:	4603      	mov	r3, r0
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d116:	2301      	movs	r3, #1
 800d118:	e02a      	b.n	800d170 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d120:	d01e      	beq.n	800d160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d122:	f7fe fa37 	bl	800b594 <HAL_GetTick>
 800d126:	4602      	mov	r2, r0
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	429a      	cmp	r2, r3
 800d130:	d302      	bcc.n	800d138 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d113      	bne.n	800d160 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d13c:	f043 0220 	orr.w	r2, r3, #32
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2220      	movs	r2, #32
 800d148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2200      	movs	r2, #0
 800d150:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e007      	b.n	800d170 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	f003 0302 	and.w	r3, r3, #2
 800d16a:	2b02      	cmp	r3, #2
 800d16c:	d1cb      	bne.n	800d106 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d16e:	2300      	movs	r3, #0
}
 800d170:	4618      	mov	r0, r3
 800d172:	3710      	adds	r7, #16
 800d174:	46bd      	mov	sp, r7
 800d176:	bd80      	pop	{r7, pc}

0800d178 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b084      	sub	sp, #16
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d184:	e028      	b.n	800d1d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	68b9      	ldr	r1, [r7, #8]
 800d18a:	68f8      	ldr	r0, [r7, #12]
 800d18c:	f000 f830 	bl	800d1f0 <I2C_IsAcknowledgeFailed>
 800d190:	4603      	mov	r3, r0
 800d192:	2b00      	cmp	r3, #0
 800d194:	d001      	beq.n	800d19a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d196:	2301      	movs	r3, #1
 800d198:	e026      	b.n	800d1e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d19a:	f7fe f9fb 	bl	800b594 <HAL_GetTick>
 800d19e:	4602      	mov	r2, r0
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	68ba      	ldr	r2, [r7, #8]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d302      	bcc.n	800d1b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d113      	bne.n	800d1d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1b4:	f043 0220 	orr.w	r2, r3, #32
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2220      	movs	r2, #32
 800d1c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1c4:	68fb      	ldr	r3, [r7, #12]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e007      	b.n	800d1e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	699b      	ldr	r3, [r3, #24]
 800d1de:	f003 0320 	and.w	r3, r3, #32
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	d1cf      	bne.n	800d186 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d1e6:	2300      	movs	r3, #0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	699b      	ldr	r3, [r3, #24]
 800d202:	f003 0310 	and.w	r3, r3, #16
 800d206:	2b10      	cmp	r3, #16
 800d208:	d151      	bne.n	800d2ae <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d20a:	e022      	b.n	800d252 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d212:	d01e      	beq.n	800d252 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d214:	f7fe f9be 	bl	800b594 <HAL_GetTick>
 800d218:	4602      	mov	r2, r0
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	68ba      	ldr	r2, [r7, #8]
 800d220:	429a      	cmp	r2, r3
 800d222:	d302      	bcc.n	800d22a <I2C_IsAcknowledgeFailed+0x3a>
 800d224:	68bb      	ldr	r3, [r7, #8]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d113      	bne.n	800d252 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d22e:	f043 0220 	orr.w	r2, r3, #32
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2220      	movs	r2, #32
 800d23a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	2200      	movs	r2, #0
 800d242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	2200      	movs	r2, #0
 800d24a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e02e      	b.n	800d2b0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	699b      	ldr	r3, [r3, #24]
 800d258:	f003 0320 	and.w	r3, r3, #32
 800d25c:	2b20      	cmp	r3, #32
 800d25e:	d1d5      	bne.n	800d20c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	2210      	movs	r2, #16
 800d266:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	2220      	movs	r2, #32
 800d26e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d270:	68f8      	ldr	r0, [r7, #12]
 800d272:	f7ff feb9 	bl	800cfe8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6859      	ldr	r1, [r3, #4]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681a      	ldr	r2, [r3, #0]
 800d280:	4b0d      	ldr	r3, [pc, #52]	; (800d2b8 <I2C_IsAcknowledgeFailed+0xc8>)
 800d282:	400b      	ands	r3, r1
 800d284:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d28a:	f043 0204 	orr.w	r2, r3, #4
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2220      	movs	r2, #32
 800d296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2200      	movs	r2, #0
 800d29e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e000      	b.n	800d2b0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800d2ae:	2300      	movs	r3, #0
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	fe00e800 	.word	0xfe00e800

0800d2bc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 800d2bc:	b480      	push	{r7}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	60f8      	str	r0, [r7, #12]
 800d2c4:	607b      	str	r3, [r7, #4]
 800d2c6:	460b      	mov	r3, r1
 800d2c8:	817b      	strh	r3, [r7, #10]
 800d2ca:	4613      	mov	r3, r2
 800d2cc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	685a      	ldr	r2, [r3, #4]
 800d2d4:	69bb      	ldr	r3, [r7, #24]
 800d2d6:	0d5b      	lsrs	r3, r3, #21
 800d2d8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d2dc:	4b0d      	ldr	r3, [pc, #52]	; (800d314 <I2C_TransferConfig+0x58>)
 800d2de:	430b      	orrs	r3, r1
 800d2e0:	43db      	mvns	r3, r3
 800d2e2:	ea02 0103 	and.w	r1, r2, r3
 800d2e6:	897b      	ldrh	r3, [r7, #10]
 800d2e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d2ec:	7a7b      	ldrb	r3, [r7, #9]
 800d2ee:	041b      	lsls	r3, r3, #16
 800d2f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d2f4:	431a      	orrs	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	431a      	orrs	r2, r3
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	431a      	orrs	r2, r3
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	430a      	orrs	r2, r1
 800d304:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d306:	bf00      	nop
 800d308:	3714      	adds	r7, #20
 800d30a:	46bd      	mov	sp, r7
 800d30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d310:	4770      	bx	lr
 800d312:	bf00      	nop
 800d314:	03ff63ff 	.word	0x03ff63ff

0800d318 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800d318:	b480      	push	{r7}
 800d31a:	b085      	sub	sp, #20
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800d324:	2300      	movs	r3, #0
 800d326:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800d328:	887b      	ldrh	r3, [r7, #2]
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d00f      	beq.n	800d352 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800d338:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d340:	b2db      	uxtb	r3, r3
 800d342:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d346:	2b28      	cmp	r3, #40	; 0x28
 800d348:	d003      	beq.n	800d352 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d350:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800d352:	887b      	ldrh	r3, [r7, #2]
 800d354:	f003 0302 	and.w	r3, r3, #2
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d00f      	beq.n	800d37c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800d362:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800d370:	2b28      	cmp	r3, #40	; 0x28
 800d372:	d003      	beq.n	800d37c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800d37a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800d37c:	887b      	ldrh	r3, [r7, #2]
 800d37e:	f003 0304 	and.w	r3, r3, #4
 800d382:	2b00      	cmp	r3, #0
 800d384:	d003      	beq.n	800d38e <I2C_Disable_IRQ+0x76>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800d38c:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_ERROR_IT) == I2C_XFER_ERROR_IT)
 800d38e:	887b      	ldrh	r3, [r7, #2]
 800d390:	f003 0311 	and.w	r3, r3, #17
 800d394:	2b11      	cmp	r3, #17
 800d396:	d103      	bne.n	800d3a0 <I2C_Disable_IRQ+0x88>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800d39e:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_CPLT_IT) == I2C_XFER_CPLT_IT)
 800d3a0:	887b      	ldrh	r3, [r7, #2]
 800d3a2:	f003 0312 	and.w	r3, r3, #18
 800d3a6:	2b12      	cmp	r3, #18
 800d3a8:	d103      	bne.n	800d3b2 <I2C_Disable_IRQ+0x9a>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	f043 0320 	orr.w	r3, r3, #32
 800d3b0:	60fb      	str	r3, [r7, #12]
  }

  if ((InterruptRequest & I2C_XFER_RELOAD_IT) == I2C_XFER_RELOAD_IT)
 800d3b2:	887b      	ldrh	r3, [r7, #2]
 800d3b4:	f003 0312 	and.w	r3, r3, #18
 800d3b8:	2b12      	cmp	r3, #18
 800d3ba:	d103      	bne.n	800d3c4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6819      	ldr	r1, [r3, #0]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	43da      	mvns	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	400a      	ands	r2, r1
 800d3d4:	601a      	str	r2, [r3, #0]
}
 800d3d6:	bf00      	nop
 800d3d8:	3714      	adds	r7, #20
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	b083      	sub	sp, #12
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
 800d3ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3f2:	b2db      	uxtb	r3, r3
 800d3f4:	2b20      	cmp	r3, #32
 800d3f6:	d138      	bne.n	800d46a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d101      	bne.n	800d406 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d402:	2302      	movs	r3, #2
 800d404:	e032      	b.n	800d46c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2201      	movs	r2, #1
 800d40a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	2224      	movs	r2, #36	; 0x24
 800d412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	681a      	ldr	r2, [r3, #0]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f022 0201 	bic.w	r2, r2, #1
 800d424:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	681a      	ldr	r2, [r3, #0]
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d434:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6819      	ldr	r1, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	683a      	ldr	r2, [r7, #0]
 800d442:	430a      	orrs	r2, r1
 800d444:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	681a      	ldr	r2, [r3, #0]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	f042 0201 	orr.w	r2, r2, #1
 800d454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2220      	movs	r2, #32
 800d45a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d466:	2300      	movs	r3, #0
 800d468:	e000      	b.n	800d46c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d46a:	2302      	movs	r3, #2
  }
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d478:	b480      	push	{r7}
 800d47a:	b085      	sub	sp, #20
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
 800d480:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b20      	cmp	r3, #32
 800d48c:	d139      	bne.n	800d502 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d494:	2b01      	cmp	r3, #1
 800d496:	d101      	bne.n	800d49c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d498:	2302      	movs	r3, #2
 800d49a:	e033      	b.n	800d504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2201      	movs	r2, #1
 800d4a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2224      	movs	r2, #36	; 0x24
 800d4a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	f022 0201 	bic.w	r2, r2, #1
 800d4ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d4ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	021b      	lsls	r3, r3, #8
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	4313      	orrs	r3, r2
 800d4d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	68fa      	ldr	r2, [r7, #12]
 800d4dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	681a      	ldr	r2, [r3, #0]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f042 0201 	orr.w	r2, r2, #1
 800d4ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2220      	movs	r2, #32
 800d4f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d4fe:	2300      	movs	r3, #0
 800d500:	e000      	b.n	800d504 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d502:	2302      	movs	r3, #2
  }
}
 800d504:	4618      	mov	r0, r3
 800d506:	3714      	adds	r7, #20
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b084      	sub	sp, #16
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d101      	bne.n	800d522 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800d51e:	2301      	movs	r3, #1
 800d520:	e038      	b.n	800d594 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800d52a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f245 5255 	movw	r2, #21845	; 0x5555
 800d534:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	687a      	ldr	r2, [r7, #4]
 800d53c:	6852      	ldr	r2, [r2, #4]
 800d53e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	6892      	ldr	r2, [r2, #8]
 800d548:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d54a:	f7fe f823 	bl	800b594 <HAL_GetTick>
 800d54e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800d550:	e008      	b.n	800d564 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d552:	f7fe f81f 	bl	800b594 <HAL_GetTick>
 800d556:	4602      	mov	r2, r0
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	2b30      	cmp	r3, #48	; 0x30
 800d55e:	d901      	bls.n	800d564 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e017      	b.n	800d594 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d1f1      	bne.n	800d552 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	691a      	ldr	r2, [r3, #16]
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	429a      	cmp	r2, r3
 800d57a:	d005      	beq.n	800d588 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	68d2      	ldr	r2, [r2, #12]
 800d584:	611a      	str	r2, [r3, #16]
 800d586:	e004      	b.n	800d592 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d592:	2300      	movs	r3, #0
}
 800d594:	4618      	mov	r0, r3
 800d596:	3710      	adds	r7, #16
 800d598:	46bd      	mov	sp, r7
 800d59a:	bd80      	pop	{r7, pc}

0800d59c <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d5ac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d5ae:	2300      	movs	r3, #0
}
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b082      	sub	sp, #8
 800d5c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800d5c6:	4b23      	ldr	r3, [pc, #140]	; (800d654 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ca:	4a22      	ldr	r2, [pc, #136]	; (800d654 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d5d0:	6413      	str	r3, [r2, #64]	; 0x40
 800d5d2:	4b20      	ldr	r3, [pc, #128]	; (800d654 <HAL_PWREx_EnableOverDrive+0x98>)
 800d5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d5da:	603b      	str	r3, [r7, #0]
 800d5dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800d5de:	4b1e      	ldr	r3, [pc, #120]	; (800d658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	4a1d      	ldr	r2, [pc, #116]	; (800d658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d5e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d5e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d5ea:	f7fd ffd3 	bl	800b594 <HAL_GetTick>
 800d5ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d5f0:	e009      	b.n	800d606 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d5f2:	f7fd ffcf 	bl	800b594 <HAL_GetTick>
 800d5f6:	4602      	mov	r2, r0
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	1ad3      	subs	r3, r2, r3
 800d5fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d600:	d901      	bls.n	800d606 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800d602:	2303      	movs	r3, #3
 800d604:	e022      	b.n	800d64c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800d606:	4b14      	ldr	r3, [pc, #80]	; (800d658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d608:	685b      	ldr	r3, [r3, #4]
 800d60a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d60e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d612:	d1ee      	bne.n	800d5f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800d614:	4b10      	ldr	r3, [pc, #64]	; (800d658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	4a0f      	ldr	r2, [pc, #60]	; (800d658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d61a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d61e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d620:	f7fd ffb8 	bl	800b594 <HAL_GetTick>
 800d624:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d626:	e009      	b.n	800d63c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800d628:	f7fd ffb4 	bl	800b594 <HAL_GetTick>
 800d62c:	4602      	mov	r2, r0
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	1ad3      	subs	r3, r2, r3
 800d632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d636:	d901      	bls.n	800d63c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800d638:	2303      	movs	r3, #3
 800d63a:	e007      	b.n	800d64c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800d63c:	4b06      	ldr	r3, [pc, #24]	; (800d658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d648:	d1ee      	bne.n	800d628 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800d64a:	2300      	movs	r3, #0
}
 800d64c:	4618      	mov	r0, r3
 800d64e:	3708      	adds	r7, #8
 800d650:	46bd      	mov	sp, r7
 800d652:	bd80      	pop	{r7, pc}
 800d654:	40023800 	.word	0x40023800
 800d658:	40007000 	.word	0x40007000

0800d65c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b086      	sub	sp, #24
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800d664:	2300      	movs	r3, #0
 800d666:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d101      	bne.n	800d672 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e29b      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	f003 0301 	and.w	r3, r3, #1
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	f000 8087 	beq.w	800d78e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d680:	4b96      	ldr	r3, [pc, #600]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d682:	689b      	ldr	r3, [r3, #8]
 800d684:	f003 030c 	and.w	r3, r3, #12
 800d688:	2b04      	cmp	r3, #4
 800d68a:	d00c      	beq.n	800d6a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d68c:	4b93      	ldr	r3, [pc, #588]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d68e:	689b      	ldr	r3, [r3, #8]
 800d690:	f003 030c 	and.w	r3, r3, #12
 800d694:	2b08      	cmp	r3, #8
 800d696:	d112      	bne.n	800d6be <HAL_RCC_OscConfig+0x62>
 800d698:	4b90      	ldr	r3, [pc, #576]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d69a:	685b      	ldr	r3, [r3, #4]
 800d69c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d6a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6a4:	d10b      	bne.n	800d6be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d6a6:	4b8d      	ldr	r3, [pc, #564]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d06c      	beq.n	800d78c <HAL_RCC_OscConfig+0x130>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	685b      	ldr	r3, [r3, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d168      	bne.n	800d78c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	e275      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6c6:	d106      	bne.n	800d6d6 <HAL_RCC_OscConfig+0x7a>
 800d6c8:	4b84      	ldr	r3, [pc, #528]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4a83      	ldr	r2, [pc, #524]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d6d2:	6013      	str	r3, [r2, #0]
 800d6d4:	e02e      	b.n	800d734 <HAL_RCC_OscConfig+0xd8>
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10c      	bne.n	800d6f8 <HAL_RCC_OscConfig+0x9c>
 800d6de:	4b7f      	ldr	r3, [pc, #508]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a7e      	ldr	r2, [pc, #504]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d6e8:	6013      	str	r3, [r2, #0]
 800d6ea:	4b7c      	ldr	r3, [pc, #496]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	4a7b      	ldr	r2, [pc, #492]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d6f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d6f4:	6013      	str	r3, [r2, #0]
 800d6f6:	e01d      	b.n	800d734 <HAL_RCC_OscConfig+0xd8>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	685b      	ldr	r3, [r3, #4]
 800d6fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d700:	d10c      	bne.n	800d71c <HAL_RCC_OscConfig+0xc0>
 800d702:	4b76      	ldr	r3, [pc, #472]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	4a75      	ldr	r2, [pc, #468]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	4b73      	ldr	r3, [pc, #460]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a72      	ldr	r2, [pc, #456]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d718:	6013      	str	r3, [r2, #0]
 800d71a:	e00b      	b.n	800d734 <HAL_RCC_OscConfig+0xd8>
 800d71c:	4b6f      	ldr	r3, [pc, #444]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	4a6e      	ldr	r2, [pc, #440]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d726:	6013      	str	r3, [r2, #0]
 800d728:	4b6c      	ldr	r3, [pc, #432]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	4a6b      	ldr	r2, [pc, #428]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d72e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	685b      	ldr	r3, [r3, #4]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d013      	beq.n	800d764 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d73c:	f7fd ff2a 	bl	800b594 <HAL_GetTick>
 800d740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d742:	e008      	b.n	800d756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d744:	f7fd ff26 	bl	800b594 <HAL_GetTick>
 800d748:	4602      	mov	r2, r0
 800d74a:	693b      	ldr	r3, [r7, #16]
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	2b64      	cmp	r3, #100	; 0x64
 800d750:	d901      	bls.n	800d756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d752:	2303      	movs	r3, #3
 800d754:	e229      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d756:	4b61      	ldr	r3, [pc, #388]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0f0      	beq.n	800d744 <HAL_RCC_OscConfig+0xe8>
 800d762:	e014      	b.n	800d78e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d764:	f7fd ff16 	bl	800b594 <HAL_GetTick>
 800d768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d76a:	e008      	b.n	800d77e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d76c:	f7fd ff12 	bl	800b594 <HAL_GetTick>
 800d770:	4602      	mov	r2, r0
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	2b64      	cmp	r3, #100	; 0x64
 800d778:	d901      	bls.n	800d77e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e215      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d77e:	4b57      	ldr	r3, [pc, #348]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1f0      	bne.n	800d76c <HAL_RCC_OscConfig+0x110>
 800d78a:	e000      	b.n	800d78e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d78c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	f003 0302 	and.w	r3, r3, #2
 800d796:	2b00      	cmp	r3, #0
 800d798:	d069      	beq.n	800d86e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d79a:	4b50      	ldr	r3, [pc, #320]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d79c:	689b      	ldr	r3, [r3, #8]
 800d79e:	f003 030c 	and.w	r3, r3, #12
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00b      	beq.n	800d7be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d7a6:	4b4d      	ldr	r3, [pc, #308]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7a8:	689b      	ldr	r3, [r3, #8]
 800d7aa:	f003 030c 	and.w	r3, r3, #12
 800d7ae:	2b08      	cmp	r3, #8
 800d7b0:	d11c      	bne.n	800d7ec <HAL_RCC_OscConfig+0x190>
 800d7b2:	4b4a      	ldr	r3, [pc, #296]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d116      	bne.n	800d7ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7be:	4b47      	ldr	r3, [pc, #284]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f003 0302 	and.w	r3, r3, #2
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d005      	beq.n	800d7d6 <HAL_RCC_OscConfig+0x17a>
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d001      	beq.n	800d7d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	e1e9      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d7d6:	4b41      	ldr	r3, [pc, #260]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	00db      	lsls	r3, r3, #3
 800d7e4:	493d      	ldr	r1, [pc, #244]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d7ea:	e040      	b.n	800d86e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d023      	beq.n	800d83c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d7f4:	4b39      	ldr	r3, [pc, #228]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a38      	ldr	r2, [pc, #224]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d7fa:	f043 0301 	orr.w	r3, r3, #1
 800d7fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d800:	f7fd fec8 	bl	800b594 <HAL_GetTick>
 800d804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d806:	e008      	b.n	800d81a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d808:	f7fd fec4 	bl	800b594 <HAL_GetTick>
 800d80c:	4602      	mov	r2, r0
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	2b02      	cmp	r3, #2
 800d814:	d901      	bls.n	800d81a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800d816:	2303      	movs	r3, #3
 800d818:	e1c7      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d81a:	4b30      	ldr	r3, [pc, #192]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f003 0302 	and.w	r3, r3, #2
 800d822:	2b00      	cmp	r3, #0
 800d824:	d0f0      	beq.n	800d808 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d826:	4b2d      	ldr	r3, [pc, #180]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	691b      	ldr	r3, [r3, #16]
 800d832:	00db      	lsls	r3, r3, #3
 800d834:	4929      	ldr	r1, [pc, #164]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d836:	4313      	orrs	r3, r2
 800d838:	600b      	str	r3, [r1, #0]
 800d83a:	e018      	b.n	800d86e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d83c:	4b27      	ldr	r3, [pc, #156]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a26      	ldr	r2, [pc, #152]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d842:	f023 0301 	bic.w	r3, r3, #1
 800d846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d848:	f7fd fea4 	bl	800b594 <HAL_GetTick>
 800d84c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d84e:	e008      	b.n	800d862 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d850:	f7fd fea0 	bl	800b594 <HAL_GetTick>
 800d854:	4602      	mov	r2, r0
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	1ad3      	subs	r3, r2, r3
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d901      	bls.n	800d862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800d85e:	2303      	movs	r3, #3
 800d860:	e1a3      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d862:	4b1e      	ldr	r3, [pc, #120]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f003 0302 	and.w	r3, r3, #2
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d1f0      	bne.n	800d850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f003 0308 	and.w	r3, r3, #8
 800d876:	2b00      	cmp	r3, #0
 800d878:	d038      	beq.n	800d8ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	695b      	ldr	r3, [r3, #20]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d019      	beq.n	800d8b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d882:	4b16      	ldr	r3, [pc, #88]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d886:	4a15      	ldr	r2, [pc, #84]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d888:	f043 0301 	orr.w	r3, r3, #1
 800d88c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d88e:	f7fd fe81 	bl	800b594 <HAL_GetTick>
 800d892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d894:	e008      	b.n	800d8a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d896:	f7fd fe7d 	bl	800b594 <HAL_GetTick>
 800d89a:	4602      	mov	r2, r0
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	1ad3      	subs	r3, r2, r3
 800d8a0:	2b02      	cmp	r3, #2
 800d8a2:	d901      	bls.n	800d8a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d8a4:	2303      	movs	r3, #3
 800d8a6:	e180      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d8a8:	4b0c      	ldr	r3, [pc, #48]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d8aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ac:	f003 0302 	and.w	r3, r3, #2
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0f0      	beq.n	800d896 <HAL_RCC_OscConfig+0x23a>
 800d8b4:	e01a      	b.n	800d8ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d8b6:	4b09      	ldr	r3, [pc, #36]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ba:	4a08      	ldr	r2, [pc, #32]	; (800d8dc <HAL_RCC_OscConfig+0x280>)
 800d8bc:	f023 0301 	bic.w	r3, r3, #1
 800d8c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d8c2:	f7fd fe67 	bl	800b594 <HAL_GetTick>
 800d8c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8c8:	e00a      	b.n	800d8e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d8ca:	f7fd fe63 	bl	800b594 <HAL_GetTick>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d903      	bls.n	800d8e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	e166      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
 800d8dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d8e0:	4b92      	ldr	r3, [pc, #584]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d8e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8e4:	f003 0302 	and.w	r3, r3, #2
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1ee      	bne.n	800d8ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	f003 0304 	and.w	r3, r3, #4
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 80a4 	beq.w	800da42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d8fa:	4b8c      	ldr	r3, [pc, #560]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10d      	bne.n	800d922 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800d906:	4b89      	ldr	r3, [pc, #548]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d90a:	4a88      	ldr	r2, [pc, #544]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d90c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d910:	6413      	str	r3, [r2, #64]	; 0x40
 800d912:	4b86      	ldr	r3, [pc, #536]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d91a:	60bb      	str	r3, [r7, #8]
 800d91c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d91e:	2301      	movs	r3, #1
 800d920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d922:	4b83      	ldr	r3, [pc, #524]	; (800db30 <HAL_RCC_OscConfig+0x4d4>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d118      	bne.n	800d960 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800d92e:	4b80      	ldr	r3, [pc, #512]	; (800db30 <HAL_RCC_OscConfig+0x4d4>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	4a7f      	ldr	r2, [pc, #508]	; (800db30 <HAL_RCC_OscConfig+0x4d4>)
 800d934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d93a:	f7fd fe2b 	bl	800b594 <HAL_GetTick>
 800d93e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d940:	e008      	b.n	800d954 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d942:	f7fd fe27 	bl	800b594 <HAL_GetTick>
 800d946:	4602      	mov	r2, r0
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	1ad3      	subs	r3, r2, r3
 800d94c:	2b64      	cmp	r3, #100	; 0x64
 800d94e:	d901      	bls.n	800d954 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800d950:	2303      	movs	r3, #3
 800d952:	e12a      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d954:	4b76      	ldr	r3, [pc, #472]	; (800db30 <HAL_RCC_OscConfig+0x4d4>)
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d0f0      	beq.n	800d942 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	2b01      	cmp	r3, #1
 800d966:	d106      	bne.n	800d976 <HAL_RCC_OscConfig+0x31a>
 800d968:	4b70      	ldr	r3, [pc, #448]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d96a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96c:	4a6f      	ldr	r2, [pc, #444]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d96e:	f043 0301 	orr.w	r3, r3, #1
 800d972:	6713      	str	r3, [r2, #112]	; 0x70
 800d974:	e02d      	b.n	800d9d2 <HAL_RCC_OscConfig+0x376>
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d10c      	bne.n	800d998 <HAL_RCC_OscConfig+0x33c>
 800d97e:	4b6b      	ldr	r3, [pc, #428]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d982:	4a6a      	ldr	r2, [pc, #424]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d984:	f023 0301 	bic.w	r3, r3, #1
 800d988:	6713      	str	r3, [r2, #112]	; 0x70
 800d98a:	4b68      	ldr	r3, [pc, #416]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d98c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d98e:	4a67      	ldr	r2, [pc, #412]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d990:	f023 0304 	bic.w	r3, r3, #4
 800d994:	6713      	str	r3, [r2, #112]	; 0x70
 800d996:	e01c      	b.n	800d9d2 <HAL_RCC_OscConfig+0x376>
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	689b      	ldr	r3, [r3, #8]
 800d99c:	2b05      	cmp	r3, #5
 800d99e:	d10c      	bne.n	800d9ba <HAL_RCC_OscConfig+0x35e>
 800d9a0:	4b62      	ldr	r3, [pc, #392]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9a4:	4a61      	ldr	r2, [pc, #388]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9a6:	f043 0304 	orr.w	r3, r3, #4
 800d9aa:	6713      	str	r3, [r2, #112]	; 0x70
 800d9ac:	4b5f      	ldr	r3, [pc, #380]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9b0:	4a5e      	ldr	r2, [pc, #376]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9b2:	f043 0301 	orr.w	r3, r3, #1
 800d9b6:	6713      	str	r3, [r2, #112]	; 0x70
 800d9b8:	e00b      	b.n	800d9d2 <HAL_RCC_OscConfig+0x376>
 800d9ba:	4b5c      	ldr	r3, [pc, #368]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9be:	4a5b      	ldr	r2, [pc, #364]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9c0:	f023 0301 	bic.w	r3, r3, #1
 800d9c4:	6713      	str	r3, [r2, #112]	; 0x70
 800d9c6:	4b59      	ldr	r3, [pc, #356]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9ca:	4a58      	ldr	r2, [pc, #352]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9cc:	f023 0304 	bic.w	r3, r3, #4
 800d9d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	689b      	ldr	r3, [r3, #8]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d015      	beq.n	800da06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d9da:	f7fd fddb 	bl	800b594 <HAL_GetTick>
 800d9de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9e0:	e00a      	b.n	800d9f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d9e2:	f7fd fdd7 	bl	800b594 <HAL_GetTick>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	693b      	ldr	r3, [r7, #16]
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800d9f0:	4293      	cmp	r3, r2
 800d9f2:	d901      	bls.n	800d9f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	e0d8      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d9f8:	4b4c      	ldr	r3, [pc, #304]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800d9fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d9fc:	f003 0302 	and.w	r3, r3, #2
 800da00:	2b00      	cmp	r3, #0
 800da02:	d0ee      	beq.n	800d9e2 <HAL_RCC_OscConfig+0x386>
 800da04:	e014      	b.n	800da30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800da06:	f7fd fdc5 	bl	800b594 <HAL_GetTick>
 800da0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da0c:	e00a      	b.n	800da24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800da0e:	f7fd fdc1 	bl	800b594 <HAL_GetTick>
 800da12:	4602      	mov	r2, r0
 800da14:	693b      	ldr	r3, [r7, #16]
 800da16:	1ad3      	subs	r3, r2, r3
 800da18:	f241 3288 	movw	r2, #5000	; 0x1388
 800da1c:	4293      	cmp	r3, r2
 800da1e:	d901      	bls.n	800da24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800da20:	2303      	movs	r3, #3
 800da22:	e0c2      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800da24:	4b41      	ldr	r3, [pc, #260]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800da28:	f003 0302 	and.w	r3, r3, #2
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d1ee      	bne.n	800da0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800da30:	7dfb      	ldrb	r3, [r7, #23]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d105      	bne.n	800da42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800da36:	4b3d      	ldr	r3, [pc, #244]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da3a:	4a3c      	ldr	r2, [pc, #240]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	699b      	ldr	r3, [r3, #24]
 800da46:	2b00      	cmp	r3, #0
 800da48:	f000 80ae 	beq.w	800dba8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800da4c:	4b37      	ldr	r3, [pc, #220]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f003 030c 	and.w	r3, r3, #12
 800da54:	2b08      	cmp	r3, #8
 800da56:	d06d      	beq.n	800db34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	699b      	ldr	r3, [r3, #24]
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d14b      	bne.n	800daf8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800da60:	4b32      	ldr	r3, [pc, #200]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	4a31      	ldr	r2, [pc, #196]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800da6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da6c:	f7fd fd92 	bl	800b594 <HAL_GetTick>
 800da70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da72:	e008      	b.n	800da86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800da74:	f7fd fd8e 	bl	800b594 <HAL_GetTick>
 800da78:	4602      	mov	r2, r0
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	1ad3      	subs	r3, r2, r3
 800da7e:	2b02      	cmp	r3, #2
 800da80:	d901      	bls.n	800da86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800da82:	2303      	movs	r3, #3
 800da84:	e091      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800da86:	4b29      	ldr	r3, [pc, #164]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d1f0      	bne.n	800da74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	69da      	ldr	r2, [r3, #28]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6a1b      	ldr	r3, [r3, #32]
 800da9a:	431a      	orrs	r2, r3
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa0:	019b      	lsls	r3, r3, #6
 800daa2:	431a      	orrs	r2, r3
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daa8:	085b      	lsrs	r3, r3, #1
 800daaa:	3b01      	subs	r3, #1
 800daac:	041b      	lsls	r3, r3, #16
 800daae:	431a      	orrs	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	061b      	lsls	r3, r3, #24
 800dab6:	431a      	orrs	r2, r3
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dabc:	071b      	lsls	r3, r3, #28
 800dabe:	491b      	ldr	r1, [pc, #108]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800dac0:	4313      	orrs	r3, r2
 800dac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800dac4:	4b19      	ldr	r3, [pc, #100]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	4a18      	ldr	r2, [pc, #96]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800daca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800dace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dad0:	f7fd fd60 	bl	800b594 <HAL_GetTick>
 800dad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dad6:	e008      	b.n	800daea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dad8:	f7fd fd5c 	bl	800b594 <HAL_GetTick>
 800dadc:	4602      	mov	r2, r0
 800dade:	693b      	ldr	r3, [r7, #16]
 800dae0:	1ad3      	subs	r3, r2, r3
 800dae2:	2b02      	cmp	r3, #2
 800dae4:	d901      	bls.n	800daea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800dae6:	2303      	movs	r3, #3
 800dae8:	e05f      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800daea:	4b10      	ldr	r3, [pc, #64]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d0f0      	beq.n	800dad8 <HAL_RCC_OscConfig+0x47c>
 800daf6:	e057      	b.n	800dba8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800daf8:	4b0c      	ldr	r3, [pc, #48]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	4a0b      	ldr	r2, [pc, #44]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800dafe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800db02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db04:	f7fd fd46 	bl	800b594 <HAL_GetTick>
 800db08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db0a:	e008      	b.n	800db1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800db0c:	f7fd fd42 	bl	800b594 <HAL_GetTick>
 800db10:	4602      	mov	r2, r0
 800db12:	693b      	ldr	r3, [r7, #16]
 800db14:	1ad3      	subs	r3, r2, r3
 800db16:	2b02      	cmp	r3, #2
 800db18:	d901      	bls.n	800db1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800db1a:	2303      	movs	r3, #3
 800db1c:	e045      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800db1e:	4b03      	ldr	r3, [pc, #12]	; (800db2c <HAL_RCC_OscConfig+0x4d0>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db26:	2b00      	cmp	r3, #0
 800db28:	d1f0      	bne.n	800db0c <HAL_RCC_OscConfig+0x4b0>
 800db2a:	e03d      	b.n	800dba8 <HAL_RCC_OscConfig+0x54c>
 800db2c:	40023800 	.word	0x40023800
 800db30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800db34:	4b1f      	ldr	r3, [pc, #124]	; (800dbb4 <HAL_RCC_OscConfig+0x558>)
 800db36:	685b      	ldr	r3, [r3, #4]
 800db38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	699b      	ldr	r3, [r3, #24]
 800db3e:	2b01      	cmp	r3, #1
 800db40:	d030      	beq.n	800dba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d129      	bne.n	800dba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800db5a:	429a      	cmp	r2, r3
 800db5c:	d122      	bne.n	800dba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800db5e:	68fa      	ldr	r2, [r7, #12]
 800db60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800db64:	4013      	ands	r3, r2
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800db6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d119      	bne.n	800dba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db7a:	085b      	lsrs	r3, r3, #1
 800db7c:	3b01      	subs	r3, #1
 800db7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800db80:	429a      	cmp	r2, r3
 800db82:	d10f      	bne.n	800dba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800db90:	429a      	cmp	r2, r3
 800db92:	d107      	bne.n	800dba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d001      	beq.n	800dba8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800dba4:	2301      	movs	r3, #1
 800dba6:	e000      	b.n	800dbaa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800dba8:	2300      	movs	r3, #0
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3718      	adds	r7, #24
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	bd80      	pop	{r7, pc}
 800dbb2:	bf00      	nop
 800dbb4:	40023800 	.word	0x40023800

0800dbb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b084      	sub	sp, #16
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
 800dbc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d101      	bne.n	800dbd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	e0d0      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800dbd0:	4b6a      	ldr	r3, [pc, #424]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f003 030f 	and.w	r3, r3, #15
 800dbd8:	683a      	ldr	r2, [r7, #0]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d910      	bls.n	800dc00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dbde:	4b67      	ldr	r3, [pc, #412]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	f023 020f 	bic.w	r2, r3, #15
 800dbe6:	4965      	ldr	r1, [pc, #404]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	4313      	orrs	r3, r2
 800dbec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dbee:	4b63      	ldr	r3, [pc, #396]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	f003 030f 	and.w	r3, r3, #15
 800dbf6:	683a      	ldr	r2, [r7, #0]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d001      	beq.n	800dc00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e0b8      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d020      	beq.n	800dc4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f003 0304 	and.w	r3, r3, #4
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d005      	beq.n	800dc24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800dc18:	4b59      	ldr	r3, [pc, #356]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc1a:	689b      	ldr	r3, [r3, #8]
 800dc1c:	4a58      	ldr	r2, [pc, #352]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800dc22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f003 0308 	and.w	r3, r3, #8
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800dc30:	4b53      	ldr	r3, [pc, #332]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc32:	689b      	ldr	r3, [r3, #8]
 800dc34:	4a52      	ldr	r2, [pc, #328]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800dc3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800dc3c:	4b50      	ldr	r3, [pc, #320]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc3e:	689b      	ldr	r3, [r3, #8]
 800dc40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	689b      	ldr	r3, [r3, #8]
 800dc48:	494d      	ldr	r1, [pc, #308]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc4a:	4313      	orrs	r3, r2
 800dc4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	681b      	ldr	r3, [r3, #0]
 800dc52:	f003 0301 	and.w	r3, r3, #1
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d040      	beq.n	800dcdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d107      	bne.n	800dc72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dc62:	4b47      	ldr	r3, [pc, #284]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d115      	bne.n	800dc9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	e07f      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d107      	bne.n	800dc8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dc7a:	4b41      	ldr	r3, [pc, #260]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc7c:	681b      	ldr	r3, [r3, #0]
 800dc7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d109      	bne.n	800dc9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	e073      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dc8a:	4b3d      	ldr	r3, [pc, #244]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f003 0302 	and.w	r3, r3, #2
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d101      	bne.n	800dc9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800dc96:	2301      	movs	r3, #1
 800dc98:	e06b      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800dc9a:	4b39      	ldr	r3, [pc, #228]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dc9c:	689b      	ldr	r3, [r3, #8]
 800dc9e:	f023 0203 	bic.w	r2, r3, #3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	685b      	ldr	r3, [r3, #4]
 800dca6:	4936      	ldr	r1, [pc, #216]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dca8:	4313      	orrs	r3, r2
 800dcaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dcac:	f7fd fc72 	bl	800b594 <HAL_GetTick>
 800dcb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcb2:	e00a      	b.n	800dcca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800dcb4:	f7fd fc6e 	bl	800b594 <HAL_GetTick>
 800dcb8:	4602      	mov	r2, r0
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	1ad3      	subs	r3, r2, r3
 800dcbe:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d901      	bls.n	800dcca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800dcc6:	2303      	movs	r3, #3
 800dcc8:	e053      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800dcca:	4b2d      	ldr	r3, [pc, #180]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dccc:	689b      	ldr	r3, [r3, #8]
 800dcce:	f003 020c 	and.w	r2, r3, #12
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	685b      	ldr	r3, [r3, #4]
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d1eb      	bne.n	800dcb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800dcdc:	4b27      	ldr	r3, [pc, #156]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f003 030f 	and.w	r3, r3, #15
 800dce4:	683a      	ldr	r2, [r7, #0]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d210      	bcs.n	800dd0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800dcea:	4b24      	ldr	r3, [pc, #144]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f023 020f 	bic.w	r2, r3, #15
 800dcf2:	4922      	ldr	r1, [pc, #136]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	4313      	orrs	r3, r2
 800dcf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800dcfa:	4b20      	ldr	r3, [pc, #128]	; (800dd7c <HAL_RCC_ClockConfig+0x1c4>)
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f003 030f 	and.w	r3, r3, #15
 800dd02:	683a      	ldr	r2, [r7, #0]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d001      	beq.n	800dd0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	e032      	b.n	800dd72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	f003 0304 	and.w	r3, r3, #4
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d008      	beq.n	800dd2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800dd18:	4b19      	ldr	r3, [pc, #100]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	4916      	ldr	r1, [pc, #88]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd26:	4313      	orrs	r3, r2
 800dd28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f003 0308 	and.w	r3, r3, #8
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d009      	beq.n	800dd4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800dd36:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd38:	689b      	ldr	r3, [r3, #8]
 800dd3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	00db      	lsls	r3, r3, #3
 800dd44:	490e      	ldr	r1, [pc, #56]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd46:	4313      	orrs	r3, r2
 800dd48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800dd4a:	f000 f821 	bl	800dd90 <HAL_RCC_GetSysClockFreq>
 800dd4e:	4601      	mov	r1, r0
 800dd50:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <HAL_RCC_ClockConfig+0x1c8>)
 800dd52:	689b      	ldr	r3, [r3, #8]
 800dd54:	091b      	lsrs	r3, r3, #4
 800dd56:	f003 030f 	and.w	r3, r3, #15
 800dd5a:	4a0a      	ldr	r2, [pc, #40]	; (800dd84 <HAL_RCC_ClockConfig+0x1cc>)
 800dd5c:	5cd3      	ldrb	r3, [r2, r3]
 800dd5e:	fa21 f303 	lsr.w	r3, r1, r3
 800dd62:	4a09      	ldr	r2, [pc, #36]	; (800dd88 <HAL_RCC_ClockConfig+0x1d0>)
 800dd64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800dd66:	4b09      	ldr	r3, [pc, #36]	; (800dd8c <HAL_RCC_ClockConfig+0x1d4>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fd fbce 	bl	800b50c <HAL_InitTick>

  return HAL_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	40023c00 	.word	0x40023c00
 800dd80:	40023800 	.word	0x40023800
 800dd84:	080133d8 	.word	0x080133d8
 800dd88:	2000000c 	.word	0x2000000c
 800dd8c:	20000010 	.word	0x20000010

0800dd90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dd90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd92:	b085      	sub	sp, #20
 800dd94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800dd96:	2300      	movs	r3, #0
 800dd98:	607b      	str	r3, [r7, #4]
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	60fb      	str	r3, [r7, #12]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dda6:	4b63      	ldr	r3, [pc, #396]	; (800df34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dda8:	689b      	ldr	r3, [r3, #8]
 800ddaa:	f003 030c 	and.w	r3, r3, #12
 800ddae:	2b04      	cmp	r3, #4
 800ddb0:	d007      	beq.n	800ddc2 <HAL_RCC_GetSysClockFreq+0x32>
 800ddb2:	2b08      	cmp	r3, #8
 800ddb4:	d008      	beq.n	800ddc8 <HAL_RCC_GetSysClockFreq+0x38>
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	f040 80b4 	bne.w	800df24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ddbc:	4b5e      	ldr	r3, [pc, #376]	; (800df38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ddbe:	60bb      	str	r3, [r7, #8]
      break;
 800ddc0:	e0b3      	b.n	800df2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ddc2:	4b5d      	ldr	r3, [pc, #372]	; (800df38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ddc4:	60bb      	str	r3, [r7, #8]
      break;
 800ddc6:	e0b0      	b.n	800df2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ddc8:	4b5a      	ldr	r3, [pc, #360]	; (800df34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ddca:	685b      	ldr	r3, [r3, #4]
 800ddcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ddd0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800ddd2:	4b58      	ldr	r3, [pc, #352]	; (800df34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ddd4:	685b      	ldr	r3, [r3, #4]
 800ddd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d04a      	beq.n	800de74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ddde:	4b55      	ldr	r3, [pc, #340]	; (800df34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800dde0:	685b      	ldr	r3, [r3, #4]
 800dde2:	099b      	lsrs	r3, r3, #6
 800dde4:	f04f 0400 	mov.w	r4, #0
 800dde8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ddec:	f04f 0200 	mov.w	r2, #0
 800ddf0:	ea03 0501 	and.w	r5, r3, r1
 800ddf4:	ea04 0602 	and.w	r6, r4, r2
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	4632      	mov	r2, r6
 800ddfc:	f04f 0300 	mov.w	r3, #0
 800de00:	f04f 0400 	mov.w	r4, #0
 800de04:	0154      	lsls	r4, r2, #5
 800de06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800de0a:	014b      	lsls	r3, r1, #5
 800de0c:	4619      	mov	r1, r3
 800de0e:	4622      	mov	r2, r4
 800de10:	1b49      	subs	r1, r1, r5
 800de12:	eb62 0206 	sbc.w	r2, r2, r6
 800de16:	f04f 0300 	mov.w	r3, #0
 800de1a:	f04f 0400 	mov.w	r4, #0
 800de1e:	0194      	lsls	r4, r2, #6
 800de20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800de24:	018b      	lsls	r3, r1, #6
 800de26:	1a5b      	subs	r3, r3, r1
 800de28:	eb64 0402 	sbc.w	r4, r4, r2
 800de2c:	f04f 0100 	mov.w	r1, #0
 800de30:	f04f 0200 	mov.w	r2, #0
 800de34:	00e2      	lsls	r2, r4, #3
 800de36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800de3a:	00d9      	lsls	r1, r3, #3
 800de3c:	460b      	mov	r3, r1
 800de3e:	4614      	mov	r4, r2
 800de40:	195b      	adds	r3, r3, r5
 800de42:	eb44 0406 	adc.w	r4, r4, r6
 800de46:	f04f 0100 	mov.w	r1, #0
 800de4a:	f04f 0200 	mov.w	r2, #0
 800de4e:	02a2      	lsls	r2, r4, #10
 800de50:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800de54:	0299      	lsls	r1, r3, #10
 800de56:	460b      	mov	r3, r1
 800de58:	4614      	mov	r4, r2
 800de5a:	4618      	mov	r0, r3
 800de5c:	4621      	mov	r1, r4
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f04f 0400 	mov.w	r4, #0
 800de64:	461a      	mov	r2, r3
 800de66:	4623      	mov	r3, r4
 800de68:	f7fa f9f2 	bl	8008250 <__aeabi_uldivmod>
 800de6c:	4603      	mov	r3, r0
 800de6e:	460c      	mov	r4, r1
 800de70:	60fb      	str	r3, [r7, #12]
 800de72:	e049      	b.n	800df08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800de74:	4b2f      	ldr	r3, [pc, #188]	; (800df34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	099b      	lsrs	r3, r3, #6
 800de7a:	f04f 0400 	mov.w	r4, #0
 800de7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800de82:	f04f 0200 	mov.w	r2, #0
 800de86:	ea03 0501 	and.w	r5, r3, r1
 800de8a:	ea04 0602 	and.w	r6, r4, r2
 800de8e:	4629      	mov	r1, r5
 800de90:	4632      	mov	r2, r6
 800de92:	f04f 0300 	mov.w	r3, #0
 800de96:	f04f 0400 	mov.w	r4, #0
 800de9a:	0154      	lsls	r4, r2, #5
 800de9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800dea0:	014b      	lsls	r3, r1, #5
 800dea2:	4619      	mov	r1, r3
 800dea4:	4622      	mov	r2, r4
 800dea6:	1b49      	subs	r1, r1, r5
 800dea8:	eb62 0206 	sbc.w	r2, r2, r6
 800deac:	f04f 0300 	mov.w	r3, #0
 800deb0:	f04f 0400 	mov.w	r4, #0
 800deb4:	0194      	lsls	r4, r2, #6
 800deb6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800deba:	018b      	lsls	r3, r1, #6
 800debc:	1a5b      	subs	r3, r3, r1
 800debe:	eb64 0402 	sbc.w	r4, r4, r2
 800dec2:	f04f 0100 	mov.w	r1, #0
 800dec6:	f04f 0200 	mov.w	r2, #0
 800deca:	00e2      	lsls	r2, r4, #3
 800decc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ded0:	00d9      	lsls	r1, r3, #3
 800ded2:	460b      	mov	r3, r1
 800ded4:	4614      	mov	r4, r2
 800ded6:	195b      	adds	r3, r3, r5
 800ded8:	eb44 0406 	adc.w	r4, r4, r6
 800dedc:	f04f 0100 	mov.w	r1, #0
 800dee0:	f04f 0200 	mov.w	r2, #0
 800dee4:	02a2      	lsls	r2, r4, #10
 800dee6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800deea:	0299      	lsls	r1, r3, #10
 800deec:	460b      	mov	r3, r1
 800deee:	4614      	mov	r4, r2
 800def0:	4618      	mov	r0, r3
 800def2:	4621      	mov	r1, r4
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f04f 0400 	mov.w	r4, #0
 800defa:	461a      	mov	r2, r3
 800defc:	4623      	mov	r3, r4
 800defe:	f7fa f9a7 	bl	8008250 <__aeabi_uldivmod>
 800df02:	4603      	mov	r3, r0
 800df04:	460c      	mov	r4, r1
 800df06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800df08:	4b0a      	ldr	r3, [pc, #40]	; (800df34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800df0a:	685b      	ldr	r3, [r3, #4]
 800df0c:	0c1b      	lsrs	r3, r3, #16
 800df0e:	f003 0303 	and.w	r3, r3, #3
 800df12:	3301      	adds	r3, #1
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800df18:	68fa      	ldr	r2, [r7, #12]
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800df20:	60bb      	str	r3, [r7, #8]
      break;
 800df22:	e002      	b.n	800df2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800df24:	4b04      	ldr	r3, [pc, #16]	; (800df38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800df26:	60bb      	str	r3, [r7, #8]
      break;
 800df28:	bf00      	nop
    }
  }
  return sysclockfreq;
 800df2a:	68bb      	ldr	r3, [r7, #8]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3714      	adds	r7, #20
 800df30:	46bd      	mov	sp, r7
 800df32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df34:	40023800 	.word	0x40023800
 800df38:	00f42400 	.word	0x00f42400

0800df3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800df3c:	b480      	push	{r7}
 800df3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800df40:	4b03      	ldr	r3, [pc, #12]	; (800df50 <HAL_RCC_GetHCLKFreq+0x14>)
 800df42:	681b      	ldr	r3, [r3, #0]
}
 800df44:	4618      	mov	r0, r3
 800df46:	46bd      	mov	sp, r7
 800df48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4c:	4770      	bx	lr
 800df4e:	bf00      	nop
 800df50:	2000000c 	.word	0x2000000c

0800df54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800df58:	f7ff fff0 	bl	800df3c <HAL_RCC_GetHCLKFreq>
 800df5c:	4601      	mov	r1, r0
 800df5e:	4b05      	ldr	r3, [pc, #20]	; (800df74 <HAL_RCC_GetPCLK1Freq+0x20>)
 800df60:	689b      	ldr	r3, [r3, #8]
 800df62:	0a9b      	lsrs	r3, r3, #10
 800df64:	f003 0307 	and.w	r3, r3, #7
 800df68:	4a03      	ldr	r2, [pc, #12]	; (800df78 <HAL_RCC_GetPCLK1Freq+0x24>)
 800df6a:	5cd3      	ldrb	r3, [r2, r3]
 800df6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800df70:	4618      	mov	r0, r3
 800df72:	bd80      	pop	{r7, pc}
 800df74:	40023800 	.word	0x40023800
 800df78:	080133e8 	.word	0x080133e8

0800df7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800df80:	f7ff ffdc 	bl	800df3c <HAL_RCC_GetHCLKFreq>
 800df84:	4601      	mov	r1, r0
 800df86:	4b05      	ldr	r3, [pc, #20]	; (800df9c <HAL_RCC_GetPCLK2Freq+0x20>)
 800df88:	689b      	ldr	r3, [r3, #8]
 800df8a:	0b5b      	lsrs	r3, r3, #13
 800df8c:	f003 0307 	and.w	r3, r3, #7
 800df90:	4a03      	ldr	r2, [pc, #12]	; (800dfa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800df92:	5cd3      	ldrb	r3, [r2, r3]
 800df94:	fa21 f303 	lsr.w	r3, r1, r3
}
 800df98:	4618      	mov	r0, r3
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	40023800 	.word	0x40023800
 800dfa0:	080133e8 	.word	0x080133e8

0800dfa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b088      	sub	sp, #32
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800dfac:	2300      	movs	r3, #0
 800dfae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 0301 	and.w	r3, r3, #1
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d012      	beq.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800dfcc:	4b69      	ldr	r3, [pc, #420]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfce:	689b      	ldr	r3, [r3, #8]
 800dfd0:	4a68      	ldr	r2, [pc, #416]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfd2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800dfd6:	6093      	str	r3, [r2, #8]
 800dfd8:	4b66      	ldr	r3, [pc, #408]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfda:	689a      	ldr	r2, [r3, #8]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfe0:	4964      	ldr	r1, [pc, #400]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800dfe2:	4313      	orrs	r3, r2
 800dfe4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d101      	bne.n	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800dfee:	2301      	movs	r3, #1
 800dff0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d017      	beq.n	800e02e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dffe:	4b5d      	ldr	r3, [pc, #372]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e00c:	4959      	ldr	r1, [pc, #356]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e00e:	4313      	orrs	r3, r2
 800e010:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e01c:	d101      	bne.n	800e022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e01e:	2301      	movs	r3, #1
 800e020:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e02a:	2301      	movs	r3, #1
 800e02c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e036:	2b00      	cmp	r3, #0
 800e038:	d017      	beq.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e03a:	4b4e      	ldr	r3, [pc, #312]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e03c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e040:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e048:	494a      	ldr	r1, [pc, #296]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e04a:	4313      	orrs	r3, r2
 800e04c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e054:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e058:	d101      	bne.n	800e05e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e05a:	2301      	movs	r3, #1
 800e05c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e062:	2b00      	cmp	r3, #0
 800e064:	d101      	bne.n	800e06a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e066:	2301      	movs	r3, #1
 800e068:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e072:	2b00      	cmp	r3, #0
 800e074:	d001      	beq.n	800e07a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e076:	2301      	movs	r3, #1
 800e078:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f003 0320 	and.w	r3, r3, #32
 800e082:	2b00      	cmp	r3, #0
 800e084:	f000 808b 	beq.w	800e19e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e088:	4b3a      	ldr	r3, [pc, #232]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e08a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e08c:	4a39      	ldr	r2, [pc, #228]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e08e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e092:	6413      	str	r3, [r2, #64]	; 0x40
 800e094:	4b37      	ldr	r3, [pc, #220]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e09c:	60bb      	str	r3, [r7, #8]
 800e09e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e0a0:	4b35      	ldr	r3, [pc, #212]	; (800e178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4a34      	ldr	r2, [pc, #208]	; (800e178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e0a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e0aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ac:	f7fd fa72 	bl	800b594 <HAL_GetTick>
 800e0b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e0b2:	e008      	b.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e0b4:	f7fd fa6e 	bl	800b594 <HAL_GetTick>
 800e0b8:	4602      	mov	r2, r0
 800e0ba:	697b      	ldr	r3, [r7, #20]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	2b64      	cmp	r3, #100	; 0x64
 800e0c0:	d901      	bls.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e0c2:	2303      	movs	r3, #3
 800e0c4:	e38d      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e0c6:	4b2c      	ldr	r3, [pc, #176]	; (800e178 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d0f0      	beq.n	800e0b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e0d2:	4b28      	ldr	r3, [pc, #160]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d035      	beq.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e0ea:	693a      	ldr	r2, [r7, #16]
 800e0ec:	429a      	cmp	r2, r3
 800e0ee:	d02e      	beq.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e0f0:	4b20      	ldr	r3, [pc, #128]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e0fa:	4b1e      	ldr	r3, [pc, #120]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0fe:	4a1d      	ldr	r2, [pc, #116]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e104:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e106:	4b1b      	ldr	r3, [pc, #108]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e10a:	4a1a      	ldr	r2, [pc, #104]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e10c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e112:	4a18      	ldr	r2, [pc, #96]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e118:	4b16      	ldr	r3, [pc, #88]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e11a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11c:	f003 0301 	and.w	r3, r3, #1
 800e120:	2b01      	cmp	r3, #1
 800e122:	d114      	bne.n	800e14e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e124:	f7fd fa36 	bl	800b594 <HAL_GetTick>
 800e128:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e12a:	e00a      	b.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e12c:	f7fd fa32 	bl	800b594 <HAL_GetTick>
 800e130:	4602      	mov	r2, r0
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	1ad3      	subs	r3, r2, r3
 800e136:	f241 3288 	movw	r2, #5000	; 0x1388
 800e13a:	4293      	cmp	r3, r2
 800e13c:	d901      	bls.n	800e142 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e34f      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e142:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e146:	f003 0302 	and.w	r3, r3, #2
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d0ee      	beq.n	800e12c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e15a:	d111      	bne.n	800e180 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e15c:	4b05      	ldr	r3, [pc, #20]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e168:	4b04      	ldr	r3, [pc, #16]	; (800e17c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e16a:	400b      	ands	r3, r1
 800e16c:	4901      	ldr	r1, [pc, #4]	; (800e174 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e16e:	4313      	orrs	r3, r2
 800e170:	608b      	str	r3, [r1, #8]
 800e172:	e00b      	b.n	800e18c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e174:	40023800 	.word	0x40023800
 800e178:	40007000 	.word	0x40007000
 800e17c:	0ffffcff 	.word	0x0ffffcff
 800e180:	4bb3      	ldr	r3, [pc, #716]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e182:	689b      	ldr	r3, [r3, #8]
 800e184:	4ab2      	ldr	r2, [pc, #712]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e186:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e18a:	6093      	str	r3, [r2, #8]
 800e18c:	4bb0      	ldr	r3, [pc, #704]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e18e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e194:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e198:	49ad      	ldr	r1, [pc, #692]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e19a:	4313      	orrs	r3, r2
 800e19c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f003 0310 	and.w	r3, r3, #16
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d010      	beq.n	800e1cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e1aa:	4ba9      	ldr	r3, [pc, #676]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1b0:	4aa7      	ldr	r2, [pc, #668]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e1b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e1ba:	4ba5      	ldr	r3, [pc, #660]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1c4:	49a2      	ldr	r1, [pc, #648]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d00a      	beq.n	800e1ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e1d8:	4b9d      	ldr	r3, [pc, #628]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1e6:	499a      	ldr	r1, [pc, #616]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1e8:	4313      	orrs	r3, r2
 800e1ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00a      	beq.n	800e210 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e1fa:	4b95      	ldr	r3, [pc, #596]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e200:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e208:	4991      	ldr	r1, [pc, #580]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e20a:	4313      	orrs	r3, r2
 800e20c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d00a      	beq.n	800e232 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e21c:	4b8c      	ldr	r3, [pc, #560]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e21e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e222:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e22a:	4989      	ldr	r1, [pc, #548]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e22c:	4313      	orrs	r3, r2
 800e22e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00a      	beq.n	800e254 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e23e:	4b84      	ldr	r3, [pc, #528]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e244:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e24c:	4980      	ldr	r1, [pc, #512]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e24e:	4313      	orrs	r3, r2
 800e250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d00a      	beq.n	800e276 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e260:	4b7b      	ldr	r3, [pc, #492]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e266:	f023 0203 	bic.w	r2, r3, #3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e26e:	4978      	ldr	r1, [pc, #480]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e270:	4313      	orrs	r3, r2
 800e272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d00a      	beq.n	800e298 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e282:	4b73      	ldr	r3, [pc, #460]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e288:	f023 020c 	bic.w	r2, r3, #12
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e290:	496f      	ldr	r1, [pc, #444]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e292:	4313      	orrs	r3, r2
 800e294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d00a      	beq.n	800e2ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e2a4:	4b6a      	ldr	r3, [pc, #424]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e2a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2b2:	4967      	ldr	r1, [pc, #412]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00a      	beq.n	800e2dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e2c6:	4b62      	ldr	r3, [pc, #392]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e2c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2cc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2d4:	495e      	ldr	r1, [pc, #376]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e2d6:	4313      	orrs	r3, r2
 800e2d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00a      	beq.n	800e2fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e2e8:	4b59      	ldr	r3, [pc, #356]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f6:	4956      	ldr	r1, [pc, #344]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e306:	2b00      	cmp	r3, #0
 800e308:	d00a      	beq.n	800e320 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e30a:	4b51      	ldr	r3, [pc, #324]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e30c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e310:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e318:	494d      	ldr	r1, [pc, #308]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e31a:	4313      	orrs	r3, r2
 800e31c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d00a      	beq.n	800e342 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e32c:	4b48      	ldr	r3, [pc, #288]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e32e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e332:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e33a:	4945      	ldr	r1, [pc, #276]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e33c:	4313      	orrs	r3, r2
 800e33e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00a      	beq.n	800e364 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e34e:	4b40      	ldr	r3, [pc, #256]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e354:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e35c:	493c      	ldr	r1, [pc, #240]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e35e:	4313      	orrs	r3, r2
 800e360:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d00a      	beq.n	800e386 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e370:	4b37      	ldr	r3, [pc, #220]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e376:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e37e:	4934      	ldr	r1, [pc, #208]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e380:	4313      	orrs	r3, r2
 800e382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d011      	beq.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e392:	4b2f      	ldr	r3, [pc, #188]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e398:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3a0:	492b      	ldr	r1, [pc, #172]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3a2:	4313      	orrs	r3, r2
 800e3a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e3ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e3b0:	d101      	bne.n	800e3b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f003 0308 	and.w	r3, r3, #8
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d001      	beq.n	800e3c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e3c2:	2301      	movs	r3, #1
 800e3c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00a      	beq.n	800e3e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e3d2:	4b1f      	ldr	r3, [pc, #124]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3d8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e0:	491b      	ldr	r1, [pc, #108]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3e2:	4313      	orrs	r3, r2
 800e3e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d00b      	beq.n	800e40c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e3f4:	4b16      	ldr	r3, [pc, #88]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e3f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3fa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e404:	4912      	ldr	r1, [pc, #72]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e406:	4313      	orrs	r3, r2
 800e408:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00b      	beq.n	800e430 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e418:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e41a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e41e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e428:	4909      	ldr	r1, [pc, #36]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e42a:	4313      	orrs	r3, r2
 800e42c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d00f      	beq.n	800e45c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e43c:	4b04      	ldr	r3, [pc, #16]	; (800e450 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800e43e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e442:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e44c:	e002      	b.n	800e454 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800e44e:	bf00      	nop
 800e450:	40023800 	.word	0x40023800
 800e454:	4985      	ldr	r1, [pc, #532]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e456:	4313      	orrs	r3, r2
 800e458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00b      	beq.n	800e480 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e468:	4b80      	ldr	r3, [pc, #512]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e46e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e478:	497c      	ldr	r1, [pc, #496]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e47a:	4313      	orrs	r3, r2
 800e47c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800e480:	69fb      	ldr	r3, [r7, #28]
 800e482:	2b01      	cmp	r3, #1
 800e484:	d005      	beq.n	800e492 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e48e:	f040 80d6 	bne.w	800e63e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800e492:	4b76      	ldr	r3, [pc, #472]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	4a75      	ldr	r2, [pc, #468]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e498:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e49c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e49e:	f7fd f879 	bl	800b594 <HAL_GetTick>
 800e4a2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e4a4:	e008      	b.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e4a6:	f7fd f875 	bl	800b594 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	2b64      	cmp	r3, #100	; 0x64
 800e4b2:	d901      	bls.n	800e4b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e4b4:	2303      	movs	r3, #3
 800e4b6:	e194      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800e4b8:	4b6c      	ldr	r3, [pc, #432]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1f0      	bne.n	800e4a6 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	f003 0301 	and.w	r3, r3, #1
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d021      	beq.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d11d      	bne.n	800e514 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e4d8:	4b64      	ldr	r3, [pc, #400]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4de:	0c1b      	lsrs	r3, r3, #16
 800e4e0:	f003 0303 	and.w	r3, r3, #3
 800e4e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e4e6:	4b61      	ldr	r3, [pc, #388]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e4ec:	0e1b      	lsrs	r3, r3, #24
 800e4ee:	f003 030f 	and.w	r3, r3, #15
 800e4f2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	019a      	lsls	r2, r3, #6
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	041b      	lsls	r3, r3, #16
 800e4fe:	431a      	orrs	r2, r3
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	061b      	lsls	r3, r3, #24
 800e504:	431a      	orrs	r2, r3
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	689b      	ldr	r3, [r3, #8]
 800e50a:	071b      	lsls	r3, r3, #28
 800e50c:	4957      	ldr	r1, [pc, #348]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e50e:	4313      	orrs	r3, r2
 800e510:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d004      	beq.n	800e52a <HAL_RCCEx_PeriphCLKConfig+0x586>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e528:	d00a      	beq.n	800e540 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e532:	2b00      	cmp	r3, #0
 800e534:	d02e      	beq.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e53a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e53e:	d129      	bne.n	800e594 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800e540:	4b4a      	ldr	r3, [pc, #296]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e546:	0c1b      	lsrs	r3, r3, #16
 800e548:	f003 0303 	and.w	r3, r3, #3
 800e54c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e54e:	4b47      	ldr	r3, [pc, #284]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e550:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e554:	0f1b      	lsrs	r3, r3, #28
 800e556:	f003 0307 	and.w	r3, r3, #7
 800e55a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	019a      	lsls	r2, r3, #6
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	041b      	lsls	r3, r3, #16
 800e566:	431a      	orrs	r2, r3
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	061b      	lsls	r3, r3, #24
 800e56e:	431a      	orrs	r2, r3
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	071b      	lsls	r3, r3, #28
 800e574:	493d      	ldr	r1, [pc, #244]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e576:	4313      	orrs	r3, r2
 800e578:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e57c:	4b3b      	ldr	r3, [pc, #236]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e57e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e582:	f023 021f 	bic.w	r2, r3, #31
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e58a:	3b01      	subs	r3, #1
 800e58c:	4937      	ldr	r1, [pc, #220]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e58e:	4313      	orrs	r3, r2
 800e590:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d01d      	beq.n	800e5dc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800e5a0:	4b32      	ldr	r3, [pc, #200]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5a6:	0e1b      	lsrs	r3, r3, #24
 800e5a8:	f003 030f 	and.w	r3, r3, #15
 800e5ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800e5ae:	4b2f      	ldr	r3, [pc, #188]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5b4:	0f1b      	lsrs	r3, r3, #28
 800e5b6:	f003 0307 	and.w	r3, r3, #7
 800e5ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	685b      	ldr	r3, [r3, #4]
 800e5c0:	019a      	lsls	r2, r3, #6
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	041b      	lsls	r3, r3, #16
 800e5c8:	431a      	orrs	r2, r3
 800e5ca:	693b      	ldr	r3, [r7, #16]
 800e5cc:	061b      	lsls	r3, r3, #24
 800e5ce:	431a      	orrs	r2, r3
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	071b      	lsls	r3, r3, #28
 800e5d4:	4925      	ldr	r1, [pc, #148]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e5d6:	4313      	orrs	r3, r2
 800e5d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d011      	beq.n	800e60c <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	685b      	ldr	r3, [r3, #4]
 800e5ec:	019a      	lsls	r2, r3, #6
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	691b      	ldr	r3, [r3, #16]
 800e5f2:	041b      	lsls	r3, r3, #16
 800e5f4:	431a      	orrs	r2, r3
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	68db      	ldr	r3, [r3, #12]
 800e5fa:	061b      	lsls	r3, r3, #24
 800e5fc:	431a      	orrs	r2, r3
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	689b      	ldr	r3, [r3, #8]
 800e602:	071b      	lsls	r3, r3, #28
 800e604:	4919      	ldr	r1, [pc, #100]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e606:	4313      	orrs	r3, r2
 800e608:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800e60c:	4b17      	ldr	r3, [pc, #92]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	4a16      	ldr	r2, [pc, #88]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e616:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e618:	f7fc ffbc 	bl	800b594 <HAL_GetTick>
 800e61c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e61e:	e008      	b.n	800e632 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800e620:	f7fc ffb8 	bl	800b594 <HAL_GetTick>
 800e624:	4602      	mov	r2, r0
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	1ad3      	subs	r3, r2, r3
 800e62a:	2b64      	cmp	r3, #100	; 0x64
 800e62c:	d901      	bls.n	800e632 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e62e:	2303      	movs	r3, #3
 800e630:	e0d7      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800e632:	4b0e      	ldr	r3, [pc, #56]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d0f0      	beq.n	800e620 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800e63e:	69bb      	ldr	r3, [r7, #24]
 800e640:	2b01      	cmp	r3, #1
 800e642:	f040 80cd 	bne.w	800e7e0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800e646:	4b09      	ldr	r3, [pc, #36]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4a08      	ldr	r2, [pc, #32]	; (800e66c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800e64c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e650:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e652:	f7fc ff9f 	bl	800b594 <HAL_GetTick>
 800e656:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e658:	e00a      	b.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e65a:	f7fc ff9b 	bl	800b594 <HAL_GetTick>
 800e65e:	4602      	mov	r2, r0
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	1ad3      	subs	r3, r2, r3
 800e664:	2b64      	cmp	r3, #100	; 0x64
 800e666:	d903      	bls.n	800e670 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e668:	2303      	movs	r3, #3
 800e66a:	e0ba      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 800e66c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800e670:	4b5e      	ldr	r3, [pc, #376]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e678:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e67c:	d0ed      	beq.n	800e65a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d009      	beq.n	800e6a6 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d02e      	beq.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d12a      	bne.n	800e6fc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e6a6:	4b51      	ldr	r3, [pc, #324]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e6a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ac:	0c1b      	lsrs	r3, r3, #16
 800e6ae:	f003 0303 	and.w	r3, r3, #3
 800e6b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e6b4:	4b4d      	ldr	r3, [pc, #308]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e6ba:	0f1b      	lsrs	r3, r3, #28
 800e6bc:	f003 0307 	and.w	r3, r3, #7
 800e6c0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	019a      	lsls	r2, r3, #6
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	041b      	lsls	r3, r3, #16
 800e6cc:	431a      	orrs	r2, r3
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	699b      	ldr	r3, [r3, #24]
 800e6d2:	061b      	lsls	r3, r3, #24
 800e6d4:	431a      	orrs	r2, r3
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	071b      	lsls	r3, r3, #28
 800e6da:	4944      	ldr	r1, [pc, #272]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e6dc:	4313      	orrs	r3, r2
 800e6de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e6e2:	4b42      	ldr	r3, [pc, #264]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e6e8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6f0:	3b01      	subs	r3, #1
 800e6f2:	021b      	lsls	r3, r3, #8
 800e6f4:	493d      	ldr	r1, [pc, #244]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d022      	beq.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e710:	d11d      	bne.n	800e74e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e712:	4b36      	ldr	r3, [pc, #216]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e718:	0e1b      	lsrs	r3, r3, #24
 800e71a:	f003 030f 	and.w	r3, r3, #15
 800e71e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e720:	4b32      	ldr	r3, [pc, #200]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e726:	0f1b      	lsrs	r3, r3, #28
 800e728:	f003 0307 	and.w	r3, r3, #7
 800e72c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	695b      	ldr	r3, [r3, #20]
 800e732:	019a      	lsls	r2, r3, #6
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	6a1b      	ldr	r3, [r3, #32]
 800e738:	041b      	lsls	r3, r3, #16
 800e73a:	431a      	orrs	r2, r3
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	061b      	lsls	r3, r3, #24
 800e740:	431a      	orrs	r2, r3
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	071b      	lsls	r3, r3, #28
 800e746:	4929      	ldr	r1, [pc, #164]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e748:	4313      	orrs	r3, r2
 800e74a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 0308 	and.w	r3, r3, #8
 800e756:	2b00      	cmp	r3, #0
 800e758:	d028      	beq.n	800e7ac <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e75a:	4b24      	ldr	r3, [pc, #144]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e760:	0e1b      	lsrs	r3, r3, #24
 800e762:	f003 030f 	and.w	r3, r3, #15
 800e766:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800e768:	4b20      	ldr	r3, [pc, #128]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e76a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e76e:	0c1b      	lsrs	r3, r3, #16
 800e770:	f003 0303 	and.w	r3, r3, #3
 800e774:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	695b      	ldr	r3, [r3, #20]
 800e77a:	019a      	lsls	r2, r3, #6
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	041b      	lsls	r3, r3, #16
 800e780:	431a      	orrs	r2, r3
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	061b      	lsls	r3, r3, #24
 800e786:	431a      	orrs	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	69db      	ldr	r3, [r3, #28]
 800e78c:	071b      	lsls	r3, r3, #28
 800e78e:	4917      	ldr	r1, [pc, #92]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e790:	4313      	orrs	r3, r2
 800e792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e796:	4b15      	ldr	r3, [pc, #84]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e79c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a4:	4911      	ldr	r1, [pc, #68]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e7a6:	4313      	orrs	r3, r2
 800e7a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800e7ac:	4b0f      	ldr	r3, [pc, #60]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	4a0e      	ldr	r2, [pc, #56]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e7b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e7b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e7b8:	f7fc feec 	bl	800b594 <HAL_GetTick>
 800e7bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e7be:	e008      	b.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800e7c0:	f7fc fee8 	bl	800b594 <HAL_GetTick>
 800e7c4:	4602      	mov	r2, r0
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	1ad3      	subs	r3, r2, r3
 800e7ca:	2b64      	cmp	r3, #100	; 0x64
 800e7cc:	d901      	bls.n	800e7d2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800e7ce:	2303      	movs	r3, #3
 800e7d0:	e007      	b.n	800e7e2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800e7d2:	4b06      	ldr	r3, [pc, #24]	; (800e7ec <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
 800e7d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e7da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800e7de:	d1ef      	bne.n	800e7c0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800e7e0:	2300      	movs	r3, #0
}
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	3720      	adds	r7, #32
 800e7e6:	46bd      	mov	sp, r7
 800e7e8:	bd80      	pop	{r7, pc}
 800e7ea:	bf00      	nop
 800e7ec:	40023800 	.word	0x40023800

0800e7f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b084      	sub	sp, #16
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d101      	bne.n	800e802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e084      	b.n	800e90c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2200      	movs	r2, #0
 800e806:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	2b00      	cmp	r3, #0
 800e812:	d106      	bne.n	800e822 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2200      	movs	r2, #0
 800e818:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f7fc fc8f 	bl	800b140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2202      	movs	r2, #2
 800e826:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	681a      	ldr	r2, [r3, #0]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e838:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	68db      	ldr	r3, [r3, #12]
 800e83e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e842:	d902      	bls.n	800e84a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800e844:	2300      	movs	r3, #0
 800e846:	60fb      	str	r3, [r7, #12]
 800e848:	e002      	b.n	800e850 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e84a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e84e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800e858:	d007      	beq.n	800e86a <HAL_SPI_Init+0x7a>
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e862:	d002      	beq.n	800e86a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10b      	bne.n	800e88a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	68db      	ldr	r3, [r3, #12]
 800e876:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e87a:	d903      	bls.n	800e884 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	2202      	movs	r2, #2
 800e880:	631a      	str	r2, [r3, #48]	; 0x30
 800e882:	e002      	b.n	800e88a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	685a      	ldr	r2, [r3, #4]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	689b      	ldr	r3, [r3, #8]
 800e892:	431a      	orrs	r2, r3
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	691b      	ldr	r3, [r3, #16]
 800e898:	431a      	orrs	r2, r3
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	695b      	ldr	r3, [r3, #20]
 800e89e:	431a      	orrs	r2, r3
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	699b      	ldr	r3, [r3, #24]
 800e8a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8a8:	431a      	orrs	r2, r3
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	69db      	ldr	r3, [r3, #28]
 800e8ae:	431a      	orrs	r2, r3
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6a1b      	ldr	r3, [r3, #32]
 800e8b4:	ea42 0103 	orr.w	r1, r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	430a      	orrs	r2, r1
 800e8c2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	699b      	ldr	r3, [r3, #24]
 800e8c8:	0c1b      	lsrs	r3, r3, #16
 800e8ca:	f003 0204 	and.w	r2, r3, #4
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d2:	431a      	orrs	r2, r3
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8d8:	431a      	orrs	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	ea42 0103 	orr.w	r1, r2, r3
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	68fa      	ldr	r2, [r7, #12]
 800e8e8:	430a      	orrs	r2, r1
 800e8ea:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	69da      	ldr	r2, [r3, #28]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e8fa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2200      	movs	r2, #0
 800e900:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	2201      	movs	r2, #1
 800e906:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b088      	sub	sp, #32
 800e918:	af00      	add	r7, sp, #0
 800e91a:	60f8      	str	r0, [r7, #12]
 800e91c:	60b9      	str	r1, [r7, #8]
 800e91e:	603b      	str	r3, [r7, #0]
 800e920:	4613      	mov	r3, r2
 800e922:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e924:	2300      	movs	r3, #0
 800e926:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e92e:	2b01      	cmp	r3, #1
 800e930:	d101      	bne.n	800e936 <HAL_SPI_Transmit+0x22>
 800e932:	2302      	movs	r3, #2
 800e934:	e150      	b.n	800ebd8 <HAL_SPI_Transmit+0x2c4>
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	2201      	movs	r2, #1
 800e93a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e93e:	f7fc fe29 	bl	800b594 <HAL_GetTick>
 800e942:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e944:	88fb      	ldrh	r3, [r7, #6]
 800e946:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b01      	cmp	r3, #1
 800e952:	d002      	beq.n	800e95a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e954:	2302      	movs	r3, #2
 800e956:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e958:	e135      	b.n	800ebc6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800e95a:	68bb      	ldr	r3, [r7, #8]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d002      	beq.n	800e966 <HAL_SPI_Transmit+0x52>
 800e960:	88fb      	ldrh	r3, [r7, #6]
 800e962:	2b00      	cmp	r3, #0
 800e964:	d102      	bne.n	800e96c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e966:	2301      	movs	r3, #1
 800e968:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e96a:	e12c      	b.n	800ebc6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2203      	movs	r2, #3
 800e970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	2200      	movs	r2, #0
 800e978:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	88fa      	ldrh	r2, [r7, #6]
 800e984:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	88fa      	ldrh	r2, [r7, #6]
 800e98a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2200      	movs	r2, #0
 800e990:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2200      	movs	r2, #0
 800e996:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	689b      	ldr	r3, [r3, #8]
 800e9b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9b6:	d107      	bne.n	800e9c8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9c6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9d2:	2b40      	cmp	r3, #64	; 0x40
 800e9d4:	d007      	beq.n	800e9e6 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e9e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	68db      	ldr	r3, [r3, #12]
 800e9ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800e9ee:	d94b      	bls.n	800ea88 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	685b      	ldr	r3, [r3, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d002      	beq.n	800e9fe <HAL_SPI_Transmit+0xea>
 800e9f8:	8afb      	ldrh	r3, [r7, #22]
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d13e      	bne.n	800ea7c <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea02:	881a      	ldrh	r2, [r3, #0]
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea0e:	1c9a      	adds	r2, r3, #2
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea18:	b29b      	uxth	r3, r3
 800ea1a:	3b01      	subs	r3, #1
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ea22:	e02b      	b.n	800ea7c <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	689b      	ldr	r3, [r3, #8]
 800ea2a:	f003 0302 	and.w	r3, r3, #2
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d112      	bne.n	800ea58 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea36:	881a      	ldrh	r2, [r3, #0]
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea42:	1c9a      	adds	r2, r3, #2
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	b29a      	uxth	r2, r3
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ea56:	e011      	b.n	800ea7c <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea58:	f7fc fd9c 	bl	800b594 <HAL_GetTick>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	69bb      	ldr	r3, [r7, #24]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	683a      	ldr	r2, [r7, #0]
 800ea64:	429a      	cmp	r2, r3
 800ea66:	d803      	bhi.n	800ea70 <HAL_SPI_Transmit+0x15c>
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea6e:	d102      	bne.n	800ea76 <HAL_SPI_Transmit+0x162>
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d102      	bne.n	800ea7c <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800ea76:	2303      	movs	r3, #3
 800ea78:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ea7a:	e0a4      	b.n	800ebc6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d1ce      	bne.n	800ea24 <HAL_SPI_Transmit+0x110>
 800ea86:	e07c      	b.n	800eb82 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d002      	beq.n	800ea96 <HAL_SPI_Transmit+0x182>
 800ea90:	8afb      	ldrh	r3, [r7, #22]
 800ea92:	2b01      	cmp	r3, #1
 800ea94:	d170      	bne.n	800eb78 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d912      	bls.n	800eac6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa4:	881a      	ldrh	r2, [r3, #0]
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab0:	1c9a      	adds	r2, r3, #2
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	3b02      	subs	r3, #2
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eac4:	e058      	b.n	800eb78 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	681b      	ldr	r3, [r3, #0]
 800eace:	330c      	adds	r3, #12
 800ead0:	7812      	ldrb	r2, [r2, #0]
 800ead2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ead8:	1c5a      	adds	r2, r3, #1
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eae2:	b29b      	uxth	r3, r3
 800eae4:	3b01      	subs	r3, #1
 800eae6:	b29a      	uxth	r2, r3
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800eaec:	e044      	b.n	800eb78 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	f003 0302 	and.w	r3, r3, #2
 800eaf8:	2b02      	cmp	r3, #2
 800eafa:	d12b      	bne.n	800eb54 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb00:	b29b      	uxth	r3, r3
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d912      	bls.n	800eb2c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb0a:	881a      	ldrh	r2, [r3, #0]
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb16:	1c9a      	adds	r2, r3, #2
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	3b02      	subs	r3, #2
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb2a:	e025      	b.n	800eb78 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	330c      	adds	r3, #12
 800eb36:	7812      	ldrb	r2, [r2, #0]
 800eb38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3e:	1c5a      	adds	r2, r3, #1
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	3b01      	subs	r3, #1
 800eb4c:	b29a      	uxth	r2, r3
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eb52:	e011      	b.n	800eb78 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb54:	f7fc fd1e 	bl	800b594 <HAL_GetTick>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	69bb      	ldr	r3, [r7, #24]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	683a      	ldr	r2, [r7, #0]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d803      	bhi.n	800eb6c <HAL_SPI_Transmit+0x258>
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6a:	d102      	bne.n	800eb72 <HAL_SPI_Transmit+0x25e>
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d102      	bne.n	800eb78 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 800eb72:	2303      	movs	r3, #3
 800eb74:	77fb      	strb	r3, [r7, #31]
          goto error;
 800eb76:	e026      	b.n	800ebc6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eb7c:	b29b      	uxth	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d1b5      	bne.n	800eaee <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800eb82:	69ba      	ldr	r2, [r7, #24]
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	f000 fdf3 	bl	800f772 <SPI_EndRxTxTransaction>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d002      	beq.n	800eb98 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	2220      	movs	r2, #32
 800eb96:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	689b      	ldr	r3, [r3, #8]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d10a      	bne.n	800ebb6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800eba0:	2300      	movs	r3, #0
 800eba2:	613b      	str	r3, [r7, #16]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	613b      	str	r3, [r7, #16]
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	689b      	ldr	r3, [r3, #8]
 800ebb2:	613b      	str	r3, [r7, #16]
 800ebb4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d002      	beq.n	800ebc4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	77fb      	strb	r3, [r7, #31]
 800ebc2:	e000      	b.n	800ebc6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 800ebc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	2201      	movs	r2, #1
 800ebca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ebd6:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3720      	adds	r7, #32
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b08a      	sub	sp, #40	; 0x28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	60f8      	str	r0, [r7, #12]
 800ebe8:	60b9      	str	r1, [r7, #8]
 800ebea:	607a      	str	r2, [r7, #4]
 800ebec:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ebee:	2301      	movs	r3, #1
 800ebf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ebfe:	2b01      	cmp	r3, #1
 800ec00:	d101      	bne.n	800ec06 <HAL_SPI_TransmitReceive+0x26>
 800ec02:	2302      	movs	r3, #2
 800ec04:	e1fb      	b.n	800effe <HAL_SPI_TransmitReceive+0x41e>
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	2201      	movs	r2, #1
 800ec0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ec0e:	f7fc fcc1 	bl	800b594 <HAL_GetTick>
 800ec12:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ec1a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	685b      	ldr	r3, [r3, #4]
 800ec20:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ec22:	887b      	ldrh	r3, [r7, #2]
 800ec24:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ec26:	887b      	ldrh	r3, [r7, #2]
 800ec28:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ec2a:	7efb      	ldrb	r3, [r7, #27]
 800ec2c:	2b01      	cmp	r3, #1
 800ec2e:	d00e      	beq.n	800ec4e <HAL_SPI_TransmitReceive+0x6e>
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ec36:	d106      	bne.n	800ec46 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	689b      	ldr	r3, [r3, #8]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d102      	bne.n	800ec46 <HAL_SPI_TransmitReceive+0x66>
 800ec40:	7efb      	ldrb	r3, [r7, #27]
 800ec42:	2b04      	cmp	r3, #4
 800ec44:	d003      	beq.n	800ec4e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800ec46:	2302      	movs	r3, #2
 800ec48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ec4c:	e1cd      	b.n	800efea <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d005      	beq.n	800ec60 <HAL_SPI_TransmitReceive+0x80>
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d002      	beq.n	800ec60 <HAL_SPI_TransmitReceive+0x80>
 800ec5a:	887b      	ldrh	r3, [r7, #2]
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d103      	bne.n	800ec68 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800ec60:	2301      	movs	r3, #1
 800ec62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800ec66:	e1c0      	b.n	800efea <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	2b04      	cmp	r3, #4
 800ec72:	d003      	beq.n	800ec7c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2205      	movs	r2, #5
 800ec78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	687a      	ldr	r2, [r7, #4]
 800ec86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	887a      	ldrh	r2, [r7, #2]
 800ec8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	887a      	ldrh	r2, [r7, #2]
 800ec94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68ba      	ldr	r2, [r7, #8]
 800ec9c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	887a      	ldrh	r2, [r7, #2]
 800eca2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	887a      	ldrh	r2, [r7, #2]
 800eca8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	2200      	movs	r2, #0
 800ecae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	68db      	ldr	r3, [r3, #12]
 800ecba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ecbe:	d802      	bhi.n	800ecc6 <HAL_SPI_TransmitReceive+0xe6>
 800ecc0:	8a3b      	ldrh	r3, [r7, #16]
 800ecc2:	2b01      	cmp	r3, #1
 800ecc4:	d908      	bls.n	800ecd8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	685a      	ldr	r2, [r3, #4]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ecd4:	605a      	str	r2, [r3, #4]
 800ecd6:	e007      	b.n	800ece8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	685a      	ldr	r2, [r3, #4]
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ece6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ecf2:	2b40      	cmp	r3, #64	; 0x40
 800ecf4:	d007      	beq.n	800ed06 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ed04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	68db      	ldr	r3, [r3, #12]
 800ed0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ed0e:	d97c      	bls.n	800ee0a <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <HAL_SPI_TransmitReceive+0x13e>
 800ed18:	8a7b      	ldrh	r3, [r7, #18]
 800ed1a:	2b01      	cmp	r3, #1
 800ed1c:	d169      	bne.n	800edf2 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed22:	881a      	ldrh	r2, [r3, #0]
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2e:	1c9a      	adds	r2, r3, #2
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed38:	b29b      	uxth	r3, r3
 800ed3a:	3b01      	subs	r3, #1
 800ed3c:	b29a      	uxth	r2, r3
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ed42:	e056      	b.n	800edf2 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	689b      	ldr	r3, [r3, #8]
 800ed4a:	f003 0302 	and.w	r3, r3, #2
 800ed4e:	2b02      	cmp	r3, #2
 800ed50:	d11b      	bne.n	800ed8a <HAL_SPI_TransmitReceive+0x1aa>
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d016      	beq.n	800ed8a <HAL_SPI_TransmitReceive+0x1aa>
 800ed5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed5e:	2b01      	cmp	r3, #1
 800ed60:	d113      	bne.n	800ed8a <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed66:	881a      	ldrh	r2, [r3, #0]
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed72:	1c9a      	adds	r2, r3, #2
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ed7c:	b29b      	uxth	r3, r3
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ed86:	2300      	movs	r3, #0
 800ed88:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	689b      	ldr	r3, [r3, #8]
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	d11c      	bne.n	800edd2 <HAL_SPI_TransmitReceive+0x1f2>
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d016      	beq.n	800edd2 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68da      	ldr	r2, [r3, #12]
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edae:	b292      	uxth	r2, r2
 800edb0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edb6:	1c9a      	adds	r2, r3, #2
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	3b01      	subs	r3, #1
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800edce:	2301      	movs	r3, #1
 800edd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800edd2:	f7fc fbdf 	bl	800b594 <HAL_GetTick>
 800edd6:	4602      	mov	r2, r0
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	1ad3      	subs	r3, r2, r3
 800eddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800edde:	429a      	cmp	r2, r3
 800ede0:	d807      	bhi.n	800edf2 <HAL_SPI_TransmitReceive+0x212>
 800ede2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ede8:	d003      	beq.n	800edf2 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800edea:	2303      	movs	r3, #3
 800edec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800edf0:	e0fb      	b.n	800efea <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800edf6:	b29b      	uxth	r3, r3
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d1a3      	bne.n	800ed44 <HAL_SPI_TransmitReceive+0x164>
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ee02:	b29b      	uxth	r3, r3
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d19d      	bne.n	800ed44 <HAL_SPI_TransmitReceive+0x164>
 800ee08:	e0df      	b.n	800efca <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	685b      	ldr	r3, [r3, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d003      	beq.n	800ee1a <HAL_SPI_TransmitReceive+0x23a>
 800ee12:	8a7b      	ldrh	r3, [r7, #18]
 800ee14:	2b01      	cmp	r3, #1
 800ee16:	f040 80cb 	bne.w	800efb0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d912      	bls.n	800ee4a <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee28:	881a      	ldrh	r2, [r3, #0]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee30:	68fb      	ldr	r3, [r7, #12]
 800ee32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee34:	1c9a      	adds	r2, r3, #2
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	3b02      	subs	r3, #2
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee48:	e0b2      	b.n	800efb0 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	330c      	adds	r3, #12
 800ee54:	7812      	ldrb	r2, [r2, #0]
 800ee56:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee66:	b29b      	uxth	r3, r3
 800ee68:	3b01      	subs	r3, #1
 800ee6a:	b29a      	uxth	r2, r3
 800ee6c:	68fb      	ldr	r3, [r7, #12]
 800ee6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ee70:	e09e      	b.n	800efb0 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	689b      	ldr	r3, [r3, #8]
 800ee78:	f003 0302 	and.w	r3, r3, #2
 800ee7c:	2b02      	cmp	r3, #2
 800ee7e:	d134      	bne.n	800eeea <HAL_SPI_TransmitReceive+0x30a>
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee84:	b29b      	uxth	r3, r3
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d02f      	beq.n	800eeea <HAL_SPI_TransmitReceive+0x30a>
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	2b01      	cmp	r3, #1
 800ee8e:	d12c      	bne.n	800eeea <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee94:	b29b      	uxth	r3, r3
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d912      	bls.n	800eec0 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee9e:	881a      	ldrh	r2, [r3, #0]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeaa:	1c9a      	adds	r2, r3, #2
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	3b02      	subs	r3, #2
 800eeb8:	b29a      	uxth	r2, r3
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eebe:	e012      	b.n	800eee6 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	330c      	adds	r3, #12
 800eeca:	7812      	ldrb	r2, [r2, #0]
 800eecc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eedc:	b29b      	uxth	r3, r3
 800eede:	3b01      	subs	r3, #1
 800eee0:	b29a      	uxth	r2, r3
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800eee6:	2300      	movs	r3, #0
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f003 0301 	and.w	r3, r3, #1
 800eef4:	2b01      	cmp	r3, #1
 800eef6:	d148      	bne.n	800ef8a <HAL_SPI_TransmitReceive+0x3aa>
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d042      	beq.n	800ef8a <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d923      	bls.n	800ef58 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef1a:	b292      	uxth	r2, r2
 800ef1c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef22:	1c9a      	adds	r2, r3, #2
 800ef24:	68fb      	ldr	r3, [r7, #12]
 800ef26:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	3b02      	subs	r3, #2
 800ef32:	b29a      	uxth	r2, r3
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef40:	b29b      	uxth	r3, r3
 800ef42:	2b01      	cmp	r3, #1
 800ef44:	d81f      	bhi.n	800ef86 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	685a      	ldr	r2, [r3, #4]
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ef54:	605a      	str	r2, [r3, #4]
 800ef56:	e016      	b.n	800ef86 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f103 020c 	add.w	r2, r3, #12
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef64:	7812      	ldrb	r2, [r2, #0]
 800ef66:	b2d2      	uxtb	r2, r2
 800ef68:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef6e:	1c5a      	adds	r2, r3, #1
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ef7a:	b29b      	uxth	r3, r3
 800ef7c:	3b01      	subs	r3, #1
 800ef7e:	b29a      	uxth	r2, r3
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ef86:	2301      	movs	r3, #1
 800ef88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ef8a:	f7fc fb03 	bl	800b594 <HAL_GetTick>
 800ef8e:	4602      	mov	r2, r0
 800ef90:	69fb      	ldr	r3, [r7, #28]
 800ef92:	1ad3      	subs	r3, r2, r3
 800ef94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d803      	bhi.n	800efa2 <HAL_SPI_TransmitReceive+0x3c2>
 800ef9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa0:	d102      	bne.n	800efa8 <HAL_SPI_TransmitReceive+0x3c8>
 800efa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d103      	bne.n	800efb0 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800efa8:	2303      	movs	r3, #3
 800efaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800efae:	e01c      	b.n	800efea <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800efb4:	b29b      	uxth	r3, r3
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	f47f af5b 	bne.w	800ee72 <HAL_SPI_TransmitReceive+0x292>
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800efc2:	b29b      	uxth	r3, r3
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	f47f af54 	bne.w	800ee72 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800efca:	69fa      	ldr	r2, [r7, #28]
 800efcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800efce:	68f8      	ldr	r0, [r7, #12]
 800efd0:	f000 fbcf 	bl	800f772 <SPI_EndRxTxTransaction>
 800efd4:	4603      	mov	r3, r0
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d006      	beq.n	800efe8 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800efda:	2301      	movs	r3, #1
 800efdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2220      	movs	r2, #32
 800efe4:	661a      	str	r2, [r3, #96]	; 0x60
 800efe6:	e000      	b.n	800efea <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800efe8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2201      	movs	r2, #1
 800efee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800effa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800effe:	4618      	mov	r0, r3
 800f000:	3728      	adds	r7, #40	; 0x28
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
	...

0800f008 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800f008:	b580      	push	{r7, lr}
 800f00a:	b086      	sub	sp, #24
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	607a      	str	r2, [r7, #4]
 800f014:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f020:	2b01      	cmp	r3, #1
 800f022:	d101      	bne.n	800f028 <HAL_SPI_TransmitReceive_DMA+0x20>
 800f024:	2302      	movs	r3, #2
 800f026:	e16c      	b.n	800f302 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2201      	movs	r2, #1
 800f02c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f036:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	685b      	ldr	r3, [r3, #4]
 800f03c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800f03e:	7dbb      	ldrb	r3, [r7, #22]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d00d      	beq.n	800f060 <HAL_SPI_TransmitReceive_DMA+0x58>
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f04a:	d106      	bne.n	800f05a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	2b00      	cmp	r3, #0
 800f052:	d102      	bne.n	800f05a <HAL_SPI_TransmitReceive_DMA+0x52>
 800f054:	7dbb      	ldrb	r3, [r7, #22]
 800f056:	2b04      	cmp	r3, #4
 800f058:	d002      	beq.n	800f060 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800f05a:	2302      	movs	r3, #2
 800f05c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f05e:	e14b      	b.n	800f2f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d005      	beq.n	800f072 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d002      	beq.n	800f072 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800f06c:	887b      	ldrh	r3, [r7, #2]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d102      	bne.n	800f078 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800f072:	2301      	movs	r3, #1
 800f074:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f076:	e13f      	b.n	800f2f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b04      	cmp	r3, #4
 800f082:	d003      	beq.n	800f08c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2205      	movs	r2, #5
 800f088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	68ba      	ldr	r2, [r7, #8]
 800f096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	887a      	ldrh	r2, [r7, #2]
 800f09c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	887a      	ldrh	r2, [r7, #2]
 800f0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	887a      	ldrh	r2, [r7, #2]
 800f0ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	887a      	ldrh	r2, [r7, #2]
 800f0b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	685a      	ldr	r2, [r3, #4]
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800f0d4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	68db      	ldr	r3, [r3, #12]
 800f0da:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f0de:	d908      	bls.n	800f0f2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f0ee:	605a      	str	r2, [r3, #4]
 800f0f0:	e06f      	b.n	800f1d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f100:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f106:	699b      	ldr	r3, [r3, #24]
 800f108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f10c:	d126      	bne.n	800f15c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800f112:	f003 0301 	and.w	r3, r3, #1
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10f      	bne.n	800f13a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	685a      	ldr	r2, [r3, #4]
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f128:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f12e:	b29b      	uxth	r3, r3
 800f130:	085b      	lsrs	r3, r3, #1
 800f132:	b29a      	uxth	r2, r3
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f138:	e010      	b.n	800f15c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	685a      	ldr	r2, [r3, #4]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f148:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f14e:	b29b      	uxth	r3, r3
 800f150:	085b      	lsrs	r3, r3, #1
 800f152:	b29b      	uxth	r3, r3
 800f154:	3301      	adds	r3, #1
 800f156:	b29a      	uxth	r2, r3
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f166:	d134      	bne.n	800f1d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	685a      	ldr	r2, [r3, #4]
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f176:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f17e:	b29b      	uxth	r3, r3
 800f180:	f003 0301 	and.w	r3, r3, #1
 800f184:	2b00      	cmp	r3, #0
 800f186:	d111      	bne.n	800f1ac <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	685a      	ldr	r2, [r3, #4]
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f196:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f19e:	b29b      	uxth	r3, r3
 800f1a0:	085b      	lsrs	r3, r3, #1
 800f1a2:	b29a      	uxth	r2, r3
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f1aa:	e012      	b.n	800f1d2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	685a      	ldr	r2, [r3, #4]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f1ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	085b      	lsrs	r3, r3, #1
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	b29a      	uxth	r2, r3
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b04      	cmp	r3, #4
 800f1dc:	d108      	bne.n	800f1f0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1e2:	4a4a      	ldr	r2, [pc, #296]	; (800f30c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800f1e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1ea:	4a49      	ldr	r2, [pc, #292]	; (800f310 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800f1ec:	63da      	str	r2, [r3, #60]	; 0x3c
 800f1ee:	e007      	b.n	800f200 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1f4:	4a47      	ldr	r2, [pc, #284]	; (800f314 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800f1f6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f1fc:	4a46      	ldr	r2, [pc, #280]	; (800f318 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800f1fe:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f204:	4a45      	ldr	r2, [pc, #276]	; (800f31c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800f206:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f20c:	2200      	movs	r2, #0
 800f20e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	330c      	adds	r3, #12
 800f21a:	4619      	mov	r1, r3
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f220:	461a      	mov	r2, r3
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f228:	b29b      	uxth	r3, r3
 800f22a:	f7fc fb7f 	bl	800b92c <HAL_DMA_Start_IT>
 800f22e:	4603      	mov	r3, r0
 800f230:	2b00      	cmp	r3, #0
 800f232:	d00c      	beq.n	800f24e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f238:	f043 0210 	orr.w	r2, r3, #16
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800f240:	2301      	movs	r3, #1
 800f242:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	2201      	movs	r2, #1
 800f248:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800f24c:	e054      	b.n	800f2f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	685a      	ldr	r2, [r3, #4]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f042 0201 	orr.w	r2, r2, #1
 800f25c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f262:	2200      	movs	r2, #0
 800f264:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f26a:	2200      	movs	r2, #0
 800f26c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f272:	2200      	movs	r2, #0
 800f274:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f27a:	2200      	movs	r2, #0
 800f27c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f286:	4619      	mov	r1, r3
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	330c      	adds	r3, #12
 800f28e:	461a      	mov	r2, r3
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f294:	b29b      	uxth	r3, r3
 800f296:	f7fc fb49 	bl	800b92c <HAL_DMA_Start_IT>
 800f29a:	4603      	mov	r3, r0
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d00c      	beq.n	800f2ba <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f2a4:	f043 0210 	orr.w	r2, r3, #16
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800f2ac:	2301      	movs	r3, #1
 800f2ae:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2201      	movs	r2, #1
 800f2b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800f2b8:	e01e      	b.n	800f2f8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f2c4:	2b40      	cmp	r3, #64	; 0x40
 800f2c6:	d007      	beq.n	800f2d8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	681a      	ldr	r2, [r3, #0]
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f2d6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	685a      	ldr	r2, [r3, #4]
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	f042 0220 	orr.w	r2, r2, #32
 800f2e6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	685a      	ldr	r2, [r3, #4]
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f042 0202 	orr.w	r2, r2, #2
 800f2f6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f300:	7dfb      	ldrb	r3, [r7, #23]
}
 800f302:	4618      	mov	r0, r3
 800f304:	3718      	adds	r7, #24
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}
 800f30a:	bf00      	nop
 800f30c:	0800f49d 	.word	0x0800f49d
 800f310:	0800f385 	.word	0x0800f385
 800f314:	0800f4b9 	.word	0x0800f4b9
 800f318:	0800f40b 	.word	0x0800f40b
 800f31c:	0800f4d5 	.word	0x0800f4d5

0800f320 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f320:	b480      	push	{r7}
 800f322:	b083      	sub	sp, #12
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f328:	bf00      	nop
 800f32a:	370c      	adds	r7, #12
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr

0800f334 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f334:	b480      	push	{r7}
 800f336:	b083      	sub	sp, #12
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800f33c:	bf00      	nop
 800f33e:	370c      	adds	r7, #12
 800f340:	46bd      	mov	sp, r7
 800f342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f346:	4770      	bx	lr

0800f348 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f348:	b480      	push	{r7}
 800f34a:	b083      	sub	sp, #12
 800f34c:	af00      	add	r7, sp, #0
 800f34e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800f350:	bf00      	nop
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b083      	sub	sp, #12
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800f364:	bf00      	nop
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr

0800f370 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800f370:	b480      	push	{r7}
 800f372:	b083      	sub	sp, #12
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f378:	bf00      	nop
 800f37a:	370c      	adds	r7, #12
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f390:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f392:	f7fc f8ff 	bl	800b594 <HAL_GetTick>
 800f396:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f3a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3a6:	d02a      	beq.n	800f3fe <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	f022 0220 	bic.w	r2, r2, #32
 800f3b6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	681b      	ldr	r3, [r3, #0]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	f022 0203 	bic.w	r2, r2, #3
 800f3c6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	2164      	movs	r1, #100	; 0x64
 800f3cc:	68f8      	ldr	r0, [r7, #12]
 800f3ce:	f000 f978 	bl	800f6c2 <SPI_EndRxTransaction>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d002      	beq.n	800f3de <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	2220      	movs	r2, #32
 800f3dc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	2201      	movs	r2, #1
 800f3ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d003      	beq.n	800f3fe <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f3f6:	68f8      	ldr	r0, [r7, #12]
 800f3f8:	f7ff ffba 	bl	800f370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f3fc:	e002      	b.n	800f404 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800f3fe:	68f8      	ldr	r0, [r7, #12]
 800f400:	f7ff ff8e 	bl	800f320 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f404:	3710      	adds	r7, #16
 800f406:	46bd      	mov	sp, r7
 800f408:	bd80      	pop	{r7, pc}

0800f40a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f40a:	b580      	push	{r7, lr}
 800f40c:	b084      	sub	sp, #16
 800f40e:	af00      	add	r7, sp, #0
 800f410:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f416:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f418:	f7fc f8bc 	bl	800b594 <HAL_GetTick>
 800f41c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f42c:	d030      	beq.n	800f490 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	f022 0220 	bic.w	r2, r2, #32
 800f43c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800f43e:	68ba      	ldr	r2, [r7, #8]
 800f440:	2164      	movs	r1, #100	; 0x64
 800f442:	68f8      	ldr	r0, [r7, #12]
 800f444:	f000 f995 	bl	800f772 <SPI_EndRxTxTransaction>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d005      	beq.n	800f45a <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f452:	f043 0220 	orr.w	r2, r3, #32
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	685a      	ldr	r2, [r3, #4]
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	f022 0203 	bic.w	r2, r2, #3
 800f468:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2200      	movs	r2, #0
 800f474:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2201      	movs	r2, #1
 800f47c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f484:	2b00      	cmp	r3, #0
 800f486:	d003      	beq.n	800f490 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800f488:	68f8      	ldr	r0, [r7, #12]
 800f48a:	f7ff ff71 	bl	800f370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800f48e:	e002      	b.n	800f496 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	f7ff ff4f 	bl	800f334 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f496:	3710      	adds	r7, #16
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd80      	pop	{r7, pc}

0800f49c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b084      	sub	sp, #16
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4a8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	f7ff ff4c 	bl	800f348 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f4b0:	bf00      	nop
 800f4b2:	3710      	adds	r7, #16
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	bd80      	pop	{r7, pc}

0800f4b8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b084      	sub	sp, #16
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	f7ff ff48 	bl	800f35c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f4cc:	bf00      	nop
 800f4ce:	3710      	adds	r7, #16
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b084      	sub	sp, #16
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	f022 0203 	bic.w	r2, r2, #3
 800f4f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f4f6:	f043 0210 	orr.w	r2, r3, #16
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	2201      	movs	r2, #1
 800f502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff ff32 	bl	800f370 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f50c:	bf00      	nop
 800f50e:	3710      	adds	r7, #16
 800f510:	46bd      	mov	sp, r7
 800f512:	bd80      	pop	{r7, pc}

0800f514 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b084      	sub	sp, #16
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	603b      	str	r3, [r7, #0]
 800f520:	4613      	mov	r3, r2
 800f522:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f524:	e04c      	b.n	800f5c0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f526:	683b      	ldr	r3, [r7, #0]
 800f528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f52c:	d048      	beq.n	800f5c0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f52e:	f7fc f831 	bl	800b594 <HAL_GetTick>
 800f532:	4602      	mov	r2, r0
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	1ad3      	subs	r3, r2, r3
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d902      	bls.n	800f544 <SPI_WaitFlagStateUntilTimeout+0x30>
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d13d      	bne.n	800f5c0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	685a      	ldr	r2, [r3, #4]
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	681b      	ldr	r3, [r3, #0]
 800f54e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f552:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f55c:	d111      	bne.n	800f582 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	689b      	ldr	r3, [r3, #8]
 800f562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f566:	d004      	beq.n	800f572 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	689b      	ldr	r3, [r3, #8]
 800f56c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f570:	d107      	bne.n	800f582 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	681a      	ldr	r2, [r3, #0]
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f580:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f586:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f58a:	d10f      	bne.n	800f5ac <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	681a      	ldr	r2, [r3, #0]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f59a:	601a      	str	r2, [r3, #0]
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	681a      	ldr	r2, [r3, #0]
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f5aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f5bc:	2303      	movs	r3, #3
 800f5be:	e00f      	b.n	800f5e0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	689a      	ldr	r2, [r3, #8]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	4013      	ands	r3, r2
 800f5ca:	68ba      	ldr	r2, [r7, #8]
 800f5cc:	429a      	cmp	r2, r3
 800f5ce:	bf0c      	ite	eq
 800f5d0:	2301      	moveq	r3, #1
 800f5d2:	2300      	movne	r3, #0
 800f5d4:	b2db      	uxtb	r3, r3
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	79fb      	ldrb	r3, [r7, #7]
 800f5da:	429a      	cmp	r2, r3
 800f5dc:	d1a3      	bne.n	800f526 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800f5de:	2300      	movs	r3, #0
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bd80      	pop	{r7, pc}

0800f5e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	60f8      	str	r0, [r7, #12]
 800f5f0:	60b9      	str	r1, [r7, #8]
 800f5f2:	607a      	str	r2, [r7, #4]
 800f5f4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800f5f6:	e057      	b.n	800f6a8 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f5f8:	68bb      	ldr	r3, [r7, #8]
 800f5fa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f5fe:	d106      	bne.n	800f60e <SPI_WaitFifoStateUntilTimeout+0x26>
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2b00      	cmp	r3, #0
 800f604:	d103      	bne.n	800f60e <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	330c      	adds	r3, #12
 800f60c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f60e:	683b      	ldr	r3, [r7, #0]
 800f610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f614:	d048      	beq.n	800f6a8 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800f616:	f7fb ffbd 	bl	800b594 <HAL_GetTick>
 800f61a:	4602      	mov	r2, r0
 800f61c:	69bb      	ldr	r3, [r7, #24]
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	683a      	ldr	r2, [r7, #0]
 800f622:	429a      	cmp	r2, r3
 800f624:	d902      	bls.n	800f62c <SPI_WaitFifoStateUntilTimeout+0x44>
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d13d      	bne.n	800f6a8 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	685a      	ldr	r2, [r3, #4]
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f63a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	685b      	ldr	r3, [r3, #4]
 800f640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f644:	d111      	bne.n	800f66a <SPI_WaitFifoStateUntilTimeout+0x82>
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	689b      	ldr	r3, [r3, #8]
 800f64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f64e:	d004      	beq.n	800f65a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	689b      	ldr	r3, [r3, #8]
 800f654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f658:	d107      	bne.n	800f66a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	681a      	ldr	r2, [r3, #0]
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f668:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f66e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f672:	d10f      	bne.n	800f694 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	681a      	ldr	r2, [r3, #0]
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f682:	601a      	str	r2, [r3, #0]
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f692:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	2201      	movs	r2, #1
 800f698:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f6a4:	2303      	movs	r3, #3
 800f6a6:	e008      	b.n	800f6ba <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	689a      	ldr	r2, [r3, #8]
 800f6ae:	68bb      	ldr	r3, [r7, #8]
 800f6b0:	4013      	ands	r3, r2
 800f6b2:	687a      	ldr	r2, [r7, #4]
 800f6b4:	429a      	cmp	r2, r3
 800f6b6:	d19f      	bne.n	800f5f8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800f6b8:	2300      	movs	r3, #0
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}

0800f6c2 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f6c2:	b580      	push	{r7, lr}
 800f6c4:	b086      	sub	sp, #24
 800f6c6:	af02      	add	r7, sp, #8
 800f6c8:	60f8      	str	r0, [r7, #12]
 800f6ca:	60b9      	str	r1, [r7, #8]
 800f6cc:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f6d6:	d111      	bne.n	800f6fc <SPI_EndRxTransaction+0x3a>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	689b      	ldr	r3, [r3, #8]
 800f6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6e0:	d004      	beq.n	800f6ec <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6ea:	d107      	bne.n	800f6fc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	681a      	ldr	r2, [r3, #0]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	681b      	ldr	r3, [r3, #0]
 800f6f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f6fa:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	9300      	str	r3, [sp, #0]
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	2200      	movs	r2, #0
 800f704:	2180      	movs	r1, #128	; 0x80
 800f706:	68f8      	ldr	r0, [r7, #12]
 800f708:	f7ff ff04 	bl	800f514 <SPI_WaitFlagStateUntilTimeout>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d007      	beq.n	800f722 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f716:	f043 0220 	orr.w	r2, r3, #32
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f71e:	2303      	movs	r3, #3
 800f720:	e023      	b.n	800f76a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f72a:	d11d      	bne.n	800f768 <SPI_EndRxTransaction+0xa6>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	689b      	ldr	r3, [r3, #8]
 800f730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f734:	d004      	beq.n	800f740 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	689b      	ldr	r3, [r3, #8]
 800f73a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f73e:	d113      	bne.n	800f768 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	9300      	str	r3, [sp, #0]
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	2200      	movs	r2, #0
 800f748:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f7ff ff4b 	bl	800f5e8 <SPI_WaitFifoStateUntilTimeout>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d007      	beq.n	800f768 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f75c:	f043 0220 	orr.w	r2, r3, #32
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f764:	2303      	movs	r3, #3
 800f766:	e000      	b.n	800f76a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f768:	2300      	movs	r3, #0
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3710      	adds	r7, #16
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f772:	b580      	push	{r7, lr}
 800f774:	b086      	sub	sp, #24
 800f776:	af02      	add	r7, sp, #8
 800f778:	60f8      	str	r0, [r7, #12]
 800f77a:	60b9      	str	r1, [r7, #8]
 800f77c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	9300      	str	r3, [sp, #0]
 800f782:	68bb      	ldr	r3, [r7, #8]
 800f784:	2200      	movs	r2, #0
 800f786:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f78a:	68f8      	ldr	r0, [r7, #12]
 800f78c:	f7ff ff2c 	bl	800f5e8 <SPI_WaitFifoStateUntilTimeout>
 800f790:	4603      	mov	r3, r0
 800f792:	2b00      	cmp	r3, #0
 800f794:	d007      	beq.n	800f7a6 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f79a:	f043 0220 	orr.w	r2, r3, #32
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	e027      	b.n	800f7f6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	9300      	str	r3, [sp, #0]
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	2180      	movs	r1, #128	; 0x80
 800f7b0:	68f8      	ldr	r0, [r7, #12]
 800f7b2:	f7ff feaf 	bl	800f514 <SPI_WaitFlagStateUntilTimeout>
 800f7b6:	4603      	mov	r3, r0
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d007      	beq.n	800f7cc <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7c0:	f043 0220 	orr.w	r2, r3, #32
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f7c8:	2303      	movs	r3, #3
 800f7ca:	e014      	b.n	800f7f6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	9300      	str	r3, [sp, #0]
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f7ff ff05 	bl	800f5e8 <SPI_WaitFifoStateUntilTimeout>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d007      	beq.n	800f7f4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f7e8:	f043 0220 	orr.w	r2, r3, #32
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f7f0:	2303      	movs	r3, #3
 800f7f2:	e000      	b.n	800f7f6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b082      	sub	sp, #8
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d101      	bne.n	800f810 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f80c:	2301      	movs	r3, #1
 800f80e:	e040      	b.n	800f892 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f814:	2b00      	cmp	r3, #0
 800f816:	d106      	bne.n	800f826 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2200      	movs	r2, #0
 800f81c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f820:	6878      	ldr	r0, [r7, #4]
 800f822:	f7fb fd35 	bl	800b290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	2224      	movs	r2, #36	; 0x24
 800f82a:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f022 0201 	bic.w	r2, r2, #1
 800f83a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f000 fab9 	bl	800fdb4 <UART_SetConfig>
 800f842:	4603      	mov	r3, r0
 800f844:	2b01      	cmp	r3, #1
 800f846:	d101      	bne.n	800f84c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f848:	2301      	movs	r3, #1
 800f84a:	e022      	b.n	800f892 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f850:	2b00      	cmp	r3, #0
 800f852:	d002      	beq.n	800f85a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f854:	6878      	ldr	r0, [r7, #4]
 800f856:	f000 fd57 	bl	8010308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	685a      	ldr	r2, [r3, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f868:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	689a      	ldr	r2, [r3, #8]
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f878:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	681a      	ldr	r2, [r3, #0]
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	f042 0201 	orr.w	r2, r2, #1
 800f888:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f000 fdde 	bl	801044c <UART_CheckIdleState>
 800f890:	4603      	mov	r3, r0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3708      	adds	r7, #8
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
	...

0800f89c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f89c:	b480      	push	{r7}
 800f89e:	b085      	sub	sp, #20
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	60f8      	str	r0, [r7, #12]
 800f8a4:	60b9      	str	r1, [r7, #8]
 800f8a6:	4613      	mov	r3, r2
 800f8a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8ae:	2b20      	cmp	r3, #32
 800f8b0:	f040 808a 	bne.w	800f9c8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d002      	beq.n	800f8c0 <HAL_UART_Receive_IT+0x24>
 800f8ba:	88fb      	ldrh	r3, [r7, #6]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d101      	bne.n	800f8c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f8c0:	2301      	movs	r3, #1
 800f8c2:	e082      	b.n	800f9ca <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d101      	bne.n	800f8d2 <HAL_UART_Receive_IT+0x36>
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	e07b      	b.n	800f9ca <HAL_UART_Receive_IT+0x12e>
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	68ba      	ldr	r2, [r7, #8]
 800f8de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	88fa      	ldrh	r2, [r7, #6]
 800f8e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	88fa      	ldrh	r2, [r7, #6]
 800f8ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	2200      	movs	r2, #0
 800f8f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	689b      	ldr	r3, [r3, #8]
 800f8fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f8fe:	d10e      	bne.n	800f91e <HAL_UART_Receive_IT+0x82>
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	691b      	ldr	r3, [r3, #16]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d105      	bne.n	800f914 <HAL_UART_Receive_IT+0x78>
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f90e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f912:	e02d      	b.n	800f970 <HAL_UART_Receive_IT+0xd4>
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	22ff      	movs	r2, #255	; 0xff
 800f918:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f91c:	e028      	b.n	800f970 <HAL_UART_Receive_IT+0xd4>
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	2b00      	cmp	r3, #0
 800f924:	d10d      	bne.n	800f942 <HAL_UART_Receive_IT+0xa6>
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	691b      	ldr	r3, [r3, #16]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d104      	bne.n	800f938 <HAL_UART_Receive_IT+0x9c>
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	22ff      	movs	r2, #255	; 0xff
 800f932:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f936:	e01b      	b.n	800f970 <HAL_UART_Receive_IT+0xd4>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	227f      	movs	r2, #127	; 0x7f
 800f93c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f940:	e016      	b.n	800f970 <HAL_UART_Receive_IT+0xd4>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	689b      	ldr	r3, [r3, #8]
 800f946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f94a:	d10d      	bne.n	800f968 <HAL_UART_Receive_IT+0xcc>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	691b      	ldr	r3, [r3, #16]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d104      	bne.n	800f95e <HAL_UART_Receive_IT+0xc2>
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	227f      	movs	r2, #127	; 0x7f
 800f958:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f95c:	e008      	b.n	800f970 <HAL_UART_Receive_IT+0xd4>
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	223f      	movs	r2, #63	; 0x3f
 800f962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f966:	e003      	b.n	800f970 <HAL_UART_Receive_IT+0xd4>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2200      	movs	r2, #0
 800f974:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2222      	movs	r2, #34	; 0x22
 800f97a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	689a      	ldr	r2, [r3, #8]
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f042 0201 	orr.w	r2, r2, #1
 800f98a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	689b      	ldr	r3, [r3, #8]
 800f990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f994:	d107      	bne.n	800f9a6 <HAL_UART_Receive_IT+0x10a>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d103      	bne.n	800f9a6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	4a0d      	ldr	r2, [pc, #52]	; (800f9d8 <HAL_UART_Receive_IT+0x13c>)
 800f9a2:	661a      	str	r2, [r3, #96]	; 0x60
 800f9a4:	e002      	b.n	800f9ac <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	4a0c      	ldr	r2, [pc, #48]	; (800f9dc <HAL_UART_Receive_IT+0x140>)
 800f9aa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	681a      	ldr	r2, [r3, #0]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800f9c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	e000      	b.n	800f9ca <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800f9c8:	2302      	movs	r3, #2
  }
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3714      	adds	r7, #20
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d4:	4770      	bx	lr
 800f9d6:	bf00      	nop
 800f9d8:	0801081f 	.word	0x0801081f
 800f9dc:	08010779 	.word	0x08010779

0800f9e0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b084      	sub	sp, #16
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	4613      	mov	r3, r2
 800f9ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f9f2:	2b20      	cmp	r3, #32
 800f9f4:	d164      	bne.n	800fac0 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d002      	beq.n	800fa02 <HAL_UART_Transmit_DMA+0x22>
 800f9fc:	88fb      	ldrh	r3, [r7, #6]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d101      	bne.n	800fa06 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800fa02:	2301      	movs	r3, #1
 800fa04:	e05d      	b.n	800fac2 <HAL_UART_Transmit_DMA+0xe2>
    }

    __HAL_LOCK(huart);
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800fa0c:	2b01      	cmp	r3, #1
 800fa0e:	d101      	bne.n	800fa14 <HAL_UART_Transmit_DMA+0x34>
 800fa10:	2302      	movs	r3, #2
 800fa12:	e056      	b.n	800fac2 <HAL_UART_Transmit_DMA+0xe2>
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2201      	movs	r2, #1
 800fa18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	68ba      	ldr	r2, [r7, #8]
 800fa20:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	88fa      	ldrh	r2, [r7, #6]
 800fa26:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	88fa      	ldrh	r2, [r7, #6]
 800fa2e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2200      	movs	r2, #0
 800fa36:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	2221      	movs	r2, #33	; 0x21
 800fa3c:	675a      	str	r2, [r3, #116]	; 0x74

    if (huart->hdmatx != NULL)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d02a      	beq.n	800fa9c <HAL_UART_Transmit_DMA+0xbc>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa4a:	4a20      	ldr	r2, [pc, #128]	; (800facc <HAL_UART_Transmit_DMA+0xec>)
 800fa4c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa52:	4a1f      	ldr	r2, [pc, #124]	; (800fad0 <HAL_UART_Transmit_DMA+0xf0>)
 800fa54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa5a:	4a1e      	ldr	r2, [pc, #120]	; (800fad4 <HAL_UART_Transmit_DMA+0xf4>)
 800fa5c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa62:	2200      	movs	r2, #0
 800fa64:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fa6e:	4619      	mov	r1, r3
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	3328      	adds	r3, #40	; 0x28
 800fa76:	461a      	mov	r2, r3
 800fa78:	88fb      	ldrh	r3, [r7, #6]
 800fa7a:	f7fb ff57 	bl	800b92c <HAL_DMA_Start_IT>
 800fa7e:	4603      	mov	r3, r0
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00b      	beq.n	800fa9c <HAL_UART_Transmit_DMA+0xbc>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	2210      	movs	r2, #16
 800fa88:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	2220      	movs	r2, #32
 800fa96:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e012      	b.n	800fac2 <HAL_UART_Transmit_DMA+0xe2>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	2240      	movs	r2, #64	; 0x40
 800faa2:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	689a      	ldr	r2, [r3, #8]
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800faba:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fabc:	2300      	movs	r3, #0
 800fabe:	e000      	b.n	800fac2 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 800fac0:	2302      	movs	r3, #2
  }
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	08010637 	.word	0x08010637
 800fad0:	08010687 	.word	0x08010687
 800fad4:	080106a3 	.word	0x080106a3

0800fad8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	69db      	ldr	r3, [r3, #28]
 800fae6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	689b      	ldr	r3, [r3, #8]
 800faf6:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800faf8:	69fa      	ldr	r2, [r7, #28]
 800fafa:	f640 030f 	movw	r3, #2063	; 0x80f
 800fafe:	4013      	ands	r3, r2
 800fb00:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d113      	bne.n	800fb30 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	f003 0320 	and.w	r3, r3, #32
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d00e      	beq.n	800fb30 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fb12:	69bb      	ldr	r3, [r7, #24]
 800fb14:	f003 0320 	and.w	r3, r3, #32
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d009      	beq.n	800fb30 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	f000 8114 	beq.w	800fd4e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fb2a:	6878      	ldr	r0, [r7, #4]
 800fb2c:	4798      	blx	r3
      }
      return;
 800fb2e:	e10e      	b.n	800fd4e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	f000 80d6 	beq.w	800fce4 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	f003 0301 	and.w	r3, r3, #1
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d105      	bne.n	800fb4e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800fb42:	69bb      	ldr	r3, [r7, #24]
 800fb44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f000 80cb 	beq.w	800fce4 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800fb4e:	69fb      	ldr	r3, [r7, #28]
 800fb50:	f003 0301 	and.w	r3, r3, #1
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d00e      	beq.n	800fb76 <HAL_UART_IRQHandler+0x9e>
 800fb58:	69bb      	ldr	r3, [r7, #24]
 800fb5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d009      	beq.n	800fb76 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2201      	movs	r2, #1
 800fb68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb6e:	f043 0201 	orr.w	r2, r3, #1
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb76:	69fb      	ldr	r3, [r7, #28]
 800fb78:	f003 0302 	and.w	r3, r3, #2
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00e      	beq.n	800fb9e <HAL_UART_IRQHandler+0xc6>
 800fb80:	697b      	ldr	r3, [r7, #20]
 800fb82:	f003 0301 	and.w	r3, r3, #1
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d009      	beq.n	800fb9e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	2202      	movs	r2, #2
 800fb90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fb96:	f043 0204 	orr.w	r2, r3, #4
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fb9e:	69fb      	ldr	r3, [r7, #28]
 800fba0:	f003 0304 	and.w	r3, r3, #4
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00e      	beq.n	800fbc6 <HAL_UART_IRQHandler+0xee>
 800fba8:	697b      	ldr	r3, [r7, #20]
 800fbaa:	f003 0301 	and.w	r3, r3, #1
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d009      	beq.n	800fbc6 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2204      	movs	r2, #4
 800fbb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbbe:	f043 0202 	orr.w	r2, r3, #2
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fbc6:	69fb      	ldr	r3, [r7, #28]
 800fbc8:	f003 0308 	and.w	r3, r3, #8
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d013      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fbd0:	69bb      	ldr	r3, [r7, #24]
 800fbd2:	f003 0320 	and.w	r3, r3, #32
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d104      	bne.n	800fbe4 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fbda:	697b      	ldr	r3, [r7, #20]
 800fbdc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d009      	beq.n	800fbf8 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	2208      	movs	r2, #8
 800fbea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fbf0:	f043 0208 	orr.w	r2, r3, #8
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fbf8:	69fb      	ldr	r3, [r7, #28]
 800fbfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d00f      	beq.n	800fc22 <HAL_UART_IRQHandler+0x14a>
 800fc02:	69bb      	ldr	r3, [r7, #24]
 800fc04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00a      	beq.n	800fc22 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc1a:	f043 0220 	orr.w	r2, r3, #32
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f000 8093 	beq.w	800fd52 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	f003 0320 	and.w	r3, r3, #32
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d00c      	beq.n	800fc50 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	f003 0320 	and.w	r3, r3, #32
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d007      	beq.n	800fc50 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d003      	beq.n	800fc50 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fc4c:	6878      	ldr	r0, [r7, #4]
 800fc4e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fc54:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	689b      	ldr	r3, [r3, #8]
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b40      	cmp	r3, #64	; 0x40
 800fc62:	d004      	beq.n	800fc6e <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d031      	beq.n	800fcd2 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f000 fcc1 	bl	80105f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	689b      	ldr	r3, [r3, #8]
 800fc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc7e:	2b40      	cmp	r3, #64	; 0x40
 800fc80:	d123      	bne.n	800fcca <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	689a      	ldr	r2, [r3, #8]
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800fc90:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d013      	beq.n	800fcc2 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc9e:	4a30      	ldr	r2, [pc, #192]	; (800fd60 <HAL_UART_IRQHandler+0x288>)
 800fca0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fca6:	4618      	mov	r0, r3
 800fca8:	f7fb fea0 	bl	800b9ec <HAL_DMA_Abort_IT>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d016      	beq.n	800fce0 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fcb8:	687a      	ldr	r2, [r7, #4]
 800fcba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800fcbc:	4610      	mov	r0, r2
 800fcbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcc0:	e00e      	b.n	800fce0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 f862 	bl	800fd8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcc8:	e00a      	b.n	800fce0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fcca:	6878      	ldr	r0, [r7, #4]
 800fccc:	f000 f85e 	bl	800fd8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fcd0:	e006      	b.n	800fce0 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	f000 f85a 	bl	800fd8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800fcde:	e038      	b.n	800fd52 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fce0:	bf00      	nop
    return;
 800fce2:	e036      	b.n	800fd52 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fce4:	69fb      	ldr	r3, [r7, #28]
 800fce6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d00d      	beq.n	800fd0a <HAL_UART_IRQHandler+0x232>
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d008      	beq.n	800fd0a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800fd00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f000 f84c 	bl	800fda0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fd08:	e026      	b.n	800fd58 <HAL_UART_IRQHandler+0x280>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fd0a:	69fb      	ldr	r3, [r7, #28]
 800fd0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d00d      	beq.n	800fd30 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d008      	beq.n	800fd30 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d017      	beq.n	800fd56 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd2a:	6878      	ldr	r0, [r7, #4]
 800fd2c:	4798      	blx	r3
    }
    return;
 800fd2e:	e012      	b.n	800fd56 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800fd30:	69fb      	ldr	r3, [r7, #28]
 800fd32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00e      	beq.n	800fd58 <HAL_UART_IRQHandler+0x280>
 800fd3a:	69bb      	ldr	r3, [r7, #24]
 800fd3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d009      	beq.n	800fd58 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f000 fcfe 	bl	8010746 <UART_EndTransmit_IT>
    return;
 800fd4a:	bf00      	nop
 800fd4c:	e004      	b.n	800fd58 <HAL_UART_IRQHandler+0x280>
      return;
 800fd4e:	bf00      	nop
 800fd50:	e002      	b.n	800fd58 <HAL_UART_IRQHandler+0x280>
    return;
 800fd52:	bf00      	nop
 800fd54:	e000      	b.n	800fd58 <HAL_UART_IRQHandler+0x280>
    return;
 800fd56:	bf00      	nop
  }

}
 800fd58:	3720      	adds	r7, #32
 800fd5a:	46bd      	mov	sp, r7
 800fd5c:	bd80      	pop	{r7, pc}
 800fd5e:	bf00      	nop
 800fd60:	0801071b 	.word	0x0801071b

0800fd64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd64:	b480      	push	{r7}
 800fd66:	b083      	sub	sp, #12
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fd6c:	bf00      	nop
 800fd6e:	370c      	adds	r7, #12
 800fd70:	46bd      	mov	sp, r7
 800fd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd76:	4770      	bx	lr

0800fd78 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800fd80:	bf00      	nop
 800fd82:	370c      	adds	r7, #12
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fd94:	bf00      	nop
 800fd96:	370c      	adds	r7, #12
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd9e:	4770      	bx	lr

0800fda0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fda8:	bf00      	nop
 800fdaa:	370c      	adds	r7, #12
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fdb4:	b580      	push	{r7, lr}
 800fdb6:	b088      	sub	sp, #32
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	689a      	ldr	r2, [r3, #8]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	691b      	ldr	r3, [r3, #16]
 800fdcc:	431a      	orrs	r2, r3
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	695b      	ldr	r3, [r3, #20]
 800fdd2:	431a      	orrs	r2, r3
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	69db      	ldr	r3, [r3, #28]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	681a      	ldr	r2, [r3, #0]
 800fde2:	4bb1      	ldr	r3, [pc, #708]	; (80100a8 <UART_SetConfig+0x2f4>)
 800fde4:	4013      	ands	r3, r2
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	6812      	ldr	r2, [r2, #0]
 800fdea:	6939      	ldr	r1, [r7, #16]
 800fdec:	430b      	orrs	r3, r1
 800fdee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	685b      	ldr	r3, [r3, #4]
 800fdf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	68da      	ldr	r2, [r3, #12]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	430a      	orrs	r2, r1
 800fe04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	699b      	ldr	r3, [r3, #24]
 800fe0a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	6a1b      	ldr	r3, [r3, #32]
 800fe10:	693a      	ldr	r2, [r7, #16]
 800fe12:	4313      	orrs	r3, r2
 800fe14:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	689b      	ldr	r3, [r3, #8]
 800fe1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	693a      	ldr	r2, [r7, #16]
 800fe26:	430a      	orrs	r2, r1
 800fe28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	4a9f      	ldr	r2, [pc, #636]	; (80100ac <UART_SetConfig+0x2f8>)
 800fe30:	4293      	cmp	r3, r2
 800fe32:	d121      	bne.n	800fe78 <UART_SetConfig+0xc4>
 800fe34:	4b9e      	ldr	r3, [pc, #632]	; (80100b0 <UART_SetConfig+0x2fc>)
 800fe36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe3a:	f003 0303 	and.w	r3, r3, #3
 800fe3e:	2b03      	cmp	r3, #3
 800fe40:	d816      	bhi.n	800fe70 <UART_SetConfig+0xbc>
 800fe42:	a201      	add	r2, pc, #4	; (adr r2, 800fe48 <UART_SetConfig+0x94>)
 800fe44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe48:	0800fe59 	.word	0x0800fe59
 800fe4c:	0800fe65 	.word	0x0800fe65
 800fe50:	0800fe5f 	.word	0x0800fe5f
 800fe54:	0800fe6b 	.word	0x0800fe6b
 800fe58:	2301      	movs	r3, #1
 800fe5a:	77fb      	strb	r3, [r7, #31]
 800fe5c:	e151      	b.n	8010102 <UART_SetConfig+0x34e>
 800fe5e:	2302      	movs	r3, #2
 800fe60:	77fb      	strb	r3, [r7, #31]
 800fe62:	e14e      	b.n	8010102 <UART_SetConfig+0x34e>
 800fe64:	2304      	movs	r3, #4
 800fe66:	77fb      	strb	r3, [r7, #31]
 800fe68:	e14b      	b.n	8010102 <UART_SetConfig+0x34e>
 800fe6a:	2308      	movs	r3, #8
 800fe6c:	77fb      	strb	r3, [r7, #31]
 800fe6e:	e148      	b.n	8010102 <UART_SetConfig+0x34e>
 800fe70:	2310      	movs	r3, #16
 800fe72:	77fb      	strb	r3, [r7, #31]
 800fe74:	bf00      	nop
 800fe76:	e144      	b.n	8010102 <UART_SetConfig+0x34e>
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	4a8d      	ldr	r2, [pc, #564]	; (80100b4 <UART_SetConfig+0x300>)
 800fe7e:	4293      	cmp	r3, r2
 800fe80:	d134      	bne.n	800feec <UART_SetConfig+0x138>
 800fe82:	4b8b      	ldr	r3, [pc, #556]	; (80100b0 <UART_SetConfig+0x2fc>)
 800fe84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe88:	f003 030c 	and.w	r3, r3, #12
 800fe8c:	2b0c      	cmp	r3, #12
 800fe8e:	d829      	bhi.n	800fee4 <UART_SetConfig+0x130>
 800fe90:	a201      	add	r2, pc, #4	; (adr r2, 800fe98 <UART_SetConfig+0xe4>)
 800fe92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe96:	bf00      	nop
 800fe98:	0800fecd 	.word	0x0800fecd
 800fe9c:	0800fee5 	.word	0x0800fee5
 800fea0:	0800fee5 	.word	0x0800fee5
 800fea4:	0800fee5 	.word	0x0800fee5
 800fea8:	0800fed9 	.word	0x0800fed9
 800feac:	0800fee5 	.word	0x0800fee5
 800feb0:	0800fee5 	.word	0x0800fee5
 800feb4:	0800fee5 	.word	0x0800fee5
 800feb8:	0800fed3 	.word	0x0800fed3
 800febc:	0800fee5 	.word	0x0800fee5
 800fec0:	0800fee5 	.word	0x0800fee5
 800fec4:	0800fee5 	.word	0x0800fee5
 800fec8:	0800fedf 	.word	0x0800fedf
 800fecc:	2300      	movs	r3, #0
 800fece:	77fb      	strb	r3, [r7, #31]
 800fed0:	e117      	b.n	8010102 <UART_SetConfig+0x34e>
 800fed2:	2302      	movs	r3, #2
 800fed4:	77fb      	strb	r3, [r7, #31]
 800fed6:	e114      	b.n	8010102 <UART_SetConfig+0x34e>
 800fed8:	2304      	movs	r3, #4
 800feda:	77fb      	strb	r3, [r7, #31]
 800fedc:	e111      	b.n	8010102 <UART_SetConfig+0x34e>
 800fede:	2308      	movs	r3, #8
 800fee0:	77fb      	strb	r3, [r7, #31]
 800fee2:	e10e      	b.n	8010102 <UART_SetConfig+0x34e>
 800fee4:	2310      	movs	r3, #16
 800fee6:	77fb      	strb	r3, [r7, #31]
 800fee8:	bf00      	nop
 800feea:	e10a      	b.n	8010102 <UART_SetConfig+0x34e>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a71      	ldr	r2, [pc, #452]	; (80100b8 <UART_SetConfig+0x304>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d120      	bne.n	800ff38 <UART_SetConfig+0x184>
 800fef6:	4b6e      	ldr	r3, [pc, #440]	; (80100b0 <UART_SetConfig+0x2fc>)
 800fef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fefc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ff00:	2b10      	cmp	r3, #16
 800ff02:	d00f      	beq.n	800ff24 <UART_SetConfig+0x170>
 800ff04:	2b10      	cmp	r3, #16
 800ff06:	d802      	bhi.n	800ff0e <UART_SetConfig+0x15a>
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d005      	beq.n	800ff18 <UART_SetConfig+0x164>
 800ff0c:	e010      	b.n	800ff30 <UART_SetConfig+0x17c>
 800ff0e:	2b20      	cmp	r3, #32
 800ff10:	d005      	beq.n	800ff1e <UART_SetConfig+0x16a>
 800ff12:	2b30      	cmp	r3, #48	; 0x30
 800ff14:	d009      	beq.n	800ff2a <UART_SetConfig+0x176>
 800ff16:	e00b      	b.n	800ff30 <UART_SetConfig+0x17c>
 800ff18:	2300      	movs	r3, #0
 800ff1a:	77fb      	strb	r3, [r7, #31]
 800ff1c:	e0f1      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff1e:	2302      	movs	r3, #2
 800ff20:	77fb      	strb	r3, [r7, #31]
 800ff22:	e0ee      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff24:	2304      	movs	r3, #4
 800ff26:	77fb      	strb	r3, [r7, #31]
 800ff28:	e0eb      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff2a:	2308      	movs	r3, #8
 800ff2c:	77fb      	strb	r3, [r7, #31]
 800ff2e:	e0e8      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff30:	2310      	movs	r3, #16
 800ff32:	77fb      	strb	r3, [r7, #31]
 800ff34:	bf00      	nop
 800ff36:	e0e4      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	4a5f      	ldr	r2, [pc, #380]	; (80100bc <UART_SetConfig+0x308>)
 800ff3e:	4293      	cmp	r3, r2
 800ff40:	d120      	bne.n	800ff84 <UART_SetConfig+0x1d0>
 800ff42:	4b5b      	ldr	r3, [pc, #364]	; (80100b0 <UART_SetConfig+0x2fc>)
 800ff44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff48:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ff4c:	2b40      	cmp	r3, #64	; 0x40
 800ff4e:	d00f      	beq.n	800ff70 <UART_SetConfig+0x1bc>
 800ff50:	2b40      	cmp	r3, #64	; 0x40
 800ff52:	d802      	bhi.n	800ff5a <UART_SetConfig+0x1a6>
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d005      	beq.n	800ff64 <UART_SetConfig+0x1b0>
 800ff58:	e010      	b.n	800ff7c <UART_SetConfig+0x1c8>
 800ff5a:	2b80      	cmp	r3, #128	; 0x80
 800ff5c:	d005      	beq.n	800ff6a <UART_SetConfig+0x1b6>
 800ff5e:	2bc0      	cmp	r3, #192	; 0xc0
 800ff60:	d009      	beq.n	800ff76 <UART_SetConfig+0x1c2>
 800ff62:	e00b      	b.n	800ff7c <UART_SetConfig+0x1c8>
 800ff64:	2300      	movs	r3, #0
 800ff66:	77fb      	strb	r3, [r7, #31]
 800ff68:	e0cb      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff6a:	2302      	movs	r3, #2
 800ff6c:	77fb      	strb	r3, [r7, #31]
 800ff6e:	e0c8      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff70:	2304      	movs	r3, #4
 800ff72:	77fb      	strb	r3, [r7, #31]
 800ff74:	e0c5      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff76:	2308      	movs	r3, #8
 800ff78:	77fb      	strb	r3, [r7, #31]
 800ff7a:	e0c2      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff7c:	2310      	movs	r3, #16
 800ff7e:	77fb      	strb	r3, [r7, #31]
 800ff80:	bf00      	nop
 800ff82:	e0be      	b.n	8010102 <UART_SetConfig+0x34e>
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a4d      	ldr	r2, [pc, #308]	; (80100c0 <UART_SetConfig+0x30c>)
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	d124      	bne.n	800ffd8 <UART_SetConfig+0x224>
 800ff8e:	4b48      	ldr	r3, [pc, #288]	; (80100b0 <UART_SetConfig+0x2fc>)
 800ff90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ff94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ff98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ff9c:	d012      	beq.n	800ffc4 <UART_SetConfig+0x210>
 800ff9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ffa2:	d802      	bhi.n	800ffaa <UART_SetConfig+0x1f6>
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d007      	beq.n	800ffb8 <UART_SetConfig+0x204>
 800ffa8:	e012      	b.n	800ffd0 <UART_SetConfig+0x21c>
 800ffaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ffae:	d006      	beq.n	800ffbe <UART_SetConfig+0x20a>
 800ffb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ffb4:	d009      	beq.n	800ffca <UART_SetConfig+0x216>
 800ffb6:	e00b      	b.n	800ffd0 <UART_SetConfig+0x21c>
 800ffb8:	2300      	movs	r3, #0
 800ffba:	77fb      	strb	r3, [r7, #31]
 800ffbc:	e0a1      	b.n	8010102 <UART_SetConfig+0x34e>
 800ffbe:	2302      	movs	r3, #2
 800ffc0:	77fb      	strb	r3, [r7, #31]
 800ffc2:	e09e      	b.n	8010102 <UART_SetConfig+0x34e>
 800ffc4:	2304      	movs	r3, #4
 800ffc6:	77fb      	strb	r3, [r7, #31]
 800ffc8:	e09b      	b.n	8010102 <UART_SetConfig+0x34e>
 800ffca:	2308      	movs	r3, #8
 800ffcc:	77fb      	strb	r3, [r7, #31]
 800ffce:	e098      	b.n	8010102 <UART_SetConfig+0x34e>
 800ffd0:	2310      	movs	r3, #16
 800ffd2:	77fb      	strb	r3, [r7, #31]
 800ffd4:	bf00      	nop
 800ffd6:	e094      	b.n	8010102 <UART_SetConfig+0x34e>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	4a39      	ldr	r2, [pc, #228]	; (80100c4 <UART_SetConfig+0x310>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d124      	bne.n	801002c <UART_SetConfig+0x278>
 800ffe2:	4b33      	ldr	r3, [pc, #204]	; (80100b0 <UART_SetConfig+0x2fc>)
 800ffe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffe8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ffec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fff0:	d012      	beq.n	8010018 <UART_SetConfig+0x264>
 800fff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fff6:	d802      	bhi.n	800fffe <UART_SetConfig+0x24a>
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d007      	beq.n	801000c <UART_SetConfig+0x258>
 800fffc:	e012      	b.n	8010024 <UART_SetConfig+0x270>
 800fffe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010002:	d006      	beq.n	8010012 <UART_SetConfig+0x25e>
 8010004:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010008:	d009      	beq.n	801001e <UART_SetConfig+0x26a>
 801000a:	e00b      	b.n	8010024 <UART_SetConfig+0x270>
 801000c:	2301      	movs	r3, #1
 801000e:	77fb      	strb	r3, [r7, #31]
 8010010:	e077      	b.n	8010102 <UART_SetConfig+0x34e>
 8010012:	2302      	movs	r3, #2
 8010014:	77fb      	strb	r3, [r7, #31]
 8010016:	e074      	b.n	8010102 <UART_SetConfig+0x34e>
 8010018:	2304      	movs	r3, #4
 801001a:	77fb      	strb	r3, [r7, #31]
 801001c:	e071      	b.n	8010102 <UART_SetConfig+0x34e>
 801001e:	2308      	movs	r3, #8
 8010020:	77fb      	strb	r3, [r7, #31]
 8010022:	e06e      	b.n	8010102 <UART_SetConfig+0x34e>
 8010024:	2310      	movs	r3, #16
 8010026:	77fb      	strb	r3, [r7, #31]
 8010028:	bf00      	nop
 801002a:	e06a      	b.n	8010102 <UART_SetConfig+0x34e>
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4a25      	ldr	r2, [pc, #148]	; (80100c8 <UART_SetConfig+0x314>)
 8010032:	4293      	cmp	r3, r2
 8010034:	d124      	bne.n	8010080 <UART_SetConfig+0x2cc>
 8010036:	4b1e      	ldr	r3, [pc, #120]	; (80100b0 <UART_SetConfig+0x2fc>)
 8010038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801003c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010044:	d012      	beq.n	801006c <UART_SetConfig+0x2b8>
 8010046:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801004a:	d802      	bhi.n	8010052 <UART_SetConfig+0x29e>
 801004c:	2b00      	cmp	r3, #0
 801004e:	d007      	beq.n	8010060 <UART_SetConfig+0x2ac>
 8010050:	e012      	b.n	8010078 <UART_SetConfig+0x2c4>
 8010052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010056:	d006      	beq.n	8010066 <UART_SetConfig+0x2b2>
 8010058:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801005c:	d009      	beq.n	8010072 <UART_SetConfig+0x2be>
 801005e:	e00b      	b.n	8010078 <UART_SetConfig+0x2c4>
 8010060:	2300      	movs	r3, #0
 8010062:	77fb      	strb	r3, [r7, #31]
 8010064:	e04d      	b.n	8010102 <UART_SetConfig+0x34e>
 8010066:	2302      	movs	r3, #2
 8010068:	77fb      	strb	r3, [r7, #31]
 801006a:	e04a      	b.n	8010102 <UART_SetConfig+0x34e>
 801006c:	2304      	movs	r3, #4
 801006e:	77fb      	strb	r3, [r7, #31]
 8010070:	e047      	b.n	8010102 <UART_SetConfig+0x34e>
 8010072:	2308      	movs	r3, #8
 8010074:	77fb      	strb	r3, [r7, #31]
 8010076:	e044      	b.n	8010102 <UART_SetConfig+0x34e>
 8010078:	2310      	movs	r3, #16
 801007a:	77fb      	strb	r3, [r7, #31]
 801007c:	bf00      	nop
 801007e:	e040      	b.n	8010102 <UART_SetConfig+0x34e>
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	4a11      	ldr	r2, [pc, #68]	; (80100cc <UART_SetConfig+0x318>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d139      	bne.n	80100fe <UART_SetConfig+0x34a>
 801008a:	4b09      	ldr	r3, [pc, #36]	; (80100b0 <UART_SetConfig+0x2fc>)
 801008c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010090:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010094:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010098:	d027      	beq.n	80100ea <UART_SetConfig+0x336>
 801009a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801009e:	d817      	bhi.n	80100d0 <UART_SetConfig+0x31c>
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d01c      	beq.n	80100de <UART_SetConfig+0x32a>
 80100a4:	e027      	b.n	80100f6 <UART_SetConfig+0x342>
 80100a6:	bf00      	nop
 80100a8:	efff69f3 	.word	0xefff69f3
 80100ac:	40011000 	.word	0x40011000
 80100b0:	40023800 	.word	0x40023800
 80100b4:	40004400 	.word	0x40004400
 80100b8:	40004800 	.word	0x40004800
 80100bc:	40004c00 	.word	0x40004c00
 80100c0:	40005000 	.word	0x40005000
 80100c4:	40011400 	.word	0x40011400
 80100c8:	40007800 	.word	0x40007800
 80100cc:	40007c00 	.word	0x40007c00
 80100d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80100d4:	d006      	beq.n	80100e4 <UART_SetConfig+0x330>
 80100d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80100da:	d009      	beq.n	80100f0 <UART_SetConfig+0x33c>
 80100dc:	e00b      	b.n	80100f6 <UART_SetConfig+0x342>
 80100de:	2300      	movs	r3, #0
 80100e0:	77fb      	strb	r3, [r7, #31]
 80100e2:	e00e      	b.n	8010102 <UART_SetConfig+0x34e>
 80100e4:	2302      	movs	r3, #2
 80100e6:	77fb      	strb	r3, [r7, #31]
 80100e8:	e00b      	b.n	8010102 <UART_SetConfig+0x34e>
 80100ea:	2304      	movs	r3, #4
 80100ec:	77fb      	strb	r3, [r7, #31]
 80100ee:	e008      	b.n	8010102 <UART_SetConfig+0x34e>
 80100f0:	2308      	movs	r3, #8
 80100f2:	77fb      	strb	r3, [r7, #31]
 80100f4:	e005      	b.n	8010102 <UART_SetConfig+0x34e>
 80100f6:	2310      	movs	r3, #16
 80100f8:	77fb      	strb	r3, [r7, #31]
 80100fa:	bf00      	nop
 80100fc:	e001      	b.n	8010102 <UART_SetConfig+0x34e>
 80100fe:	2310      	movs	r3, #16
 8010100:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	69db      	ldr	r3, [r3, #28]
 8010106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801010a:	d17f      	bne.n	801020c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 801010c:	7ffb      	ldrb	r3, [r7, #31]
 801010e:	2b08      	cmp	r3, #8
 8010110:	d85c      	bhi.n	80101cc <UART_SetConfig+0x418>
 8010112:	a201      	add	r2, pc, #4	; (adr r2, 8010118 <UART_SetConfig+0x364>)
 8010114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010118:	0801013d 	.word	0x0801013d
 801011c:	0801015d 	.word	0x0801015d
 8010120:	0801017d 	.word	0x0801017d
 8010124:	080101cd 	.word	0x080101cd
 8010128:	08010195 	.word	0x08010195
 801012c:	080101cd 	.word	0x080101cd
 8010130:	080101cd 	.word	0x080101cd
 8010134:	080101cd 	.word	0x080101cd
 8010138:	080101b5 	.word	0x080101b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801013c:	f7fd ff0a 	bl	800df54 <HAL_RCC_GetPCLK1Freq>
 8010140:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	005a      	lsls	r2, r3, #1
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	085b      	lsrs	r3, r3, #1
 801014c:	441a      	add	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	fbb2 f3f3 	udiv	r3, r2, r3
 8010156:	b29b      	uxth	r3, r3
 8010158:	61bb      	str	r3, [r7, #24]
        break;
 801015a:	e03a      	b.n	80101d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801015c:	f7fd ff0e 	bl	800df7c <HAL_RCC_GetPCLK2Freq>
 8010160:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	005a      	lsls	r2, r3, #1
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	085b      	lsrs	r3, r3, #1
 801016c:	441a      	add	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	fbb2 f3f3 	udiv	r3, r2, r3
 8010176:	b29b      	uxth	r3, r3
 8010178:	61bb      	str	r3, [r7, #24]
        break;
 801017a:	e02a      	b.n	80101d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	085a      	lsrs	r2, r3, #1
 8010182:	4b5f      	ldr	r3, [pc, #380]	; (8010300 <UART_SetConfig+0x54c>)
 8010184:	4413      	add	r3, r2
 8010186:	687a      	ldr	r2, [r7, #4]
 8010188:	6852      	ldr	r2, [r2, #4]
 801018a:	fbb3 f3f2 	udiv	r3, r3, r2
 801018e:	b29b      	uxth	r3, r3
 8010190:	61bb      	str	r3, [r7, #24]
        break;
 8010192:	e01e      	b.n	80101d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010194:	f7fd fdfc 	bl	800dd90 <HAL_RCC_GetSysClockFreq>
 8010198:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	005a      	lsls	r2, r3, #1
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	085b      	lsrs	r3, r3, #1
 80101a4:	441a      	add	r2, r3
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	685b      	ldr	r3, [r3, #4]
 80101aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	61bb      	str	r3, [r7, #24]
        break;
 80101b2:	e00e      	b.n	80101d2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	685b      	ldr	r3, [r3, #4]
 80101b8:	085b      	lsrs	r3, r3, #1
 80101ba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80101c6:	b29b      	uxth	r3, r3
 80101c8:	61bb      	str	r3, [r7, #24]
        break;
 80101ca:	e002      	b.n	80101d2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80101cc:	2301      	movs	r3, #1
 80101ce:	75fb      	strb	r3, [r7, #23]
        break;
 80101d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80101d2:	69bb      	ldr	r3, [r7, #24]
 80101d4:	2b0f      	cmp	r3, #15
 80101d6:	d916      	bls.n	8010206 <UART_SetConfig+0x452>
 80101d8:	69bb      	ldr	r3, [r7, #24]
 80101da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80101de:	d212      	bcs.n	8010206 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80101e0:	69bb      	ldr	r3, [r7, #24]
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	f023 030f 	bic.w	r3, r3, #15
 80101e8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80101ea:	69bb      	ldr	r3, [r7, #24]
 80101ec:	085b      	lsrs	r3, r3, #1
 80101ee:	b29b      	uxth	r3, r3
 80101f0:	f003 0307 	and.w	r3, r3, #7
 80101f4:	b29a      	uxth	r2, r3
 80101f6:	897b      	ldrh	r3, [r7, #10]
 80101f8:	4313      	orrs	r3, r2
 80101fa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	897a      	ldrh	r2, [r7, #10]
 8010202:	60da      	str	r2, [r3, #12]
 8010204:	e070      	b.n	80102e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8010206:	2301      	movs	r3, #1
 8010208:	75fb      	strb	r3, [r7, #23]
 801020a:	e06d      	b.n	80102e8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 801020c:	7ffb      	ldrb	r3, [r7, #31]
 801020e:	2b08      	cmp	r3, #8
 8010210:	d859      	bhi.n	80102c6 <UART_SetConfig+0x512>
 8010212:	a201      	add	r2, pc, #4	; (adr r2, 8010218 <UART_SetConfig+0x464>)
 8010214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010218:	0801023d 	.word	0x0801023d
 801021c:	0801025b 	.word	0x0801025b
 8010220:	08010279 	.word	0x08010279
 8010224:	080102c7 	.word	0x080102c7
 8010228:	08010291 	.word	0x08010291
 801022c:	080102c7 	.word	0x080102c7
 8010230:	080102c7 	.word	0x080102c7
 8010234:	080102c7 	.word	0x080102c7
 8010238:	080102af 	.word	0x080102af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801023c:	f7fd fe8a 	bl	800df54 <HAL_RCC_GetPCLK1Freq>
 8010240:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	085a      	lsrs	r2, r3, #1
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	441a      	add	r2, r3
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	fbb2 f3f3 	udiv	r3, r2, r3
 8010254:	b29b      	uxth	r3, r3
 8010256:	61bb      	str	r3, [r7, #24]
        break;
 8010258:	e038      	b.n	80102cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801025a:	f7fd fe8f 	bl	800df7c <HAL_RCC_GetPCLK2Freq>
 801025e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	085a      	lsrs	r2, r3, #1
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	441a      	add	r2, r3
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	685b      	ldr	r3, [r3, #4]
 801026e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010272:	b29b      	uxth	r3, r3
 8010274:	61bb      	str	r3, [r7, #24]
        break;
 8010276:	e029      	b.n	80102cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	085a      	lsrs	r2, r3, #1
 801027e:	4b21      	ldr	r3, [pc, #132]	; (8010304 <UART_SetConfig+0x550>)
 8010280:	4413      	add	r3, r2
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	6852      	ldr	r2, [r2, #4]
 8010286:	fbb3 f3f2 	udiv	r3, r3, r2
 801028a:	b29b      	uxth	r3, r3
 801028c:	61bb      	str	r3, [r7, #24]
        break;
 801028e:	e01d      	b.n	80102cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010290:	f7fd fd7e 	bl	800dd90 <HAL_RCC_GetSysClockFreq>
 8010294:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	685b      	ldr	r3, [r3, #4]
 801029a:	085a      	lsrs	r2, r3, #1
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	441a      	add	r2, r3
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	685b      	ldr	r3, [r3, #4]
 80102a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	61bb      	str	r3, [r7, #24]
        break;
 80102ac:	e00e      	b.n	80102cc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	685b      	ldr	r3, [r3, #4]
 80102b2:	085b      	lsrs	r3, r3, #1
 80102b4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	61bb      	str	r3, [r7, #24]
        break;
 80102c4:	e002      	b.n	80102cc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80102c6:	2301      	movs	r3, #1
 80102c8:	75fb      	strb	r3, [r7, #23]
        break;
 80102ca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102cc:	69bb      	ldr	r3, [r7, #24]
 80102ce:	2b0f      	cmp	r3, #15
 80102d0:	d908      	bls.n	80102e4 <UART_SetConfig+0x530>
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102d8:	d204      	bcs.n	80102e4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	69ba      	ldr	r2, [r7, #24]
 80102e0:	60da      	str	r2, [r3, #12]
 80102e2:	e001      	b.n	80102e8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80102e4:	2301      	movs	r3, #1
 80102e6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	2200      	movs	r2, #0
 80102f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80102f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3720      	adds	r7, #32
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	01e84800 	.word	0x01e84800
 8010304:	00f42400 	.word	0x00f42400

08010308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010314:	f003 0301 	and.w	r3, r3, #1
 8010318:	2b00      	cmp	r3, #0
 801031a:	d00a      	beq.n	8010332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	685b      	ldr	r3, [r3, #4]
 8010322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	681b      	ldr	r3, [r3, #0]
 801032e:	430a      	orrs	r2, r1
 8010330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010336:	f003 0302 	and.w	r3, r3, #2
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	685b      	ldr	r3, [r3, #4]
 8010344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	430a      	orrs	r2, r1
 8010352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010358:	f003 0304 	and.w	r3, r3, #4
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00a      	beq.n	8010376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	430a      	orrs	r2, r1
 8010374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801037a:	f003 0308 	and.w	r3, r3, #8
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00a      	beq.n	8010398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	430a      	orrs	r2, r1
 8010396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801039c:	f003 0310 	and.w	r3, r3, #16
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00a      	beq.n	80103ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	430a      	orrs	r2, r1
 80103b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103be:	f003 0320 	and.w	r3, r3, #32
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d00a      	beq.n	80103dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	430a      	orrs	r2, r1
 80103da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d01a      	beq.n	801041e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	430a      	orrs	r2, r1
 80103fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010406:	d10a      	bne.n	801041e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	430a      	orrs	r2, r1
 801041c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010426:	2b00      	cmp	r3, #0
 8010428:	d00a      	beq.n	8010440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	685b      	ldr	r3, [r3, #4]
 8010430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	430a      	orrs	r2, r1
 801043e:	605a      	str	r2, [r3, #4]
  }
}
 8010440:	bf00      	nop
 8010442:	370c      	adds	r7, #12
 8010444:	46bd      	mov	sp, r7
 8010446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044a:	4770      	bx	lr

0801044c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b086      	sub	sp, #24
 8010450:	af02      	add	r7, sp, #8
 8010452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2200      	movs	r2, #0
 8010458:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801045a:	f7fb f89b 	bl	800b594 <HAL_GetTick>
 801045e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	f003 0308 	and.w	r3, r3, #8
 801046a:	2b08      	cmp	r3, #8
 801046c:	d10e      	bne.n	801048c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801046e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010472:	9300      	str	r3, [sp, #0]
 8010474:	68fb      	ldr	r3, [r7, #12]
 8010476:	2200      	movs	r2, #0
 8010478:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f000 f82a 	bl	80104d6 <UART_WaitOnFlagUntilTimeout>
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010488:	2303      	movs	r3, #3
 801048a:	e020      	b.n	80104ce <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f003 0304 	and.w	r3, r3, #4
 8010496:	2b04      	cmp	r3, #4
 8010498:	d10e      	bne.n	80104b8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801049a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801049e:	9300      	str	r3, [sp, #0]
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80104a8:	6878      	ldr	r0, [r7, #4]
 80104aa:	f000 f814 	bl	80104d6 <UART_WaitOnFlagUntilTimeout>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d001      	beq.n	80104b8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80104b4:	2303      	movs	r3, #3
 80104b6:	e00a      	b.n	80104ce <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2220      	movs	r2, #32
 80104bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	2220      	movs	r2, #32
 80104c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	2200      	movs	r2, #0
 80104c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3710      	adds	r7, #16
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bd80      	pop	{r7, pc}

080104d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80104d6:	b580      	push	{r7, lr}
 80104d8:	b084      	sub	sp, #16
 80104da:	af00      	add	r7, sp, #0
 80104dc:	60f8      	str	r0, [r7, #12]
 80104de:	60b9      	str	r1, [r7, #8]
 80104e0:	603b      	str	r3, [r7, #0]
 80104e2:	4613      	mov	r3, r2
 80104e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80104e6:	e05d      	b.n	80105a4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80104e8:	69bb      	ldr	r3, [r7, #24]
 80104ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ee:	d059      	beq.n	80105a4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80104f0:	f7fb f850 	bl	800b594 <HAL_GetTick>
 80104f4:	4602      	mov	r2, r0
 80104f6:	683b      	ldr	r3, [r7, #0]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	69ba      	ldr	r2, [r7, #24]
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d302      	bcc.n	8010506 <UART_WaitOnFlagUntilTimeout+0x30>
 8010500:	69bb      	ldr	r3, [r7, #24]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d11b      	bne.n	801053e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010514:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	689a      	ldr	r2, [r3, #8]
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f022 0201 	bic.w	r2, r2, #1
 8010524:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	2220      	movs	r2, #32
 801052a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	2220      	movs	r2, #32
 8010530:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	2200      	movs	r2, #0
 8010536:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 801053a:	2303      	movs	r3, #3
 801053c:	e042      	b.n	80105c4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	f003 0304 	and.w	r3, r3, #4
 8010548:	2b00      	cmp	r3, #0
 801054a:	d02b      	beq.n	80105a4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	69db      	ldr	r3, [r3, #28]
 8010552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010556:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801055a:	d123      	bne.n	80105a4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010564:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	681a      	ldr	r2, [r3, #0]
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010574:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	689a      	ldr	r2, [r3, #8]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	f022 0201 	bic.w	r2, r2, #1
 8010584:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2220      	movs	r2, #32
 801058a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	2220      	movs	r2, #32
 8010590:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	2220      	movs	r2, #32
 8010596:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2200      	movs	r2, #0
 801059c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80105a0:	2303      	movs	r3, #3
 80105a2:	e00f      	b.n	80105c4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	69da      	ldr	r2, [r3, #28]
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	4013      	ands	r3, r2
 80105ae:	68ba      	ldr	r2, [r7, #8]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	bf0c      	ite	eq
 80105b4:	2301      	moveq	r3, #1
 80105b6:	2300      	movne	r3, #0
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	461a      	mov	r2, r3
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	429a      	cmp	r2, r3
 80105c0:	d092      	beq.n	80104e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80105c2:	2300      	movs	r3, #0
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80105cc:	b480      	push	{r7}
 80105ce:	b083      	sub	sp, #12
 80105d0:	af00      	add	r7, sp, #0
 80105d2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	681a      	ldr	r2, [r3, #0]
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80105e2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2220      	movs	r2, #32
 80105e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80105ea:	bf00      	nop
 80105ec:	370c      	adds	r7, #12
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80105f6:	b480      	push	{r7}
 80105f8:	b083      	sub	sp, #12
 80105fa:	af00      	add	r7, sp, #0
 80105fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	681a      	ldr	r2, [r3, #0]
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801060c:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	689a      	ldr	r2, [r3, #8]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	f022 0201 	bic.w	r2, r2, #1
 801061c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	2220      	movs	r2, #32
 8010622:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	2200      	movs	r2, #0
 8010628:	661a      	str	r2, [r3, #96]	; 0x60
}
 801062a:	bf00      	nop
 801062c:	370c      	adds	r7, #12
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010636:	b580      	push	{r7, lr}
 8010638:	b084      	sub	sp, #16
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010642:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	69db      	ldr	r3, [r3, #28]
 8010648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801064c:	d014      	beq.n	8010678 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	2200      	movs	r2, #0
 8010652:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	689a      	ldr	r2, [r3, #8]
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010664:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	681a      	ldr	r2, [r3, #0]
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010674:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010676:	e002      	b.n	801067e <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f7ff fb73 	bl	800fd64 <HAL_UART_TxCpltCallback>
}
 801067e:	bf00      	nop
 8010680:	3710      	adds	r7, #16
 8010682:	46bd      	mov	sp, r7
 8010684:	bd80      	pop	{r7, pc}

08010686 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010686:	b580      	push	{r7, lr}
 8010688:	b084      	sub	sp, #16
 801068a:	af00      	add	r7, sp, #0
 801068c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010692:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010694:	68f8      	ldr	r0, [r7, #12]
 8010696:	f7ff fb6f 	bl	800fd78 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801069a:	bf00      	nop
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80106a2:	b580      	push	{r7, lr}
 80106a4:	b086      	sub	sp, #24
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106ae:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80106b0:	697b      	ldr	r3, [r7, #20]
 80106b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	681b      	ldr	r3, [r3, #0]
 80106c0:	689b      	ldr	r3, [r3, #8]
 80106c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106c6:	2b80      	cmp	r3, #128	; 0x80
 80106c8:	d109      	bne.n	80106de <UART_DMAError+0x3c>
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	2b21      	cmp	r3, #33	; 0x21
 80106ce:	d106      	bne.n	80106de <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80106d0:	697b      	ldr	r3, [r7, #20]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80106d8:	6978      	ldr	r0, [r7, #20]
 80106da:	f7ff ff77 	bl	80105cc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	681b      	ldr	r3, [r3, #0]
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106e8:	2b40      	cmp	r3, #64	; 0x40
 80106ea:	d109      	bne.n	8010700 <UART_DMAError+0x5e>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2b22      	cmp	r3, #34	; 0x22
 80106f0:	d106      	bne.n	8010700 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80106f2:	697b      	ldr	r3, [r7, #20]
 80106f4:	2200      	movs	r2, #0
 80106f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80106fa:	6978      	ldr	r0, [r7, #20]
 80106fc:	f7ff ff7b 	bl	80105f6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010704:	f043 0210 	orr.w	r2, r3, #16
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801070c:	6978      	ldr	r0, [r7, #20]
 801070e:	f7ff fb3d 	bl	800fd8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010712:	bf00      	nop
 8010714:	3718      	adds	r7, #24
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}

0801071a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801071a:	b580      	push	{r7, lr}
 801071c:	b084      	sub	sp, #16
 801071e:	af00      	add	r7, sp, #0
 8010720:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010726:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2200      	movs	r2, #0
 801072c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	2200      	movs	r2, #0
 8010734:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010738:	68f8      	ldr	r0, [r7, #12]
 801073a:	f7ff fb27 	bl	800fd8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801073e:	bf00      	nop
 8010740:	3710      	adds	r7, #16
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010746:	b580      	push	{r7, lr}
 8010748:	b082      	sub	sp, #8
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	681a      	ldr	r2, [r3, #0]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801075c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	2220      	movs	r2, #32
 8010762:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2200      	movs	r2, #0
 8010768:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f7ff fafa 	bl	800fd64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010770:	bf00      	nop
 8010772:	3708      	adds	r7, #8
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}

08010778 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010786:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801078c:	2b22      	cmp	r3, #34	; 0x22
 801078e:	d13a      	bne.n	8010806 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010796:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010798:	89bb      	ldrh	r3, [r7, #12]
 801079a:	b2d9      	uxtb	r1, r3
 801079c:	89fb      	ldrh	r3, [r7, #14]
 801079e:	b2da      	uxtb	r2, r3
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107a4:	400a      	ands	r2, r1
 80107a6:	b2d2      	uxtb	r2, r2
 80107a8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107ae:	1c5a      	adds	r2, r3, #1
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107ba:	b29b      	uxth	r3, r3
 80107bc:	3b01      	subs	r3, #1
 80107be:	b29a      	uxth	r2, r3
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d121      	bne.n	8010816 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80107e0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	689a      	ldr	r2, [r3, #8]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	f022 0201 	bic.w	r2, r2, #1
 80107f0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2220      	movs	r2, #32
 80107f6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	2200      	movs	r2, #0
 80107fc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80107fe:	6878      	ldr	r0, [r7, #4]
 8010800:	f7f8 feb8 	bl	8009574 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010804:	e007      	b.n	8010816 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	699a      	ldr	r2, [r3, #24]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	f042 0208 	orr.w	r2, r2, #8
 8010814:	619a      	str	r2, [r3, #24]
}
 8010816:	bf00      	nop
 8010818:	3710      	adds	r7, #16
 801081a:	46bd      	mov	sp, r7
 801081c:	bd80      	pop	{r7, pc}

0801081e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801081e:	b580      	push	{r7, lr}
 8010820:	b084      	sub	sp, #16
 8010822:	af00      	add	r7, sp, #0
 8010824:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801082c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010832:	2b22      	cmp	r3, #34	; 0x22
 8010834:	d13a      	bne.n	80108ac <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801083c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010842:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8010844:	89ba      	ldrh	r2, [r7, #12]
 8010846:	89fb      	ldrh	r3, [r7, #14]
 8010848:	4013      	ands	r3, r2
 801084a:	b29a      	uxth	r2, r3
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010854:	1c9a      	adds	r2, r3, #2
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010860:	b29b      	uxth	r3, r3
 8010862:	3b01      	subs	r3, #1
 8010864:	b29a      	uxth	r2, r3
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010872:	b29b      	uxth	r3, r3
 8010874:	2b00      	cmp	r3, #0
 8010876:	d121      	bne.n	80108bc <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	681a      	ldr	r2, [r3, #0]
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	681b      	ldr	r3, [r3, #0]
 8010882:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010886:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	689a      	ldr	r2, [r3, #8]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	681b      	ldr	r3, [r3, #0]
 8010892:	f022 0201 	bic.w	r2, r2, #1
 8010896:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2220      	movs	r2, #32
 801089c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2200      	movs	r2, #0
 80108a2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f7f8 fe65 	bl	8009574 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80108aa:	e007      	b.n	80108bc <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	681b      	ldr	r3, [r3, #0]
 80108b0:	699a      	ldr	r2, [r3, #24]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	f042 0208 	orr.w	r2, r2, #8
 80108ba:	619a      	str	r2, [r3, #24]
}
 80108bc:	bf00      	nop
 80108be:	3710      	adds	r7, #16
 80108c0:	46bd      	mov	sp, r7
 80108c2:	bd80      	pop	{r7, pc}

080108c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	4603      	mov	r3, r0
 80108cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80108ce:	2300      	movs	r3, #0
 80108d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80108d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80108d6:	2b84      	cmp	r3, #132	; 0x84
 80108d8:	d005      	beq.n	80108e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80108da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	4413      	add	r3, r2
 80108e2:	3303      	adds	r3, #3
 80108e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80108e6:	68fb      	ldr	r3, [r7, #12]
}
 80108e8:	4618      	mov	r0, r3
 80108ea:	3714      	adds	r7, #20
 80108ec:	46bd      	mov	sp, r7
 80108ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f2:	4770      	bx	lr

080108f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80108f8:	f001 fa30 	bl	8011d5c <vTaskStartScheduler>
  
  return osOK;
 80108fc:	2300      	movs	r3, #0
}
 80108fe:	4618      	mov	r0, r3
 8010900:	bd80      	pop	{r7, pc}

08010902 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8010902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010904:	b089      	sub	sp, #36	; 0x24
 8010906:	af04      	add	r7, sp, #16
 8010908:	6078      	str	r0, [r7, #4]
 801090a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	695b      	ldr	r3, [r3, #20]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d020      	beq.n	8010956 <osThreadCreate+0x54>
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	699b      	ldr	r3, [r3, #24]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d01c      	beq.n	8010956 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	685c      	ldr	r4, [r3, #4]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	681d      	ldr	r5, [r3, #0]
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	691e      	ldr	r6, [r3, #16]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801092e:	4618      	mov	r0, r3
 8010930:	f7ff ffc8 	bl	80108c4 <makeFreeRtosPriority>
 8010934:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	695b      	ldr	r3, [r3, #20]
 801093a:	687a      	ldr	r2, [r7, #4]
 801093c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801093e:	9202      	str	r2, [sp, #8]
 8010940:	9301      	str	r3, [sp, #4]
 8010942:	9100      	str	r1, [sp, #0]
 8010944:	683b      	ldr	r3, [r7, #0]
 8010946:	4632      	mov	r2, r6
 8010948:	4629      	mov	r1, r5
 801094a:	4620      	mov	r0, r4
 801094c:	f000 ff4b 	bl	80117e6 <xTaskCreateStatic>
 8010950:	4603      	mov	r3, r0
 8010952:	60fb      	str	r3, [r7, #12]
 8010954:	e01c      	b.n	8010990 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	685c      	ldr	r4, [r3, #4]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010962:	b29e      	uxth	r6, r3
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801096a:	4618      	mov	r0, r3
 801096c:	f7ff ffaa 	bl	80108c4 <makeFreeRtosPriority>
 8010970:	4602      	mov	r2, r0
 8010972:	f107 030c 	add.w	r3, r7, #12
 8010976:	9301      	str	r3, [sp, #4]
 8010978:	9200      	str	r2, [sp, #0]
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	4632      	mov	r2, r6
 801097e:	4629      	mov	r1, r5
 8010980:	4620      	mov	r0, r4
 8010982:	f000 ff90 	bl	80118a6 <xTaskCreate>
 8010986:	4603      	mov	r3, r0
 8010988:	2b01      	cmp	r3, #1
 801098a:	d001      	beq.n	8010990 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801098c:	2300      	movs	r3, #0
 801098e:	e000      	b.n	8010992 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010990:	68fb      	ldr	r3, [r7, #12]
}
 8010992:	4618      	mov	r0, r3
 8010994:	3714      	adds	r7, #20
 8010996:	46bd      	mov	sp, r7
 8010998:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801099a <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 801099a:	b580      	push	{r7, lr}
 801099c:	b086      	sub	sp, #24
 801099e:	af02      	add	r7, sp, #8
 80109a0:	6078      	str	r0, [r7, #4]
 80109a2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	685b      	ldr	r3, [r3, #4]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d010      	beq.n	80109ce <osSemaphoreCreate+0x34>
    if (count == 1) {
 80109ac:	683b      	ldr	r3, [r7, #0]
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d10b      	bne.n	80109ca <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	685a      	ldr	r2, [r3, #4]
 80109b6:	2303      	movs	r3, #3
 80109b8:	9300      	str	r3, [sp, #0]
 80109ba:	4613      	mov	r3, r2
 80109bc:	2200      	movs	r2, #0
 80109be:	2100      	movs	r1, #0
 80109c0:	2001      	movs	r0, #1
 80109c2:	f000 f965 	bl	8010c90 <xQueueGenericCreateStatic>
 80109c6:	4603      	mov	r3, r0
 80109c8:	e016      	b.n	80109f8 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80109ca:	2300      	movs	r3, #0
 80109cc:	e014      	b.n	80109f8 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80109ce:	683b      	ldr	r3, [r7, #0]
 80109d0:	2b01      	cmp	r3, #1
 80109d2:	d110      	bne.n	80109f6 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80109d4:	2203      	movs	r2, #3
 80109d6:	2100      	movs	r1, #0
 80109d8:	2001      	movs	r0, #1
 80109da:	f000 f9d6 	bl	8010d8a <xQueueGenericCreate>
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	68fb      	ldr	r3, [r7, #12]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d005      	beq.n	80109f2 <osSemaphoreCreate+0x58>
 80109e6:	2300      	movs	r3, #0
 80109e8:	2200      	movs	r2, #0
 80109ea:	2100      	movs	r1, #0
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f000 fa2d 	bl	8010e4c <xQueueGenericSend>
      return sema;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	e000      	b.n	80109f8 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80109f6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80109f8:	4618      	mov	r0, r3
 80109fa:	3710      	adds	r7, #16
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010a00:	b590      	push	{r4, r7, lr}
 8010a02:	b085      	sub	sp, #20
 8010a04:	af02      	add	r7, sp, #8
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	689b      	ldr	r3, [r3, #8]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d012      	beq.n	8010a38 <osMessageCreate+0x38>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	68db      	ldr	r3, [r3, #12]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00e      	beq.n	8010a38 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6818      	ldr	r0, [r3, #0]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	6859      	ldr	r1, [r3, #4]
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	689a      	ldr	r2, [r3, #8]
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	68dc      	ldr	r4, [r3, #12]
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	4623      	mov	r3, r4
 8010a30:	f000 f92e 	bl	8010c90 <xQueueGenericCreateStatic>
 8010a34:	4603      	mov	r3, r0
 8010a36:	e008      	b.n	8010a4a <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	6818      	ldr	r0, [r3, #0]
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	685b      	ldr	r3, [r3, #4]
 8010a40:	2200      	movs	r2, #0
 8010a42:	4619      	mov	r1, r3
 8010a44:	f000 f9a1 	bl	8010d8a <xQueueGenericCreate>
 8010a48:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	370c      	adds	r7, #12
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd90      	pop	{r4, r7, pc}

08010a52 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a52:	b480      	push	{r7}
 8010a54:	b083      	sub	sp, #12
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f103 0208 	add.w	r2, r3, #8
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f04f 32ff 	mov.w	r2, #4294967295
 8010a6a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f103 0208 	add.w	r2, r3, #8
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f103 0208 	add.w	r2, r3, #8
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	2200      	movs	r2, #0
 8010a84:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a86:	bf00      	nop
 8010a88:	370c      	adds	r7, #12
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr

08010a92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a92:	b480      	push	{r7}
 8010a94:	b083      	sub	sp, #12
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010aa0:	bf00      	nop
 8010aa2:	370c      	adds	r7, #12
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010ab6:	687b      	ldr	r3, [r7, #4]
 8010ab8:	685b      	ldr	r3, [r3, #4]
 8010aba:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	68fa      	ldr	r2, [r7, #12]
 8010ac0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	689a      	ldr	r2, [r3, #8]
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	683a      	ldr	r2, [r7, #0]
 8010ad0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	683a      	ldr	r2, [r7, #0]
 8010ad6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	1c5a      	adds	r2, r3, #1
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	601a      	str	r2, [r3, #0]
}
 8010ae8:	bf00      	nop
 8010aea:	3714      	adds	r7, #20
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010af4:	b480      	push	{r7}
 8010af6:	b085      	sub	sp, #20
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b04:	68bb      	ldr	r3, [r7, #8]
 8010b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b0a:	d103      	bne.n	8010b14 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	60fb      	str	r3, [r7, #12]
 8010b12:	e00c      	b.n	8010b2e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	3308      	adds	r3, #8
 8010b18:	60fb      	str	r3, [r7, #12]
 8010b1a:	e002      	b.n	8010b22 <vListInsert+0x2e>
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	685b      	ldr	r3, [r3, #4]
 8010b20:	60fb      	str	r3, [r7, #12]
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	685b      	ldr	r3, [r3, #4]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68ba      	ldr	r2, [r7, #8]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d2f6      	bcs.n	8010b1c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	685a      	ldr	r2, [r3, #4]
 8010b32:	683b      	ldr	r3, [r7, #0]
 8010b34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	683a      	ldr	r2, [r7, #0]
 8010b3c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	68fa      	ldr	r2, [r7, #12]
 8010b42:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	683a      	ldr	r2, [r7, #0]
 8010b48:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	601a      	str	r2, [r3, #0]
}
 8010b5a:	bf00      	nop
 8010b5c:	3714      	adds	r7, #20
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr

08010b66 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b66:	b480      	push	{r7}
 8010b68:	b085      	sub	sp, #20
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	6892      	ldr	r2, [r2, #8]
 8010b7c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	689b      	ldr	r3, [r3, #8]
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	6852      	ldr	r2, [r2, #4]
 8010b86:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	685b      	ldr	r3, [r3, #4]
 8010b8c:	687a      	ldr	r2, [r7, #4]
 8010b8e:	429a      	cmp	r2, r3
 8010b90:	d103      	bne.n	8010b9a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	689a      	ldr	r2, [r3, #8]
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	1e5a      	subs	r2, r3, #1
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	681b      	ldr	r3, [r3, #0]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3714      	adds	r7, #20
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb8:	4770      	bx	lr
	...

08010bbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b084      	sub	sp, #16
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d10b      	bne.n	8010be8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bd4:	b672      	cpsid	i
 8010bd6:	f383 8811 	msr	BASEPRI, r3
 8010bda:	f3bf 8f6f 	isb	sy
 8010bde:	f3bf 8f4f 	dsb	sy
 8010be2:	b662      	cpsie	i
 8010be4:	60bb      	str	r3, [r7, #8]
 8010be6:	e7fe      	b.n	8010be6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8010be8:	f002 f806 	bl	8012bf8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681a      	ldr	r2, [r3, #0]
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bf4:	68f9      	ldr	r1, [r7, #12]
 8010bf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010bf8:	fb01 f303 	mul.w	r3, r1, r3
 8010bfc:	441a      	add	r2, r3
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	2200      	movs	r2, #0
 8010c06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	681a      	ldr	r2, [r3, #0]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c18:	3b01      	subs	r3, #1
 8010c1a:	68f9      	ldr	r1, [r7, #12]
 8010c1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c1e:	fb01 f303 	mul.w	r3, r1, r3
 8010c22:	441a      	add	r2, r3
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	22ff      	movs	r2, #255	; 0xff
 8010c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	22ff      	movs	r2, #255	; 0xff
 8010c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d114      	bne.n	8010c68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	691b      	ldr	r3, [r3, #16]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d01a      	beq.n	8010c7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	3310      	adds	r3, #16
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f001 fad0 	bl	80121f0 <xTaskRemoveFromEventList>
 8010c50:	4603      	mov	r3, r0
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d012      	beq.n	8010c7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010c56:	4b0d      	ldr	r3, [pc, #52]	; (8010c8c <xQueueGenericReset+0xd0>)
 8010c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c5c:	601a      	str	r2, [r3, #0]
 8010c5e:	f3bf 8f4f 	dsb	sy
 8010c62:	f3bf 8f6f 	isb	sy
 8010c66:	e009      	b.n	8010c7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	3310      	adds	r3, #16
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff fef0 	bl	8010a52 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	3324      	adds	r3, #36	; 0x24
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ff feeb 	bl	8010a52 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010c7c:	f001 ffee 	bl	8012c5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010c80:	2301      	movs	r3, #1
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3710      	adds	r7, #16
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}
 8010c8a:	bf00      	nop
 8010c8c:	e000ed04 	.word	0xe000ed04

08010c90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08e      	sub	sp, #56	; 0x38
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
 8010c9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10b      	bne.n	8010cbc <xQueueGenericCreateStatic+0x2c>
 8010ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca8:	b672      	cpsid	i
 8010caa:	f383 8811 	msr	BASEPRI, r3
 8010cae:	f3bf 8f6f 	isb	sy
 8010cb2:	f3bf 8f4f 	dsb	sy
 8010cb6:	b662      	cpsie	i
 8010cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010cba:	e7fe      	b.n	8010cba <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d10b      	bne.n	8010cda <xQueueGenericCreateStatic+0x4a>
 8010cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cc6:	b672      	cpsid	i
 8010cc8:	f383 8811 	msr	BASEPRI, r3
 8010ccc:	f3bf 8f6f 	isb	sy
 8010cd0:	f3bf 8f4f 	dsb	sy
 8010cd4:	b662      	cpsie	i
 8010cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8010cd8:	e7fe      	b.n	8010cd8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d002      	beq.n	8010ce6 <xQueueGenericCreateStatic+0x56>
 8010ce0:	68bb      	ldr	r3, [r7, #8]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d001      	beq.n	8010cea <xQueueGenericCreateStatic+0x5a>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e000      	b.n	8010cec <xQueueGenericCreateStatic+0x5c>
 8010cea:	2300      	movs	r3, #0
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d10b      	bne.n	8010d08 <xQueueGenericCreateStatic+0x78>
 8010cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cf4:	b672      	cpsid	i
 8010cf6:	f383 8811 	msr	BASEPRI, r3
 8010cfa:	f3bf 8f6f 	isb	sy
 8010cfe:	f3bf 8f4f 	dsb	sy
 8010d02:	b662      	cpsie	i
 8010d04:	623b      	str	r3, [r7, #32]
 8010d06:	e7fe      	b.n	8010d06 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d102      	bne.n	8010d14 <xQueueGenericCreateStatic+0x84>
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d101      	bne.n	8010d18 <xQueueGenericCreateStatic+0x88>
 8010d14:	2301      	movs	r3, #1
 8010d16:	e000      	b.n	8010d1a <xQueueGenericCreateStatic+0x8a>
 8010d18:	2300      	movs	r3, #0
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d10b      	bne.n	8010d36 <xQueueGenericCreateStatic+0xa6>
 8010d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d22:	b672      	cpsid	i
 8010d24:	f383 8811 	msr	BASEPRI, r3
 8010d28:	f3bf 8f6f 	isb	sy
 8010d2c:	f3bf 8f4f 	dsb	sy
 8010d30:	b662      	cpsie	i
 8010d32:	61fb      	str	r3, [r7, #28]
 8010d34:	e7fe      	b.n	8010d34 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d36:	2348      	movs	r3, #72	; 0x48
 8010d38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	2b48      	cmp	r3, #72	; 0x48
 8010d3e:	d00b      	beq.n	8010d58 <xQueueGenericCreateStatic+0xc8>
 8010d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d44:	b672      	cpsid	i
 8010d46:	f383 8811 	msr	BASEPRI, r3
 8010d4a:	f3bf 8f6f 	isb	sy
 8010d4e:	f3bf 8f4f 	dsb	sy
 8010d52:	b662      	cpsie	i
 8010d54:	61bb      	str	r3, [r7, #24]
 8010d56:	e7fe      	b.n	8010d56 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010d58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d5a:	683b      	ldr	r3, [r7, #0]
 8010d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d00d      	beq.n	8010d80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d66:	2201      	movs	r2, #1
 8010d68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d72:	9300      	str	r3, [sp, #0]
 8010d74:	4613      	mov	r3, r2
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	68b9      	ldr	r1, [r7, #8]
 8010d7a:	68f8      	ldr	r0, [r7, #12]
 8010d7c:	f000 f846 	bl	8010e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010d82:	4618      	mov	r0, r3
 8010d84:	3730      	adds	r7, #48	; 0x30
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}

08010d8a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d8a:	b580      	push	{r7, lr}
 8010d8c:	b08a      	sub	sp, #40	; 0x28
 8010d8e:	af02      	add	r7, sp, #8
 8010d90:	60f8      	str	r0, [r7, #12]
 8010d92:	60b9      	str	r1, [r7, #8]
 8010d94:	4613      	mov	r3, r2
 8010d96:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d10b      	bne.n	8010db6 <xQueueGenericCreate+0x2c>
 8010d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da2:	b672      	cpsid	i
 8010da4:	f383 8811 	msr	BASEPRI, r3
 8010da8:	f3bf 8f6f 	isb	sy
 8010dac:	f3bf 8f4f 	dsb	sy
 8010db0:	b662      	cpsie	i
 8010db2:	613b      	str	r3, [r7, #16]
 8010db4:	e7fe      	b.n	8010db4 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	61fb      	str	r3, [r7, #28]
 8010dc0:	e004      	b.n	8010dcc <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	fb02 f303 	mul.w	r3, r2, r3
 8010dca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	3348      	adds	r3, #72	; 0x48
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f002 f833 	bl	8012e3c <pvPortMalloc>
 8010dd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d011      	beq.n	8010e02 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	3348      	adds	r3, #72	; 0x48
 8010de6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010df0:	79fa      	ldrb	r2, [r7, #7]
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	4613      	mov	r3, r2
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	68b9      	ldr	r1, [r7, #8]
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f805 	bl	8010e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e02:	69bb      	ldr	r3, [r7, #24]
	}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3720      	adds	r7, #32
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d103      	bne.n	8010e28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	69ba      	ldr	r2, [r7, #24]
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	e002      	b.n	8010e2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	69b8      	ldr	r0, [r7, #24]
 8010e3e:	f7ff febd 	bl	8010bbc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e42:	bf00      	nop
 8010e44:	3710      	adds	r7, #16
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
	...

08010e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b08e      	sub	sp, #56	; 0x38
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d10b      	bne.n	8010e80 <xQueueGenericSend+0x34>
 8010e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6c:	b672      	cpsid	i
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	b662      	cpsie	i
 8010e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e7e:	e7fe      	b.n	8010e7e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e80:	68bb      	ldr	r3, [r7, #8]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d103      	bne.n	8010e8e <xQueueGenericSend+0x42>
 8010e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d101      	bne.n	8010e92 <xQueueGenericSend+0x46>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e000      	b.n	8010e94 <xQueueGenericSend+0x48>
 8010e92:	2300      	movs	r3, #0
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d10b      	bne.n	8010eb0 <xQueueGenericSend+0x64>
 8010e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9c:	b672      	cpsid	i
 8010e9e:	f383 8811 	msr	BASEPRI, r3
 8010ea2:	f3bf 8f6f 	isb	sy
 8010ea6:	f3bf 8f4f 	dsb	sy
 8010eaa:	b662      	cpsie	i
 8010eac:	627b      	str	r3, [r7, #36]	; 0x24
 8010eae:	e7fe      	b.n	8010eae <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010eb0:	683b      	ldr	r3, [r7, #0]
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	d103      	bne.n	8010ebe <xQueueGenericSend+0x72>
 8010eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010eba:	2b01      	cmp	r3, #1
 8010ebc:	d101      	bne.n	8010ec2 <xQueueGenericSend+0x76>
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	e000      	b.n	8010ec4 <xQueueGenericSend+0x78>
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d10b      	bne.n	8010ee0 <xQueueGenericSend+0x94>
 8010ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ecc:	b672      	cpsid	i
 8010ece:	f383 8811 	msr	BASEPRI, r3
 8010ed2:	f3bf 8f6f 	isb	sy
 8010ed6:	f3bf 8f4f 	dsb	sy
 8010eda:	b662      	cpsie	i
 8010edc:	623b      	str	r3, [r7, #32]
 8010ede:	e7fe      	b.n	8010ede <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ee0:	f001 fb44 	bl	801256c <xTaskGetSchedulerState>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d102      	bne.n	8010ef0 <xQueueGenericSend+0xa4>
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d101      	bne.n	8010ef4 <xQueueGenericSend+0xa8>
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	e000      	b.n	8010ef6 <xQueueGenericSend+0xaa>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d10b      	bne.n	8010f12 <xQueueGenericSend+0xc6>
 8010efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efe:	b672      	cpsid	i
 8010f00:	f383 8811 	msr	BASEPRI, r3
 8010f04:	f3bf 8f6f 	isb	sy
 8010f08:	f3bf 8f4f 	dsb	sy
 8010f0c:	b662      	cpsie	i
 8010f0e:	61fb      	str	r3, [r7, #28]
 8010f10:	e7fe      	b.n	8010f10 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f12:	f001 fe71 	bl	8012bf8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d302      	bcc.n	8010f28 <xQueueGenericSend+0xdc>
 8010f22:	683b      	ldr	r3, [r7, #0]
 8010f24:	2b02      	cmp	r3, #2
 8010f26:	d129      	bne.n	8010f7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	68b9      	ldr	r1, [r7, #8]
 8010f2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f2e:	f000 fb4a 	bl	80115c6 <prvCopyDataToQueue>
 8010f32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d010      	beq.n	8010f5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3e:	3324      	adds	r3, #36	; 0x24
 8010f40:	4618      	mov	r0, r3
 8010f42:	f001 f955 	bl	80121f0 <xTaskRemoveFromEventList>
 8010f46:	4603      	mov	r3, r0
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d013      	beq.n	8010f74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010f4c:	4b3f      	ldr	r3, [pc, #252]	; (801104c <xQueueGenericSend+0x200>)
 8010f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f52:	601a      	str	r2, [r3, #0]
 8010f54:	f3bf 8f4f 	dsb	sy
 8010f58:	f3bf 8f6f 	isb	sy
 8010f5c:	e00a      	b.n	8010f74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d007      	beq.n	8010f74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010f64:	4b39      	ldr	r3, [pc, #228]	; (801104c <xQueueGenericSend+0x200>)
 8010f66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f6a:	601a      	str	r2, [r3, #0]
 8010f6c:	f3bf 8f4f 	dsb	sy
 8010f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010f74:	f001 fe72 	bl	8012c5c <vPortExitCritical>
				return pdPASS;
 8010f78:	2301      	movs	r3, #1
 8010f7a:	e063      	b.n	8011044 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d103      	bne.n	8010f8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f82:	f001 fe6b 	bl	8012c5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010f86:	2300      	movs	r3, #0
 8010f88:	e05c      	b.n	8011044 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d106      	bne.n	8010f9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f90:	f107 0314 	add.w	r3, r7, #20
 8010f94:	4618      	mov	r0, r3
 8010f96:	f001 f98f 	bl	80122b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010f9a:	2301      	movs	r3, #1
 8010f9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010f9e:	f001 fe5d 	bl	8012c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010fa2:	f000 ff3d 	bl	8011e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fa6:	f001 fe27 	bl	8012bf8 <vPortEnterCritical>
 8010faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fb0:	b25b      	sxtb	r3, r3
 8010fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fb6:	d103      	bne.n	8010fc0 <xQueueGenericSend+0x174>
 8010fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fba:	2200      	movs	r2, #0
 8010fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fc6:	b25b      	sxtb	r3, r3
 8010fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fcc:	d103      	bne.n	8010fd6 <xQueueGenericSend+0x18a>
 8010fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd0:	2200      	movs	r2, #0
 8010fd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fd6:	f001 fe41 	bl	8012c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fda:	1d3a      	adds	r2, r7, #4
 8010fdc:	f107 0314 	add.w	r3, r7, #20
 8010fe0:	4611      	mov	r1, r2
 8010fe2:	4618      	mov	r0, r3
 8010fe4:	f001 f97e 	bl	80122e4 <xTaskCheckForTimeOut>
 8010fe8:	4603      	mov	r3, r0
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d124      	bne.n	8011038 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ff0:	f000 fbe1 	bl	80117b6 <prvIsQueueFull>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d018      	beq.n	801102c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffc:	3310      	adds	r3, #16
 8010ffe:	687a      	ldr	r2, [r7, #4]
 8011000:	4611      	mov	r1, r2
 8011002:	4618      	mov	r0, r3
 8011004:	f001 f8ce 	bl	80121a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801100a:	f000 fb6c 	bl	80116e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801100e:	f000 ff15 	bl	8011e3c <xTaskResumeAll>
 8011012:	4603      	mov	r3, r0
 8011014:	2b00      	cmp	r3, #0
 8011016:	f47f af7c 	bne.w	8010f12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 801101a:	4b0c      	ldr	r3, [pc, #48]	; (801104c <xQueueGenericSend+0x200>)
 801101c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011020:	601a      	str	r2, [r3, #0]
 8011022:	f3bf 8f4f 	dsb	sy
 8011026:	f3bf 8f6f 	isb	sy
 801102a:	e772      	b.n	8010f12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 801102c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801102e:	f000 fb5a 	bl	80116e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011032:	f000 ff03 	bl	8011e3c <xTaskResumeAll>
 8011036:	e76c      	b.n	8010f12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011038:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801103a:	f000 fb54 	bl	80116e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801103e:	f000 fefd 	bl	8011e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011044:	4618      	mov	r0, r3
 8011046:	3738      	adds	r7, #56	; 0x38
 8011048:	46bd      	mov	sp, r7
 801104a:	bd80      	pop	{r7, pc}
 801104c:	e000ed04 	.word	0xe000ed04

08011050 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b08e      	sub	sp, #56	; 0x38
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801105e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011060:	2b00      	cmp	r3, #0
 8011062:	d10b      	bne.n	801107c <xQueueGiveFromISR+0x2c>
 8011064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011068:	b672      	cpsid	i
 801106a:	f383 8811 	msr	BASEPRI, r3
 801106e:	f3bf 8f6f 	isb	sy
 8011072:	f3bf 8f4f 	dsb	sy
 8011076:	b662      	cpsie	i
 8011078:	623b      	str	r3, [r7, #32]
 801107a:	e7fe      	b.n	801107a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00b      	beq.n	801109c <xQueueGiveFromISR+0x4c>
 8011084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011088:	b672      	cpsid	i
 801108a:	f383 8811 	msr	BASEPRI, r3
 801108e:	f3bf 8f6f 	isb	sy
 8011092:	f3bf 8f4f 	dsb	sy
 8011096:	b662      	cpsie	i
 8011098:	61fb      	str	r3, [r7, #28]
 801109a:	e7fe      	b.n	801109a <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801109c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d103      	bne.n	80110ac <xQueueGiveFromISR+0x5c>
 80110a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110a6:	689b      	ldr	r3, [r3, #8]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d101      	bne.n	80110b0 <xQueueGiveFromISR+0x60>
 80110ac:	2301      	movs	r3, #1
 80110ae:	e000      	b.n	80110b2 <xQueueGiveFromISR+0x62>
 80110b0:	2300      	movs	r3, #0
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10b      	bne.n	80110ce <xQueueGiveFromISR+0x7e>
 80110b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110ba:	b672      	cpsid	i
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	b662      	cpsie	i
 80110ca:	61bb      	str	r3, [r7, #24]
 80110cc:	e7fe      	b.n	80110cc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80110ce:	f001 fe73 	bl	8012db8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80110d2:	f3ef 8211 	mrs	r2, BASEPRI
 80110d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110da:	b672      	cpsid	i
 80110dc:	f383 8811 	msr	BASEPRI, r3
 80110e0:	f3bf 8f6f 	isb	sy
 80110e4:	f3bf 8f4f 	dsb	sy
 80110e8:	b662      	cpsie	i
 80110ea:	617a      	str	r2, [r7, #20]
 80110ec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80110ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80110f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80110f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80110f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80110f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110fe:	429a      	cmp	r2, r3
 8011100:	d22b      	bcs.n	801115a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801110c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110e:	1c5a      	adds	r2, r3, #1
 8011110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011112:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011114:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011118:	f1b3 3fff 	cmp.w	r3, #4294967295
 801111c:	d112      	bne.n	8011144 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011122:	2b00      	cmp	r3, #0
 8011124:	d016      	beq.n	8011154 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011128:	3324      	adds	r3, #36	; 0x24
 801112a:	4618      	mov	r0, r3
 801112c:	f001 f860 	bl	80121f0 <xTaskRemoveFromEventList>
 8011130:	4603      	mov	r3, r0
 8011132:	2b00      	cmp	r3, #0
 8011134:	d00e      	beq.n	8011154 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00b      	beq.n	8011154 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	2201      	movs	r2, #1
 8011140:	601a      	str	r2, [r3, #0]
 8011142:	e007      	b.n	8011154 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011148:	3301      	adds	r3, #1
 801114a:	b2db      	uxtb	r3, r3
 801114c:	b25a      	sxtb	r2, r3
 801114e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011154:	2301      	movs	r3, #1
 8011156:	637b      	str	r3, [r7, #52]	; 0x34
 8011158:	e001      	b.n	801115e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801115a:	2300      	movs	r3, #0
 801115c:	637b      	str	r3, [r7, #52]	; 0x34
 801115e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011160:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801116a:	4618      	mov	r0, r3
 801116c:	3738      	adds	r7, #56	; 0x38
 801116e:	46bd      	mov	sp, r7
 8011170:	bd80      	pop	{r7, pc}
	...

08011174 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b08c      	sub	sp, #48	; 0x30
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011180:	2300      	movs	r3, #0
 8011182:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118a:	2b00      	cmp	r3, #0
 801118c:	d10b      	bne.n	80111a6 <xQueueReceive+0x32>
	__asm volatile
 801118e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011192:	b672      	cpsid	i
 8011194:	f383 8811 	msr	BASEPRI, r3
 8011198:	f3bf 8f6f 	isb	sy
 801119c:	f3bf 8f4f 	dsb	sy
 80111a0:	b662      	cpsie	i
 80111a2:	623b      	str	r3, [r7, #32]
 80111a4:	e7fe      	b.n	80111a4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d103      	bne.n	80111b4 <xQueueReceive+0x40>
 80111ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d101      	bne.n	80111b8 <xQueueReceive+0x44>
 80111b4:	2301      	movs	r3, #1
 80111b6:	e000      	b.n	80111ba <xQueueReceive+0x46>
 80111b8:	2300      	movs	r3, #0
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d10b      	bne.n	80111d6 <xQueueReceive+0x62>
 80111be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c2:	b672      	cpsid	i
 80111c4:	f383 8811 	msr	BASEPRI, r3
 80111c8:	f3bf 8f6f 	isb	sy
 80111cc:	f3bf 8f4f 	dsb	sy
 80111d0:	b662      	cpsie	i
 80111d2:	61fb      	str	r3, [r7, #28]
 80111d4:	e7fe      	b.n	80111d4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111d6:	f001 f9c9 	bl	801256c <xTaskGetSchedulerState>
 80111da:	4603      	mov	r3, r0
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d102      	bne.n	80111e6 <xQueueReceive+0x72>
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d101      	bne.n	80111ea <xQueueReceive+0x76>
 80111e6:	2301      	movs	r3, #1
 80111e8:	e000      	b.n	80111ec <xQueueReceive+0x78>
 80111ea:	2300      	movs	r3, #0
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d10b      	bne.n	8011208 <xQueueReceive+0x94>
 80111f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111f4:	b672      	cpsid	i
 80111f6:	f383 8811 	msr	BASEPRI, r3
 80111fa:	f3bf 8f6f 	isb	sy
 80111fe:	f3bf 8f4f 	dsb	sy
 8011202:	b662      	cpsie	i
 8011204:	61bb      	str	r3, [r7, #24]
 8011206:	e7fe      	b.n	8011206 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011208:	f001 fcf6 	bl	8012bf8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801120e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011210:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011214:	2b00      	cmp	r3, #0
 8011216:	d01f      	beq.n	8011258 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011218:	68b9      	ldr	r1, [r7, #8]
 801121a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801121c:	f000 fa3d 	bl	801169a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011222:	1e5a      	subs	r2, r3, #1
 8011224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011226:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801122a:	691b      	ldr	r3, [r3, #16]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00f      	beq.n	8011250 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011232:	3310      	adds	r3, #16
 8011234:	4618      	mov	r0, r3
 8011236:	f000 ffdb 	bl	80121f0 <xTaskRemoveFromEventList>
 801123a:	4603      	mov	r3, r0
 801123c:	2b00      	cmp	r3, #0
 801123e:	d007      	beq.n	8011250 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011240:	4b3c      	ldr	r3, [pc, #240]	; (8011334 <xQueueReceive+0x1c0>)
 8011242:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011246:	601a      	str	r2, [r3, #0]
 8011248:	f3bf 8f4f 	dsb	sy
 801124c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011250:	f001 fd04 	bl	8012c5c <vPortExitCritical>
				return pdPASS;
 8011254:	2301      	movs	r3, #1
 8011256:	e069      	b.n	801132c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d103      	bne.n	8011266 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801125e:	f001 fcfd 	bl	8012c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011262:	2300      	movs	r3, #0
 8011264:	e062      	b.n	801132c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	2b00      	cmp	r3, #0
 801126a:	d106      	bne.n	801127a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801126c:	f107 0310 	add.w	r3, r7, #16
 8011270:	4618      	mov	r0, r3
 8011272:	f001 f821 	bl	80122b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011276:	2301      	movs	r3, #1
 8011278:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801127a:	f001 fcef 	bl	8012c5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801127e:	f000 fdcf 	bl	8011e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011282:	f001 fcb9 	bl	8012bf8 <vPortEnterCritical>
 8011286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801128c:	b25b      	sxtb	r3, r3
 801128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011292:	d103      	bne.n	801129c <xQueueReceive+0x128>
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011296:	2200      	movs	r2, #0
 8011298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801129c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801129e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112a2:	b25b      	sxtb	r3, r3
 80112a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a8:	d103      	bne.n	80112b2 <xQueueReceive+0x13e>
 80112aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112ac:	2200      	movs	r2, #0
 80112ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80112b2:	f001 fcd3 	bl	8012c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112b6:	1d3a      	adds	r2, r7, #4
 80112b8:	f107 0310 	add.w	r3, r7, #16
 80112bc:	4611      	mov	r1, r2
 80112be:	4618      	mov	r0, r3
 80112c0:	f001 f810 	bl	80122e4 <xTaskCheckForTimeOut>
 80112c4:	4603      	mov	r3, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d123      	bne.n	8011312 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112cc:	f000 fa5d 	bl	801178a <prvIsQueueEmpty>
 80112d0:	4603      	mov	r3, r0
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d017      	beq.n	8011306 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80112d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d8:	3324      	adds	r3, #36	; 0x24
 80112da:	687a      	ldr	r2, [r7, #4]
 80112dc:	4611      	mov	r1, r2
 80112de:	4618      	mov	r0, r3
 80112e0:	f000 ff60 	bl	80121a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80112e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80112e6:	f000 f9fe 	bl	80116e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80112ea:	f000 fda7 	bl	8011e3c <xTaskResumeAll>
 80112ee:	4603      	mov	r3, r0
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d189      	bne.n	8011208 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80112f4:	4b0f      	ldr	r3, [pc, #60]	; (8011334 <xQueueReceive+0x1c0>)
 80112f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112fa:	601a      	str	r2, [r3, #0]
 80112fc:	f3bf 8f4f 	dsb	sy
 8011300:	f3bf 8f6f 	isb	sy
 8011304:	e780      	b.n	8011208 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011308:	f000 f9ed 	bl	80116e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801130c:	f000 fd96 	bl	8011e3c <xTaskResumeAll>
 8011310:	e77a      	b.n	8011208 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011312:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011314:	f000 f9e7 	bl	80116e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011318:	f000 fd90 	bl	8011e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801131c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801131e:	f000 fa34 	bl	801178a <prvIsQueueEmpty>
 8011322:	4603      	mov	r3, r0
 8011324:	2b00      	cmp	r3, #0
 8011326:	f43f af6f 	beq.w	8011208 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801132a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801132c:	4618      	mov	r0, r3
 801132e:	3730      	adds	r7, #48	; 0x30
 8011330:	46bd      	mov	sp, r7
 8011332:	bd80      	pop	{r7, pc}
 8011334:	e000ed04 	.word	0xe000ed04

08011338 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b08e      	sub	sp, #56	; 0x38
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011342:	2300      	movs	r3, #0
 8011344:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801134a:	2300      	movs	r3, #0
 801134c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801134e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011350:	2b00      	cmp	r3, #0
 8011352:	d10b      	bne.n	801136c <xQueueSemaphoreTake+0x34>
 8011354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011358:	b672      	cpsid	i
 801135a:	f383 8811 	msr	BASEPRI, r3
 801135e:	f3bf 8f6f 	isb	sy
 8011362:	f3bf 8f4f 	dsb	sy
 8011366:	b662      	cpsie	i
 8011368:	623b      	str	r3, [r7, #32]
 801136a:	e7fe      	b.n	801136a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801136c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011370:	2b00      	cmp	r3, #0
 8011372:	d00b      	beq.n	801138c <xQueueSemaphoreTake+0x54>
 8011374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011378:	b672      	cpsid	i
 801137a:	f383 8811 	msr	BASEPRI, r3
 801137e:	f3bf 8f6f 	isb	sy
 8011382:	f3bf 8f4f 	dsb	sy
 8011386:	b662      	cpsie	i
 8011388:	61fb      	str	r3, [r7, #28]
 801138a:	e7fe      	b.n	801138a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801138c:	f001 f8ee 	bl	801256c <xTaskGetSchedulerState>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d102      	bne.n	801139c <xQueueSemaphoreTake+0x64>
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d101      	bne.n	80113a0 <xQueueSemaphoreTake+0x68>
 801139c:	2301      	movs	r3, #1
 801139e:	e000      	b.n	80113a2 <xQueueSemaphoreTake+0x6a>
 80113a0:	2300      	movs	r3, #0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d10b      	bne.n	80113be <xQueueSemaphoreTake+0x86>
 80113a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113aa:	b672      	cpsid	i
 80113ac:	f383 8811 	msr	BASEPRI, r3
 80113b0:	f3bf 8f6f 	isb	sy
 80113b4:	f3bf 8f4f 	dsb	sy
 80113b8:	b662      	cpsie	i
 80113ba:	61bb      	str	r3, [r7, #24]
 80113bc:	e7fe      	b.n	80113bc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80113be:	f001 fc1b 	bl	8012bf8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80113c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80113c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d024      	beq.n	8011418 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80113ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113d0:	1e5a      	subs	r2, r3, #1
 80113d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80113d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d104      	bne.n	80113e8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80113de:	f001 fa87 	bl	80128f0 <pvTaskIncrementMutexHeldCount>
 80113e2:	4602      	mov	r2, r0
 80113e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113e6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80113e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113ea:	691b      	ldr	r3, [r3, #16]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d00f      	beq.n	8011410 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80113f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113f2:	3310      	adds	r3, #16
 80113f4:	4618      	mov	r0, r3
 80113f6:	f000 fefb 	bl	80121f0 <xTaskRemoveFromEventList>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d007      	beq.n	8011410 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011400:	4b54      	ldr	r3, [pc, #336]	; (8011554 <xQueueSemaphoreTake+0x21c>)
 8011402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011406:	601a      	str	r2, [r3, #0]
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011410:	f001 fc24 	bl	8012c5c <vPortExitCritical>
				return pdPASS;
 8011414:	2301      	movs	r3, #1
 8011416:	e098      	b.n	801154a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011418:	683b      	ldr	r3, [r7, #0]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d112      	bne.n	8011444 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801141e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011420:	2b00      	cmp	r3, #0
 8011422:	d00b      	beq.n	801143c <xQueueSemaphoreTake+0x104>
 8011424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011428:	b672      	cpsid	i
 801142a:	f383 8811 	msr	BASEPRI, r3
 801142e:	f3bf 8f6f 	isb	sy
 8011432:	f3bf 8f4f 	dsb	sy
 8011436:	b662      	cpsie	i
 8011438:	617b      	str	r3, [r7, #20]
 801143a:	e7fe      	b.n	801143a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801143c:	f001 fc0e 	bl	8012c5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011440:	2300      	movs	r3, #0
 8011442:	e082      	b.n	801154a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011446:	2b00      	cmp	r3, #0
 8011448:	d106      	bne.n	8011458 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801144a:	f107 030c 	add.w	r3, r7, #12
 801144e:	4618      	mov	r0, r3
 8011450:	f000 ff32 	bl	80122b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011454:	2301      	movs	r3, #1
 8011456:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011458:	f001 fc00 	bl	8012c5c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801145c:	f000 fce0 	bl	8011e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011460:	f001 fbca 	bl	8012bf8 <vPortEnterCritical>
 8011464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801146a:	b25b      	sxtb	r3, r3
 801146c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011470:	d103      	bne.n	801147a <xQueueSemaphoreTake+0x142>
 8011472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011474:	2200      	movs	r2, #0
 8011476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801147c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011480:	b25b      	sxtb	r3, r3
 8011482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011486:	d103      	bne.n	8011490 <xQueueSemaphoreTake+0x158>
 8011488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801148a:	2200      	movs	r2, #0
 801148c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011490:	f001 fbe4 	bl	8012c5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011494:	463a      	mov	r2, r7
 8011496:	f107 030c 	add.w	r3, r7, #12
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f000 ff21 	bl	80122e4 <xTaskCheckForTimeOut>
 80114a2:	4603      	mov	r3, r0
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d132      	bne.n	801150e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114aa:	f000 f96e 	bl	801178a <prvIsQueueEmpty>
 80114ae:	4603      	mov	r3, r0
 80114b0:	2b00      	cmp	r3, #0
 80114b2:	d026      	beq.n	8011502 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d109      	bne.n	80114d0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80114bc:	f001 fb9c 	bl	8012bf8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	689b      	ldr	r3, [r3, #8]
 80114c4:	4618      	mov	r0, r3
 80114c6:	f001 f86f 	bl	80125a8 <xTaskPriorityInherit>
 80114ca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80114cc:	f001 fbc6 	bl	8012c5c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80114d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114d2:	3324      	adds	r3, #36	; 0x24
 80114d4:	683a      	ldr	r2, [r7, #0]
 80114d6:	4611      	mov	r1, r2
 80114d8:	4618      	mov	r0, r3
 80114da:	f000 fe63 	bl	80121a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80114de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80114e0:	f000 f901 	bl	80116e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80114e4:	f000 fcaa 	bl	8011e3c <xTaskResumeAll>
 80114e8:	4603      	mov	r3, r0
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f47f af67 	bne.w	80113be <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80114f0:	4b18      	ldr	r3, [pc, #96]	; (8011554 <xQueueSemaphoreTake+0x21c>)
 80114f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114f6:	601a      	str	r2, [r3, #0]
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	e75d      	b.n	80113be <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011504:	f000 f8ef 	bl	80116e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011508:	f000 fc98 	bl	8011e3c <xTaskResumeAll>
 801150c:	e757      	b.n	80113be <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801150e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011510:	f000 f8e9 	bl	80116e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011514:	f000 fc92 	bl	8011e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801151a:	f000 f936 	bl	801178a <prvIsQueueEmpty>
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	f43f af4c 	beq.w	80113be <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011528:	2b00      	cmp	r3, #0
 801152a:	d00d      	beq.n	8011548 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801152c:	f001 fb64 	bl	8012bf8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011532:	f000 f830 	bl	8011596 <prvGetDisinheritPriorityAfterTimeout>
 8011536:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153a:	689b      	ldr	r3, [r3, #8]
 801153c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801153e:	4618      	mov	r0, r3
 8011540:	f001 f93a 	bl	80127b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011544:	f001 fb8a 	bl	8012c5c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011548:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801154a:	4618      	mov	r0, r3
 801154c:	3738      	adds	r7, #56	; 0x38
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	e000ed04 	.word	0xe000ed04

08011558 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d10b      	bne.n	801157e <uxQueueMessagesWaiting+0x26>
 8011566:	f04f 0350 	mov.w	r3, #80	; 0x50
 801156a:	b672      	cpsid	i
 801156c:	f383 8811 	msr	BASEPRI, r3
 8011570:	f3bf 8f6f 	isb	sy
 8011574:	f3bf 8f4f 	dsb	sy
 8011578:	b662      	cpsie	i
 801157a:	60bb      	str	r3, [r7, #8]
 801157c:	e7fe      	b.n	801157c <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 801157e:	f001 fb3b 	bl	8012bf8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011586:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8011588:	f001 fb68 	bl	8012c5c <vPortExitCritical>

	return uxReturn;
 801158c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801158e:	4618      	mov	r0, r3
 8011590:	3710      	adds	r7, #16
 8011592:	46bd      	mov	sp, r7
 8011594:	bd80      	pop	{r7, pc}

08011596 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011596:	b480      	push	{r7}
 8011598:	b085      	sub	sp, #20
 801159a:	af00      	add	r7, sp, #0
 801159c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115aa:	681b      	ldr	r3, [r3, #0]
 80115ac:	f1c3 0307 	rsb	r3, r3, #7
 80115b0:	60fb      	str	r3, [r7, #12]
 80115b2:	e001      	b.n	80115b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80115b4:	2300      	movs	r3, #0
 80115b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80115b8:	68fb      	ldr	r3, [r7, #12]
	}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3714      	adds	r7, #20
 80115be:	46bd      	mov	sp, r7
 80115c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c4:	4770      	bx	lr

080115c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b086      	sub	sp, #24
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	60f8      	str	r0, [r7, #12]
 80115ce:	60b9      	str	r1, [r7, #8]
 80115d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80115d2:	2300      	movs	r3, #0
 80115d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d10d      	bne.n	8011600 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d14d      	bne.n	8011688 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	689b      	ldr	r3, [r3, #8]
 80115f0:	4618      	mov	r0, r3
 80115f2:	f001 f859 	bl	80126a8 <xTaskPriorityDisinherit>
 80115f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2200      	movs	r2, #0
 80115fc:	609a      	str	r2, [r3, #8]
 80115fe:	e043      	b.n	8011688 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d119      	bne.n	801163a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	6858      	ldr	r0, [r3, #4]
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801160e:	461a      	mov	r2, r3
 8011610:	68b9      	ldr	r1, [r7, #8]
 8011612:	f001 fe17 	bl	8013244 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011616:	68fb      	ldr	r3, [r7, #12]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801161e:	441a      	add	r2, r3
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	685a      	ldr	r2, [r3, #4]
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	689b      	ldr	r3, [r3, #8]
 801162c:	429a      	cmp	r2, r3
 801162e:	d32b      	bcc.n	8011688 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	681a      	ldr	r2, [r3, #0]
 8011634:	68fb      	ldr	r3, [r7, #12]
 8011636:	605a      	str	r2, [r3, #4]
 8011638:	e026      	b.n	8011688 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	68d8      	ldr	r0, [r3, #12]
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011642:	461a      	mov	r2, r3
 8011644:	68b9      	ldr	r1, [r7, #8]
 8011646:	f001 fdfd 	bl	8013244 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	68da      	ldr	r2, [r3, #12]
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011652:	425b      	negs	r3, r3
 8011654:	441a      	add	r2, r3
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	68da      	ldr	r2, [r3, #12]
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	429a      	cmp	r2, r3
 8011664:	d207      	bcs.n	8011676 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	689a      	ldr	r2, [r3, #8]
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801166e:	425b      	negs	r3, r3
 8011670:	441a      	add	r2, r3
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2b02      	cmp	r3, #2
 801167a:	d105      	bne.n	8011688 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	2b00      	cmp	r3, #0
 8011680:	d002      	beq.n	8011688 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	3b01      	subs	r3, #1
 8011686:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011688:	693b      	ldr	r3, [r7, #16]
 801168a:	1c5a      	adds	r2, r3, #1
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011690:	697b      	ldr	r3, [r7, #20]
}
 8011692:	4618      	mov	r0, r3
 8011694:	3718      	adds	r7, #24
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b082      	sub	sp, #8
 801169e:	af00      	add	r7, sp, #0
 80116a0:	6078      	str	r0, [r7, #4]
 80116a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d018      	beq.n	80116de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	68da      	ldr	r2, [r3, #12]
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116b4:	441a      	add	r2, r3
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	68da      	ldr	r2, [r3, #12]
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	689b      	ldr	r3, [r3, #8]
 80116c2:	429a      	cmp	r2, r3
 80116c4:	d303      	bcc.n	80116ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	68d9      	ldr	r1, [r3, #12]
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116d6:	461a      	mov	r2, r3
 80116d8:	6838      	ldr	r0, [r7, #0]
 80116da:	f001 fdb3 	bl	8013244 <memcpy>
	}
}
 80116de:	bf00      	nop
 80116e0:	3708      	adds	r7, #8
 80116e2:	46bd      	mov	sp, r7
 80116e4:	bd80      	pop	{r7, pc}

080116e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80116e6:	b580      	push	{r7, lr}
 80116e8:	b084      	sub	sp, #16
 80116ea:	af00      	add	r7, sp, #0
 80116ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80116ee:	f001 fa83 	bl	8012bf8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80116fa:	e011      	b.n	8011720 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011700:	2b00      	cmp	r3, #0
 8011702:	d012      	beq.n	801172a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	3324      	adds	r3, #36	; 0x24
 8011708:	4618      	mov	r0, r3
 801170a:	f000 fd71 	bl	80121f0 <xTaskRemoveFromEventList>
 801170e:	4603      	mov	r3, r0
 8011710:	2b00      	cmp	r3, #0
 8011712:	d001      	beq.n	8011718 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011714:	f000 fe4a 	bl	80123ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011718:	7bfb      	ldrb	r3, [r7, #15]
 801171a:	3b01      	subs	r3, #1
 801171c:	b2db      	uxtb	r3, r3
 801171e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011724:	2b00      	cmp	r3, #0
 8011726:	dce9      	bgt.n	80116fc <prvUnlockQueue+0x16>
 8011728:	e000      	b.n	801172c <prvUnlockQueue+0x46>
					break;
 801172a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	22ff      	movs	r2, #255	; 0xff
 8011730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011734:	f001 fa92 	bl	8012c5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011738:	f001 fa5e 	bl	8012bf8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011742:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011744:	e011      	b.n	801176a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	691b      	ldr	r3, [r3, #16]
 801174a:	2b00      	cmp	r3, #0
 801174c:	d012      	beq.n	8011774 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	3310      	adds	r3, #16
 8011752:	4618      	mov	r0, r3
 8011754:	f000 fd4c 	bl	80121f0 <xTaskRemoveFromEventList>
 8011758:	4603      	mov	r3, r0
 801175a:	2b00      	cmp	r3, #0
 801175c:	d001      	beq.n	8011762 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801175e:	f000 fe25 	bl	80123ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011762:	7bbb      	ldrb	r3, [r7, #14]
 8011764:	3b01      	subs	r3, #1
 8011766:	b2db      	uxtb	r3, r3
 8011768:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801176a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801176e:	2b00      	cmp	r3, #0
 8011770:	dce9      	bgt.n	8011746 <prvUnlockQueue+0x60>
 8011772:	e000      	b.n	8011776 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011774:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	22ff      	movs	r2, #255	; 0xff
 801177a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801177e:	f001 fa6d 	bl	8012c5c <vPortExitCritical>
}
 8011782:	bf00      	nop
 8011784:	3710      	adds	r7, #16
 8011786:	46bd      	mov	sp, r7
 8011788:	bd80      	pop	{r7, pc}

0801178a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801178a:	b580      	push	{r7, lr}
 801178c:	b084      	sub	sp, #16
 801178e:	af00      	add	r7, sp, #0
 8011790:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011792:	f001 fa31 	bl	8012bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801179a:	2b00      	cmp	r3, #0
 801179c:	d102      	bne.n	80117a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801179e:	2301      	movs	r3, #1
 80117a0:	60fb      	str	r3, [r7, #12]
 80117a2:	e001      	b.n	80117a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80117a4:	2300      	movs	r3, #0
 80117a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80117a8:	f001 fa58 	bl	8012c5c <vPortExitCritical>

	return xReturn;
 80117ac:	68fb      	ldr	r3, [r7, #12]
}
 80117ae:	4618      	mov	r0, r3
 80117b0:	3710      	adds	r7, #16
 80117b2:	46bd      	mov	sp, r7
 80117b4:	bd80      	pop	{r7, pc}

080117b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80117b6:	b580      	push	{r7, lr}
 80117b8:	b084      	sub	sp, #16
 80117ba:	af00      	add	r7, sp, #0
 80117bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80117be:	f001 fa1b 	bl	8012bf8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d102      	bne.n	80117d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80117ce:	2301      	movs	r3, #1
 80117d0:	60fb      	str	r3, [r7, #12]
 80117d2:	e001      	b.n	80117d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80117d4:	2300      	movs	r3, #0
 80117d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80117d8:	f001 fa40 	bl	8012c5c <vPortExitCritical>

	return xReturn;
 80117dc:	68fb      	ldr	r3, [r7, #12]
}
 80117de:	4618      	mov	r0, r3
 80117e0:	3710      	adds	r7, #16
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}

080117e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80117e6:	b580      	push	{r7, lr}
 80117e8:	b08e      	sub	sp, #56	; 0x38
 80117ea:	af04      	add	r7, sp, #16
 80117ec:	60f8      	str	r0, [r7, #12]
 80117ee:	60b9      	str	r1, [r7, #8]
 80117f0:	607a      	str	r2, [r7, #4]
 80117f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80117f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d10b      	bne.n	8011812 <xTaskCreateStatic+0x2c>
 80117fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117fe:	b672      	cpsid	i
 8011800:	f383 8811 	msr	BASEPRI, r3
 8011804:	f3bf 8f6f 	isb	sy
 8011808:	f3bf 8f4f 	dsb	sy
 801180c:	b662      	cpsie	i
 801180e:	623b      	str	r3, [r7, #32]
 8011810:	e7fe      	b.n	8011810 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8011812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011814:	2b00      	cmp	r3, #0
 8011816:	d10b      	bne.n	8011830 <xTaskCreateStatic+0x4a>
 8011818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801181c:	b672      	cpsid	i
 801181e:	f383 8811 	msr	BASEPRI, r3
 8011822:	f3bf 8f6f 	isb	sy
 8011826:	f3bf 8f4f 	dsb	sy
 801182a:	b662      	cpsie	i
 801182c:	61fb      	str	r3, [r7, #28]
 801182e:	e7fe      	b.n	801182e <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011830:	2354      	movs	r3, #84	; 0x54
 8011832:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	2b54      	cmp	r3, #84	; 0x54
 8011838:	d00b      	beq.n	8011852 <xTaskCreateStatic+0x6c>
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	b672      	cpsid	i
 8011840:	f383 8811 	msr	BASEPRI, r3
 8011844:	f3bf 8f6f 	isb	sy
 8011848:	f3bf 8f4f 	dsb	sy
 801184c:	b662      	cpsie	i
 801184e:	61bb      	str	r3, [r7, #24]
 8011850:	e7fe      	b.n	8011850 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011852:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011856:	2b00      	cmp	r3, #0
 8011858:	d01e      	beq.n	8011898 <xTaskCreateStatic+0xb2>
 801185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801185c:	2b00      	cmp	r3, #0
 801185e:	d01b      	beq.n	8011898 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011862:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011866:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011868:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186c:	2202      	movs	r2, #2
 801186e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011872:	2300      	movs	r3, #0
 8011874:	9303      	str	r3, [sp, #12]
 8011876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011878:	9302      	str	r3, [sp, #8]
 801187a:	f107 0314 	add.w	r3, r7, #20
 801187e:	9301      	str	r3, [sp, #4]
 8011880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011882:	9300      	str	r3, [sp, #0]
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	68b9      	ldr	r1, [r7, #8]
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f000 f850 	bl	8011930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011890:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011892:	f000 f8d5 	bl	8011a40 <prvAddNewTaskToReadyList>
 8011896:	e001      	b.n	801189c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011898:	2300      	movs	r3, #0
 801189a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801189c:	697b      	ldr	r3, [r7, #20]
	}
 801189e:	4618      	mov	r0, r3
 80118a0:	3728      	adds	r7, #40	; 0x28
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}

080118a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80118a6:	b580      	push	{r7, lr}
 80118a8:	b08c      	sub	sp, #48	; 0x30
 80118aa:	af04      	add	r7, sp, #16
 80118ac:	60f8      	str	r0, [r7, #12]
 80118ae:	60b9      	str	r1, [r7, #8]
 80118b0:	603b      	str	r3, [r7, #0]
 80118b2:	4613      	mov	r3, r2
 80118b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80118b6:	88fb      	ldrh	r3, [r7, #6]
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	4618      	mov	r0, r3
 80118bc:	f001 fabe 	bl	8012e3c <pvPortMalloc>
 80118c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d00e      	beq.n	80118e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80118c8:	2054      	movs	r0, #84	; 0x54
 80118ca:	f001 fab7 	bl	8012e3c <pvPortMalloc>
 80118ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d003      	beq.n	80118de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	697a      	ldr	r2, [r7, #20]
 80118da:	631a      	str	r2, [r3, #48]	; 0x30
 80118dc:	e005      	b.n	80118ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80118de:	6978      	ldr	r0, [r7, #20]
 80118e0:	f001 fb74 	bl	8012fcc <vPortFree>
 80118e4:	e001      	b.n	80118ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80118e6:	2300      	movs	r3, #0
 80118e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80118ea:	69fb      	ldr	r3, [r7, #28]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d017      	beq.n	8011920 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80118f0:	69fb      	ldr	r3, [r7, #28]
 80118f2:	2200      	movs	r2, #0
 80118f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80118f8:	88fa      	ldrh	r2, [r7, #6]
 80118fa:	2300      	movs	r3, #0
 80118fc:	9303      	str	r3, [sp, #12]
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	9302      	str	r3, [sp, #8]
 8011902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011904:	9301      	str	r3, [sp, #4]
 8011906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011908:	9300      	str	r3, [sp, #0]
 801190a:	683b      	ldr	r3, [r7, #0]
 801190c:	68b9      	ldr	r1, [r7, #8]
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	f000 f80e 	bl	8011930 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011914:	69f8      	ldr	r0, [r7, #28]
 8011916:	f000 f893 	bl	8011a40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801191a:	2301      	movs	r3, #1
 801191c:	61bb      	str	r3, [r7, #24]
 801191e:	e002      	b.n	8011926 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011920:	f04f 33ff 	mov.w	r3, #4294967295
 8011924:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011926:	69bb      	ldr	r3, [r7, #24]
	}
 8011928:	4618      	mov	r0, r3
 801192a:	3720      	adds	r7, #32
 801192c:	46bd      	mov	sp, r7
 801192e:	bd80      	pop	{r7, pc}

08011930 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b088      	sub	sp, #32
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	607a      	str	r2, [r7, #4]
 801193c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011942:	6879      	ldr	r1, [r7, #4]
 8011944:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011948:	440b      	add	r3, r1
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	f023 0307 	bic.w	r3, r3, #7
 8011956:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011958:	69bb      	ldr	r3, [r7, #24]
 801195a:	f003 0307 	and.w	r3, r3, #7
 801195e:	2b00      	cmp	r3, #0
 8011960:	d00b      	beq.n	801197a <prvInitialiseNewTask+0x4a>
 8011962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011966:	b672      	cpsid	i
 8011968:	f383 8811 	msr	BASEPRI, r3
 801196c:	f3bf 8f6f 	isb	sy
 8011970:	f3bf 8f4f 	dsb	sy
 8011974:	b662      	cpsie	i
 8011976:	617b      	str	r3, [r7, #20]
 8011978:	e7fe      	b.n	8011978 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d01f      	beq.n	80119c0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011980:	2300      	movs	r3, #0
 8011982:	61fb      	str	r3, [r7, #28]
 8011984:	e012      	b.n	80119ac <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011986:	68ba      	ldr	r2, [r7, #8]
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	4413      	add	r3, r2
 801198c:	7819      	ldrb	r1, [r3, #0]
 801198e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	4413      	add	r3, r2
 8011994:	3334      	adds	r3, #52	; 0x34
 8011996:	460a      	mov	r2, r1
 8011998:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801199a:	68ba      	ldr	r2, [r7, #8]
 801199c:	69fb      	ldr	r3, [r7, #28]
 801199e:	4413      	add	r3, r2
 80119a0:	781b      	ldrb	r3, [r3, #0]
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d006      	beq.n	80119b4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80119a6:	69fb      	ldr	r3, [r7, #28]
 80119a8:	3301      	adds	r3, #1
 80119aa:	61fb      	str	r3, [r7, #28]
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	2b0f      	cmp	r3, #15
 80119b0:	d9e9      	bls.n	8011986 <prvInitialiseNewTask+0x56>
 80119b2:	e000      	b.n	80119b6 <prvInitialiseNewTask+0x86>
			{
				break;
 80119b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80119b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119b8:	2200      	movs	r2, #0
 80119ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80119be:	e003      	b.n	80119c8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80119c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c2:	2200      	movs	r2, #0
 80119c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80119c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ca:	2b06      	cmp	r3, #6
 80119cc:	d901      	bls.n	80119d2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80119ce:	2306      	movs	r3, #6
 80119d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80119d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80119dc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	2200      	movs	r2, #0
 80119e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80119e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e6:	3304      	adds	r3, #4
 80119e8:	4618      	mov	r0, r3
 80119ea:	f7ff f852 	bl	8010a92 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80119ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f0:	3318      	adds	r3, #24
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7ff f84d 	bl	8010a92 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80119f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80119fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a00:	f1c3 0207 	rsb	r2, r3, #7
 8011a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a0c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a10:	2200      	movs	r2, #0
 8011a12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a16:	2200      	movs	r2, #0
 8011a18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011a1c:	683a      	ldr	r2, [r7, #0]
 8011a1e:	68f9      	ldr	r1, [r7, #12]
 8011a20:	69b8      	ldr	r0, [r7, #24]
 8011a22:	f000 ffdf 	bl	80129e4 <pxPortInitialiseStack>
 8011a26:	4602      	mov	r2, r0
 8011a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a2a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d002      	beq.n	8011a38 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a36:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a38:	bf00      	nop
 8011a3a:	3720      	adds	r7, #32
 8011a3c:	46bd      	mov	sp, r7
 8011a3e:	bd80      	pop	{r7, pc}

08011a40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b082      	sub	sp, #8
 8011a44:	af00      	add	r7, sp, #0
 8011a46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011a48:	f001 f8d6 	bl	8012bf8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011a4c:	4b2a      	ldr	r3, [pc, #168]	; (8011af8 <prvAddNewTaskToReadyList+0xb8>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	3301      	adds	r3, #1
 8011a52:	4a29      	ldr	r2, [pc, #164]	; (8011af8 <prvAddNewTaskToReadyList+0xb8>)
 8011a54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011a56:	4b29      	ldr	r3, [pc, #164]	; (8011afc <prvAddNewTaskToReadyList+0xbc>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d109      	bne.n	8011a72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011a5e:	4a27      	ldr	r2, [pc, #156]	; (8011afc <prvAddNewTaskToReadyList+0xbc>)
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011a64:	4b24      	ldr	r3, [pc, #144]	; (8011af8 <prvAddNewTaskToReadyList+0xb8>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b01      	cmp	r3, #1
 8011a6a:	d110      	bne.n	8011a8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011a6c:	f000 fcc2 	bl	80123f4 <prvInitialiseTaskLists>
 8011a70:	e00d      	b.n	8011a8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011a72:	4b23      	ldr	r3, [pc, #140]	; (8011b00 <prvAddNewTaskToReadyList+0xc0>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d109      	bne.n	8011a8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011a7a:	4b20      	ldr	r3, [pc, #128]	; (8011afc <prvAddNewTaskToReadyList+0xbc>)
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a84:	429a      	cmp	r2, r3
 8011a86:	d802      	bhi.n	8011a8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011a88:	4a1c      	ldr	r2, [pc, #112]	; (8011afc <prvAddNewTaskToReadyList+0xbc>)
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011a8e:	4b1d      	ldr	r3, [pc, #116]	; (8011b04 <prvAddNewTaskToReadyList+0xc4>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	3301      	adds	r3, #1
 8011a94:	4a1b      	ldr	r2, [pc, #108]	; (8011b04 <prvAddNewTaskToReadyList+0xc4>)
 8011a96:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a9c:	2201      	movs	r2, #1
 8011a9e:	409a      	lsls	r2, r3
 8011aa0:	4b19      	ldr	r3, [pc, #100]	; (8011b08 <prvAddNewTaskToReadyList+0xc8>)
 8011aa2:	681b      	ldr	r3, [r3, #0]
 8011aa4:	4313      	orrs	r3, r2
 8011aa6:	4a18      	ldr	r2, [pc, #96]	; (8011b08 <prvAddNewTaskToReadyList+0xc8>)
 8011aa8:	6013      	str	r3, [r2, #0]
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011aae:	4613      	mov	r3, r2
 8011ab0:	009b      	lsls	r3, r3, #2
 8011ab2:	4413      	add	r3, r2
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	4a15      	ldr	r2, [pc, #84]	; (8011b0c <prvAddNewTaskToReadyList+0xcc>)
 8011ab8:	441a      	add	r2, r3
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	3304      	adds	r3, #4
 8011abe:	4619      	mov	r1, r3
 8011ac0:	4610      	mov	r0, r2
 8011ac2:	f7fe fff3 	bl	8010aac <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ac6:	f001 f8c9 	bl	8012c5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011aca:	4b0d      	ldr	r3, [pc, #52]	; (8011b00 <prvAddNewTaskToReadyList+0xc0>)
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d00e      	beq.n	8011af0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011ad2:	4b0a      	ldr	r3, [pc, #40]	; (8011afc <prvAddNewTaskToReadyList+0xbc>)
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011adc:	429a      	cmp	r2, r3
 8011ade:	d207      	bcs.n	8011af0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011ae0:	4b0b      	ldr	r3, [pc, #44]	; (8011b10 <prvAddNewTaskToReadyList+0xd0>)
 8011ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ae6:	601a      	str	r2, [r3, #0]
 8011ae8:	f3bf 8f4f 	dsb	sy
 8011aec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011af0:	bf00      	nop
 8011af2:	3708      	adds	r7, #8
 8011af4:	46bd      	mov	sp, r7
 8011af6:	bd80      	pop	{r7, pc}
 8011af8:	200003b0 	.word	0x200003b0
 8011afc:	200002b0 	.word	0x200002b0
 8011b00:	200003bc 	.word	0x200003bc
 8011b04:	200003cc 	.word	0x200003cc
 8011b08:	200003b8 	.word	0x200003b8
 8011b0c:	200002b4 	.word	0x200002b4
 8011b10:	e000ed04 	.word	0xe000ed04

08011b14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8011b1c:	f001 f86c 	bl	8012bf8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d102      	bne.n	8011b2c <vTaskSuspend+0x18>
 8011b26:	4b3d      	ldr	r3, [pc, #244]	; (8011c1c <vTaskSuspend+0x108>)
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	e000      	b.n	8011b2e <vTaskSuspend+0x1a>
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	3304      	adds	r3, #4
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7ff f816 	bl	8010b66 <uxListRemove>
 8011b3a:	4603      	mov	r3, r0
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d115      	bne.n	8011b6c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b44:	4936      	ldr	r1, [pc, #216]	; (8011c20 <vTaskSuspend+0x10c>)
 8011b46:	4613      	mov	r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4413      	add	r3, r2
 8011b4c:	009b      	lsls	r3, r3, #2
 8011b4e:	440b      	add	r3, r1
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d10a      	bne.n	8011b6c <vTaskSuspend+0x58>
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b5a:	2201      	movs	r2, #1
 8011b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8011b60:	43da      	mvns	r2, r3
 8011b62:	4b30      	ldr	r3, [pc, #192]	; (8011c24 <vTaskSuspend+0x110>)
 8011b64:	681b      	ldr	r3, [r3, #0]
 8011b66:	4013      	ands	r3, r2
 8011b68:	4a2e      	ldr	r2, [pc, #184]	; (8011c24 <vTaskSuspend+0x110>)
 8011b6a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011b6c:	68fb      	ldr	r3, [r7, #12]
 8011b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d004      	beq.n	8011b7e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	3318      	adds	r3, #24
 8011b78:	4618      	mov	r0, r3
 8011b7a:	f7fe fff4 	bl	8010b66 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	3304      	adds	r3, #4
 8011b82:	4619      	mov	r1, r3
 8011b84:	4828      	ldr	r0, [pc, #160]	; (8011c28 <vTaskSuspend+0x114>)
 8011b86:	f7fe ff91 	bl	8010aac <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011b90:	b2db      	uxtb	r3, r3
 8011b92:	2b01      	cmp	r3, #1
 8011b94:	d103      	bne.n	8011b9e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8011b9e:	f001 f85d 	bl	8012c5c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8011ba2:	4b22      	ldr	r3, [pc, #136]	; (8011c2c <vTaskSuspend+0x118>)
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d005      	beq.n	8011bb6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8011baa:	f001 f825 	bl	8012bf8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8011bae:	f000 fcbd 	bl	801252c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8011bb2:	f001 f853 	bl	8012c5c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8011bb6:	4b19      	ldr	r3, [pc, #100]	; (8011c1c <vTaskSuspend+0x108>)
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	68fa      	ldr	r2, [r7, #12]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d128      	bne.n	8011c12 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 8011bc0:	4b1a      	ldr	r3, [pc, #104]	; (8011c2c <vTaskSuspend+0x118>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d018      	beq.n	8011bfa <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8011bc8:	4b19      	ldr	r3, [pc, #100]	; (8011c30 <vTaskSuspend+0x11c>)
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d00b      	beq.n	8011be8 <vTaskSuspend+0xd4>
 8011bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bd4:	b672      	cpsid	i
 8011bd6:	f383 8811 	msr	BASEPRI, r3
 8011bda:	f3bf 8f6f 	isb	sy
 8011bde:	f3bf 8f4f 	dsb	sy
 8011be2:	b662      	cpsie	i
 8011be4:	60bb      	str	r3, [r7, #8]
 8011be6:	e7fe      	b.n	8011be6 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 8011be8:	4b12      	ldr	r3, [pc, #72]	; (8011c34 <vTaskSuspend+0x120>)
 8011bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011bf8:	e00b      	b.n	8011c12 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8011bfa:	4b0b      	ldr	r3, [pc, #44]	; (8011c28 <vTaskSuspend+0x114>)
 8011bfc:	681a      	ldr	r2, [r3, #0]
 8011bfe:	4b0e      	ldr	r3, [pc, #56]	; (8011c38 <vTaskSuspend+0x124>)
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	429a      	cmp	r2, r3
 8011c04:	d103      	bne.n	8011c0e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 8011c06:	4b05      	ldr	r3, [pc, #20]	; (8011c1c <vTaskSuspend+0x108>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	601a      	str	r2, [r3, #0]
	}
 8011c0c:	e001      	b.n	8011c12 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 8011c0e:	f000 fa6d 	bl	80120ec <vTaskSwitchContext>
	}
 8011c12:	bf00      	nop
 8011c14:	3710      	adds	r7, #16
 8011c16:	46bd      	mov	sp, r7
 8011c18:	bd80      	pop	{r7, pc}
 8011c1a:	bf00      	nop
 8011c1c:	200002b0 	.word	0x200002b0
 8011c20:	200002b4 	.word	0x200002b4
 8011c24:	200003b8 	.word	0x200003b8
 8011c28:	2000039c 	.word	0x2000039c
 8011c2c:	200003bc 	.word	0x200003bc
 8011c30:	200003d8 	.word	0x200003d8
 8011c34:	e000ed04 	.word	0xe000ed04
 8011c38:	200003b0 	.word	0x200003b0

08011c3c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b087      	sub	sp, #28
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8011c44:	2300      	movs	r3, #0
 8011c46:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2b00      	cmp	r3, #0
 8011c50:	d10b      	bne.n	8011c6a <prvTaskIsTaskSuspended+0x2e>
 8011c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c56:	b672      	cpsid	i
 8011c58:	f383 8811 	msr	BASEPRI, r3
 8011c5c:	f3bf 8f6f 	isb	sy
 8011c60:	f3bf 8f4f 	dsb	sy
 8011c64:	b662      	cpsie	i
 8011c66:	60fb      	str	r3, [r7, #12]
 8011c68:	e7fe      	b.n	8011c68 <prvTaskIsTaskSuspended+0x2c>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	695b      	ldr	r3, [r3, #20]
 8011c6e:	4a0a      	ldr	r2, [pc, #40]	; (8011c98 <prvTaskIsTaskSuspended+0x5c>)
 8011c70:	4293      	cmp	r3, r2
 8011c72:	d10a      	bne.n	8011c8a <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8011c74:	693b      	ldr	r3, [r7, #16]
 8011c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c78:	4a08      	ldr	r2, [pc, #32]	; (8011c9c <prvTaskIsTaskSuspended+0x60>)
 8011c7a:	4293      	cmp	r3, r2
 8011c7c:	d005      	beq.n	8011c8a <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d101      	bne.n	8011c8a <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 8011c86:	2301      	movs	r3, #1
 8011c88:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011c8a:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	371c      	adds	r7, #28
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	2000039c 	.word	0x2000039c
 8011c9c:	20000370 	.word	0x20000370

08011ca0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8011ca0:	b580      	push	{r7, lr}
 8011ca2:	b084      	sub	sp, #16
 8011ca4:	af00      	add	r7, sp, #0
 8011ca6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d10b      	bne.n	8011cca <vTaskResume+0x2a>
 8011cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb6:	b672      	cpsid	i
 8011cb8:	f383 8811 	msr	BASEPRI, r3
 8011cbc:	f3bf 8f6f 	isb	sy
 8011cc0:	f3bf 8f4f 	dsb	sy
 8011cc4:	b662      	cpsie	i
 8011cc6:	60bb      	str	r3, [r7, #8]
 8011cc8:	e7fe      	b.n	8011cc8 <vTaskResume+0x28>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8011cca:	4b20      	ldr	r3, [pc, #128]	; (8011d4c <vTaskResume+0xac>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	68fa      	ldr	r2, [r7, #12]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d037      	beq.n	8011d44 <vTaskResume+0xa4>
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d034      	beq.n	8011d44 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8011cda:	f000 ff8d 	bl	8012bf8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8011cde:	68f8      	ldr	r0, [r7, #12]
 8011ce0:	f7ff ffac 	bl	8011c3c <prvTaskIsTaskSuspended>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d02a      	beq.n	8011d40 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	3304      	adds	r3, #4
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f7fe ff39 	bl	8010b66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011cf4:	68fb      	ldr	r3, [r7, #12]
 8011cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cf8:	2201      	movs	r2, #1
 8011cfa:	409a      	lsls	r2, r3
 8011cfc:	4b14      	ldr	r3, [pc, #80]	; (8011d50 <vTaskResume+0xb0>)
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4313      	orrs	r3, r2
 8011d02:	4a13      	ldr	r2, [pc, #76]	; (8011d50 <vTaskResume+0xb0>)
 8011d04:	6013      	str	r3, [r2, #0]
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d0a:	4613      	mov	r3, r2
 8011d0c:	009b      	lsls	r3, r3, #2
 8011d0e:	4413      	add	r3, r2
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4a10      	ldr	r2, [pc, #64]	; (8011d54 <vTaskResume+0xb4>)
 8011d14:	441a      	add	r2, r3
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	3304      	adds	r3, #4
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	4610      	mov	r0, r2
 8011d1e:	f7fe fec5 	bl	8010aac <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d26:	4b09      	ldr	r3, [pc, #36]	; (8011d4c <vTaskResume+0xac>)
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d307      	bcc.n	8011d40 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8011d30:	4b09      	ldr	r3, [pc, #36]	; (8011d58 <vTaskResume+0xb8>)
 8011d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d36:	601a      	str	r2, [r3, #0]
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8011d40:	f000 ff8c 	bl	8012c5c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011d44:	bf00      	nop
 8011d46:	3710      	adds	r7, #16
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}
 8011d4c:	200002b0 	.word	0x200002b0
 8011d50:	200003b8 	.word	0x200003b8
 8011d54:	200002b4 	.word	0x200002b4
 8011d58:	e000ed04 	.word	0xe000ed04

08011d5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08a      	sub	sp, #40	; 0x28
 8011d60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011d62:	2300      	movs	r3, #0
 8011d64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011d66:	2300      	movs	r3, #0
 8011d68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011d6a:	463a      	mov	r2, r7
 8011d6c:	1d39      	adds	r1, r7, #4
 8011d6e:	f107 0308 	add.w	r3, r7, #8
 8011d72:	4618      	mov	r0, r3
 8011d74:	f7f6 ff88 	bl	8008c88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	68ba      	ldr	r2, [r7, #8]
 8011d7e:	9202      	str	r2, [sp, #8]
 8011d80:	9301      	str	r3, [sp, #4]
 8011d82:	2300      	movs	r3, #0
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	2300      	movs	r3, #0
 8011d88:	460a      	mov	r2, r1
 8011d8a:	491f      	ldr	r1, [pc, #124]	; (8011e08 <vTaskStartScheduler+0xac>)
 8011d8c:	481f      	ldr	r0, [pc, #124]	; (8011e0c <vTaskStartScheduler+0xb0>)
 8011d8e:	f7ff fd2a 	bl	80117e6 <xTaskCreateStatic>
 8011d92:	4602      	mov	r2, r0
 8011d94:	4b1e      	ldr	r3, [pc, #120]	; (8011e10 <vTaskStartScheduler+0xb4>)
 8011d96:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011d98:	4b1d      	ldr	r3, [pc, #116]	; (8011e10 <vTaskStartScheduler+0xb4>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d002      	beq.n	8011da6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011da0:	2301      	movs	r3, #1
 8011da2:	617b      	str	r3, [r7, #20]
 8011da4:	e001      	b.n	8011daa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011da6:	2300      	movs	r3, #0
 8011da8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	2b01      	cmp	r3, #1
 8011dae:	d117      	bne.n	8011de0 <vTaskStartScheduler+0x84>
 8011db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db4:	b672      	cpsid	i
 8011db6:	f383 8811 	msr	BASEPRI, r3
 8011dba:	f3bf 8f6f 	isb	sy
 8011dbe:	f3bf 8f4f 	dsb	sy
 8011dc2:	b662      	cpsie	i
 8011dc4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011dc6:	4b13      	ldr	r3, [pc, #76]	; (8011e14 <vTaskStartScheduler+0xb8>)
 8011dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8011dcc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011dce:	4b12      	ldr	r3, [pc, #72]	; (8011e18 <vTaskStartScheduler+0xbc>)
 8011dd0:	2201      	movs	r2, #1
 8011dd2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011dd4:	4b11      	ldr	r3, [pc, #68]	; (8011e1c <vTaskStartScheduler+0xc0>)
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011dda:	f000 fe91 	bl	8012b00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011dde:	e00f      	b.n	8011e00 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011de6:	d10b      	bne.n	8011e00 <vTaskStartScheduler+0xa4>
 8011de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dec:	b672      	cpsid	i
 8011dee:	f383 8811 	msr	BASEPRI, r3
 8011df2:	f3bf 8f6f 	isb	sy
 8011df6:	f3bf 8f4f 	dsb	sy
 8011dfa:	b662      	cpsie	i
 8011dfc:	60fb      	str	r3, [r7, #12]
 8011dfe:	e7fe      	b.n	8011dfe <vTaskStartScheduler+0xa2>
}
 8011e00:	bf00      	nop
 8011e02:	3718      	adds	r7, #24
 8011e04:	46bd      	mov	sp, r7
 8011e06:	bd80      	pop	{r7, pc}
 8011e08:	0801337c 	.word	0x0801337c
 8011e0c:	080123c5 	.word	0x080123c5
 8011e10:	200003d4 	.word	0x200003d4
 8011e14:	200003d0 	.word	0x200003d0
 8011e18:	200003bc 	.word	0x200003bc
 8011e1c:	200003b4 	.word	0x200003b4

08011e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011e20:	b480      	push	{r7}
 8011e22:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011e24:	4b04      	ldr	r3, [pc, #16]	; (8011e38 <vTaskSuspendAll+0x18>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	3301      	adds	r3, #1
 8011e2a:	4a03      	ldr	r2, [pc, #12]	; (8011e38 <vTaskSuspendAll+0x18>)
 8011e2c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011e2e:	bf00      	nop
 8011e30:	46bd      	mov	sp, r7
 8011e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e36:	4770      	bx	lr
 8011e38:	200003d8 	.word	0x200003d8

08011e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011e42:	2300      	movs	r3, #0
 8011e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011e46:	2300      	movs	r3, #0
 8011e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011e4a:	4b42      	ldr	r3, [pc, #264]	; (8011f54 <xTaskResumeAll+0x118>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d10b      	bne.n	8011e6a <xTaskResumeAll+0x2e>
 8011e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e56:	b672      	cpsid	i
 8011e58:	f383 8811 	msr	BASEPRI, r3
 8011e5c:	f3bf 8f6f 	isb	sy
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	b662      	cpsie	i
 8011e66:	603b      	str	r3, [r7, #0]
 8011e68:	e7fe      	b.n	8011e68 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011e6a:	f000 fec5 	bl	8012bf8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011e6e:	4b39      	ldr	r3, [pc, #228]	; (8011f54 <xTaskResumeAll+0x118>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	3b01      	subs	r3, #1
 8011e74:	4a37      	ldr	r2, [pc, #220]	; (8011f54 <xTaskResumeAll+0x118>)
 8011e76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011e78:	4b36      	ldr	r3, [pc, #216]	; (8011f54 <xTaskResumeAll+0x118>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d161      	bne.n	8011f44 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011e80:	4b35      	ldr	r3, [pc, #212]	; (8011f58 <xTaskResumeAll+0x11c>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d05d      	beq.n	8011f44 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011e88:	e02e      	b.n	8011ee8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e8a:	4b34      	ldr	r3, [pc, #208]	; (8011f5c <xTaskResumeAll+0x120>)
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	68db      	ldr	r3, [r3, #12]
 8011e90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	3318      	adds	r3, #24
 8011e96:	4618      	mov	r0, r3
 8011e98:	f7fe fe65 	bl	8010b66 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	3304      	adds	r3, #4
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7fe fe60 	bl	8010b66 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011ea6:	68fb      	ldr	r3, [r7, #12]
 8011ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eaa:	2201      	movs	r2, #1
 8011eac:	409a      	lsls	r2, r3
 8011eae:	4b2c      	ldr	r3, [pc, #176]	; (8011f60 <xTaskResumeAll+0x124>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	4313      	orrs	r3, r2
 8011eb4:	4a2a      	ldr	r2, [pc, #168]	; (8011f60 <xTaskResumeAll+0x124>)
 8011eb6:	6013      	str	r3, [r2, #0]
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ebc:	4613      	mov	r3, r2
 8011ebe:	009b      	lsls	r3, r3, #2
 8011ec0:	4413      	add	r3, r2
 8011ec2:	009b      	lsls	r3, r3, #2
 8011ec4:	4a27      	ldr	r2, [pc, #156]	; (8011f64 <xTaskResumeAll+0x128>)
 8011ec6:	441a      	add	r2, r3
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	3304      	adds	r3, #4
 8011ecc:	4619      	mov	r1, r3
 8011ece:	4610      	mov	r0, r2
 8011ed0:	f7fe fdec 	bl	8010aac <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed8:	4b23      	ldr	r3, [pc, #140]	; (8011f68 <xTaskResumeAll+0x12c>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ede:	429a      	cmp	r2, r3
 8011ee0:	d302      	bcc.n	8011ee8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8011ee2:	4b22      	ldr	r3, [pc, #136]	; (8011f6c <xTaskResumeAll+0x130>)
 8011ee4:	2201      	movs	r2, #1
 8011ee6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ee8:	4b1c      	ldr	r3, [pc, #112]	; (8011f5c <xTaskResumeAll+0x120>)
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d1cc      	bne.n	8011e8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d001      	beq.n	8011efa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011ef6:	f000 fb19 	bl	801252c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011efa:	4b1d      	ldr	r3, [pc, #116]	; (8011f70 <xTaskResumeAll+0x134>)
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d010      	beq.n	8011f28 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011f06:	f000 f837 	bl	8011f78 <xTaskIncrementTick>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d002      	beq.n	8011f16 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8011f10:	4b16      	ldr	r3, [pc, #88]	; (8011f6c <xTaskResumeAll+0x130>)
 8011f12:	2201      	movs	r2, #1
 8011f14:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	3b01      	subs	r3, #1
 8011f1a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d1f1      	bne.n	8011f06 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8011f22:	4b13      	ldr	r3, [pc, #76]	; (8011f70 <xTaskResumeAll+0x134>)
 8011f24:	2200      	movs	r2, #0
 8011f26:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011f28:	4b10      	ldr	r3, [pc, #64]	; (8011f6c <xTaskResumeAll+0x130>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d009      	beq.n	8011f44 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011f30:	2301      	movs	r3, #1
 8011f32:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011f34:	4b0f      	ldr	r3, [pc, #60]	; (8011f74 <xTaskResumeAll+0x138>)
 8011f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f3a:	601a      	str	r2, [r3, #0]
 8011f3c:	f3bf 8f4f 	dsb	sy
 8011f40:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011f44:	f000 fe8a 	bl	8012c5c <vPortExitCritical>

	return xAlreadyYielded;
 8011f48:	68bb      	ldr	r3, [r7, #8]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	200003d8 	.word	0x200003d8
 8011f58:	200003b0 	.word	0x200003b0
 8011f5c:	20000370 	.word	0x20000370
 8011f60:	200003b8 	.word	0x200003b8
 8011f64:	200002b4 	.word	0x200002b4
 8011f68:	200002b0 	.word	0x200002b0
 8011f6c:	200003c4 	.word	0x200003c4
 8011f70:	200003c0 	.word	0x200003c0
 8011f74:	e000ed04 	.word	0xe000ed04

08011f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f82:	4b4f      	ldr	r3, [pc, #316]	; (80120c0 <xTaskIncrementTick+0x148>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f040 8089 	bne.w	801209e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011f8c:	4b4d      	ldr	r3, [pc, #308]	; (80120c4 <xTaskIncrementTick+0x14c>)
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	3301      	adds	r3, #1
 8011f92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011f94:	4a4b      	ldr	r2, [pc, #300]	; (80120c4 <xTaskIncrementTick+0x14c>)
 8011f96:	693b      	ldr	r3, [r7, #16]
 8011f98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011f9a:	693b      	ldr	r3, [r7, #16]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d121      	bne.n	8011fe4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011fa0:	4b49      	ldr	r3, [pc, #292]	; (80120c8 <xTaskIncrementTick+0x150>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d00b      	beq.n	8011fc2 <xTaskIncrementTick+0x4a>
 8011faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fae:	b672      	cpsid	i
 8011fb0:	f383 8811 	msr	BASEPRI, r3
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	f3bf 8f4f 	dsb	sy
 8011fbc:	b662      	cpsie	i
 8011fbe:	603b      	str	r3, [r7, #0]
 8011fc0:	e7fe      	b.n	8011fc0 <xTaskIncrementTick+0x48>
 8011fc2:	4b41      	ldr	r3, [pc, #260]	; (80120c8 <xTaskIncrementTick+0x150>)
 8011fc4:	681b      	ldr	r3, [r3, #0]
 8011fc6:	60fb      	str	r3, [r7, #12]
 8011fc8:	4b40      	ldr	r3, [pc, #256]	; (80120cc <xTaskIncrementTick+0x154>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	4a3e      	ldr	r2, [pc, #248]	; (80120c8 <xTaskIncrementTick+0x150>)
 8011fce:	6013      	str	r3, [r2, #0]
 8011fd0:	4a3e      	ldr	r2, [pc, #248]	; (80120cc <xTaskIncrementTick+0x154>)
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6013      	str	r3, [r2, #0]
 8011fd6:	4b3e      	ldr	r3, [pc, #248]	; (80120d0 <xTaskIncrementTick+0x158>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	3301      	adds	r3, #1
 8011fdc:	4a3c      	ldr	r2, [pc, #240]	; (80120d0 <xTaskIncrementTick+0x158>)
 8011fde:	6013      	str	r3, [r2, #0]
 8011fe0:	f000 faa4 	bl	801252c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011fe4:	4b3b      	ldr	r3, [pc, #236]	; (80120d4 <xTaskIncrementTick+0x15c>)
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	693a      	ldr	r2, [r7, #16]
 8011fea:	429a      	cmp	r2, r3
 8011fec:	d348      	bcc.n	8012080 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011fee:	4b36      	ldr	r3, [pc, #216]	; (80120c8 <xTaskIncrementTick+0x150>)
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d104      	bne.n	8012002 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ff8:	4b36      	ldr	r3, [pc, #216]	; (80120d4 <xTaskIncrementTick+0x15c>)
 8011ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8011ffe:	601a      	str	r2, [r3, #0]
					break;
 8012000:	e03e      	b.n	8012080 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012002:	4b31      	ldr	r3, [pc, #196]	; (80120c8 <xTaskIncrementTick+0x150>)
 8012004:	681b      	ldr	r3, [r3, #0]
 8012006:	68db      	ldr	r3, [r3, #12]
 8012008:	68db      	ldr	r3, [r3, #12]
 801200a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801200c:	68bb      	ldr	r3, [r7, #8]
 801200e:	685b      	ldr	r3, [r3, #4]
 8012010:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012012:	693a      	ldr	r2, [r7, #16]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	429a      	cmp	r2, r3
 8012018:	d203      	bcs.n	8012022 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801201a:	4a2e      	ldr	r2, [pc, #184]	; (80120d4 <xTaskIncrementTick+0x15c>)
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012020:	e02e      	b.n	8012080 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	3304      	adds	r3, #4
 8012026:	4618      	mov	r0, r3
 8012028:	f7fe fd9d 	bl	8010b66 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012030:	2b00      	cmp	r3, #0
 8012032:	d004      	beq.n	801203e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	3318      	adds	r3, #24
 8012038:	4618      	mov	r0, r3
 801203a:	f7fe fd94 	bl	8010b66 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012042:	2201      	movs	r2, #1
 8012044:	409a      	lsls	r2, r3
 8012046:	4b24      	ldr	r3, [pc, #144]	; (80120d8 <xTaskIncrementTick+0x160>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	4313      	orrs	r3, r2
 801204c:	4a22      	ldr	r2, [pc, #136]	; (80120d8 <xTaskIncrementTick+0x160>)
 801204e:	6013      	str	r3, [r2, #0]
 8012050:	68bb      	ldr	r3, [r7, #8]
 8012052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012054:	4613      	mov	r3, r2
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	4413      	add	r3, r2
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	4a1f      	ldr	r2, [pc, #124]	; (80120dc <xTaskIncrementTick+0x164>)
 801205e:	441a      	add	r2, r3
 8012060:	68bb      	ldr	r3, [r7, #8]
 8012062:	3304      	adds	r3, #4
 8012064:	4619      	mov	r1, r3
 8012066:	4610      	mov	r0, r2
 8012068:	f7fe fd20 	bl	8010aac <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012070:	4b1b      	ldr	r3, [pc, #108]	; (80120e0 <xTaskIncrementTick+0x168>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012076:	429a      	cmp	r2, r3
 8012078:	d3b9      	bcc.n	8011fee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801207a:	2301      	movs	r3, #1
 801207c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801207e:	e7b6      	b.n	8011fee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012080:	4b17      	ldr	r3, [pc, #92]	; (80120e0 <xTaskIncrementTick+0x168>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012086:	4915      	ldr	r1, [pc, #84]	; (80120dc <xTaskIncrementTick+0x164>)
 8012088:	4613      	mov	r3, r2
 801208a:	009b      	lsls	r3, r3, #2
 801208c:	4413      	add	r3, r2
 801208e:	009b      	lsls	r3, r3, #2
 8012090:	440b      	add	r3, r1
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	2b01      	cmp	r3, #1
 8012096:	d907      	bls.n	80120a8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8012098:	2301      	movs	r3, #1
 801209a:	617b      	str	r3, [r7, #20]
 801209c:	e004      	b.n	80120a8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801209e:	4b11      	ldr	r3, [pc, #68]	; (80120e4 <xTaskIncrementTick+0x16c>)
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	3301      	adds	r3, #1
 80120a4:	4a0f      	ldr	r2, [pc, #60]	; (80120e4 <xTaskIncrementTick+0x16c>)
 80120a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80120a8:	4b0f      	ldr	r3, [pc, #60]	; (80120e8 <xTaskIncrementTick+0x170>)
 80120aa:	681b      	ldr	r3, [r3, #0]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d001      	beq.n	80120b4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 80120b0:	2301      	movs	r3, #1
 80120b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80120b4:	697b      	ldr	r3, [r7, #20]
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3718      	adds	r7, #24
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	200003d8 	.word	0x200003d8
 80120c4:	200003b4 	.word	0x200003b4
 80120c8:	20000368 	.word	0x20000368
 80120cc:	2000036c 	.word	0x2000036c
 80120d0:	200003c8 	.word	0x200003c8
 80120d4:	200003d0 	.word	0x200003d0
 80120d8:	200003b8 	.word	0x200003b8
 80120dc:	200002b4 	.word	0x200002b4
 80120e0:	200002b0 	.word	0x200002b0
 80120e4:	200003c0 	.word	0x200003c0
 80120e8:	200003c4 	.word	0x200003c4

080120ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80120ec:	b480      	push	{r7}
 80120ee:	b087      	sub	sp, #28
 80120f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80120f2:	4b27      	ldr	r3, [pc, #156]	; (8012190 <vTaskSwitchContext+0xa4>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d003      	beq.n	8012102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80120fa:	4b26      	ldr	r3, [pc, #152]	; (8012194 <vTaskSwitchContext+0xa8>)
 80120fc:	2201      	movs	r2, #1
 80120fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012100:	e040      	b.n	8012184 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012102:	4b24      	ldr	r3, [pc, #144]	; (8012194 <vTaskSwitchContext+0xa8>)
 8012104:	2200      	movs	r2, #0
 8012106:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012108:	4b23      	ldr	r3, [pc, #140]	; (8012198 <vTaskSwitchContext+0xac>)
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	fab3 f383 	clz	r3, r3
 8012114:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012116:	7afb      	ldrb	r3, [r7, #11]
 8012118:	f1c3 031f 	rsb	r3, r3, #31
 801211c:	617b      	str	r3, [r7, #20]
 801211e:	491f      	ldr	r1, [pc, #124]	; (801219c <vTaskSwitchContext+0xb0>)
 8012120:	697a      	ldr	r2, [r7, #20]
 8012122:	4613      	mov	r3, r2
 8012124:	009b      	lsls	r3, r3, #2
 8012126:	4413      	add	r3, r2
 8012128:	009b      	lsls	r3, r3, #2
 801212a:	440b      	add	r3, r1
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d10b      	bne.n	801214a <vTaskSwitchContext+0x5e>
	__asm volatile
 8012132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012136:	b672      	cpsid	i
 8012138:	f383 8811 	msr	BASEPRI, r3
 801213c:	f3bf 8f6f 	isb	sy
 8012140:	f3bf 8f4f 	dsb	sy
 8012144:	b662      	cpsie	i
 8012146:	607b      	str	r3, [r7, #4]
 8012148:	e7fe      	b.n	8012148 <vTaskSwitchContext+0x5c>
 801214a:	697a      	ldr	r2, [r7, #20]
 801214c:	4613      	mov	r3, r2
 801214e:	009b      	lsls	r3, r3, #2
 8012150:	4413      	add	r3, r2
 8012152:	009b      	lsls	r3, r3, #2
 8012154:	4a11      	ldr	r2, [pc, #68]	; (801219c <vTaskSwitchContext+0xb0>)
 8012156:	4413      	add	r3, r2
 8012158:	613b      	str	r3, [r7, #16]
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	685b      	ldr	r3, [r3, #4]
 801215e:	685a      	ldr	r2, [r3, #4]
 8012160:	693b      	ldr	r3, [r7, #16]
 8012162:	605a      	str	r2, [r3, #4]
 8012164:	693b      	ldr	r3, [r7, #16]
 8012166:	685a      	ldr	r2, [r3, #4]
 8012168:	693b      	ldr	r3, [r7, #16]
 801216a:	3308      	adds	r3, #8
 801216c:	429a      	cmp	r2, r3
 801216e:	d104      	bne.n	801217a <vTaskSwitchContext+0x8e>
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	685a      	ldr	r2, [r3, #4]
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	605a      	str	r2, [r3, #4]
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	685b      	ldr	r3, [r3, #4]
 801217e:	68db      	ldr	r3, [r3, #12]
 8012180:	4a07      	ldr	r2, [pc, #28]	; (80121a0 <vTaskSwitchContext+0xb4>)
 8012182:	6013      	str	r3, [r2, #0]
}
 8012184:	bf00      	nop
 8012186:	371c      	adds	r7, #28
 8012188:	46bd      	mov	sp, r7
 801218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218e:	4770      	bx	lr
 8012190:	200003d8 	.word	0x200003d8
 8012194:	200003c4 	.word	0x200003c4
 8012198:	200003b8 	.word	0x200003b8
 801219c:	200002b4 	.word	0x200002b4
 80121a0:	200002b0 	.word	0x200002b0

080121a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]
 80121ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d10b      	bne.n	80121cc <vTaskPlaceOnEventList+0x28>
 80121b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b8:	b672      	cpsid	i
 80121ba:	f383 8811 	msr	BASEPRI, r3
 80121be:	f3bf 8f6f 	isb	sy
 80121c2:	f3bf 8f4f 	dsb	sy
 80121c6:	b662      	cpsie	i
 80121c8:	60fb      	str	r3, [r7, #12]
 80121ca:	e7fe      	b.n	80121ca <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80121cc:	4b07      	ldr	r3, [pc, #28]	; (80121ec <vTaskPlaceOnEventList+0x48>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	3318      	adds	r3, #24
 80121d2:	4619      	mov	r1, r3
 80121d4:	6878      	ldr	r0, [r7, #4]
 80121d6:	f7fe fc8d 	bl	8010af4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80121da:	2101      	movs	r1, #1
 80121dc:	6838      	ldr	r0, [r7, #0]
 80121de:	f000 fb9b 	bl	8012918 <prvAddCurrentTaskToDelayedList>
}
 80121e2:	bf00      	nop
 80121e4:	3710      	adds	r7, #16
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	200002b0 	.word	0x200002b0

080121f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80121f0:	b580      	push	{r7, lr}
 80121f2:	b086      	sub	sp, #24
 80121f4:	af00      	add	r7, sp, #0
 80121f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	68db      	ldr	r3, [r3, #12]
 80121fc:	68db      	ldr	r3, [r3, #12]
 80121fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d10b      	bne.n	801221e <xTaskRemoveFromEventList+0x2e>
 8012206:	f04f 0350 	mov.w	r3, #80	; 0x50
 801220a:	b672      	cpsid	i
 801220c:	f383 8811 	msr	BASEPRI, r3
 8012210:	f3bf 8f6f 	isb	sy
 8012214:	f3bf 8f4f 	dsb	sy
 8012218:	b662      	cpsie	i
 801221a:	60fb      	str	r3, [r7, #12]
 801221c:	e7fe      	b.n	801221c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801221e:	693b      	ldr	r3, [r7, #16]
 8012220:	3318      	adds	r3, #24
 8012222:	4618      	mov	r0, r3
 8012224:	f7fe fc9f 	bl	8010b66 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012228:	4b1d      	ldr	r3, [pc, #116]	; (80122a0 <xTaskRemoveFromEventList+0xb0>)
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d11c      	bne.n	801226a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	3304      	adds	r3, #4
 8012234:	4618      	mov	r0, r3
 8012236:	f7fe fc96 	bl	8010b66 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801223a:	693b      	ldr	r3, [r7, #16]
 801223c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801223e:	2201      	movs	r2, #1
 8012240:	409a      	lsls	r2, r3
 8012242:	4b18      	ldr	r3, [pc, #96]	; (80122a4 <xTaskRemoveFromEventList+0xb4>)
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	4313      	orrs	r3, r2
 8012248:	4a16      	ldr	r2, [pc, #88]	; (80122a4 <xTaskRemoveFromEventList+0xb4>)
 801224a:	6013      	str	r3, [r2, #0]
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012250:	4613      	mov	r3, r2
 8012252:	009b      	lsls	r3, r3, #2
 8012254:	4413      	add	r3, r2
 8012256:	009b      	lsls	r3, r3, #2
 8012258:	4a13      	ldr	r2, [pc, #76]	; (80122a8 <xTaskRemoveFromEventList+0xb8>)
 801225a:	441a      	add	r2, r3
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	3304      	adds	r3, #4
 8012260:	4619      	mov	r1, r3
 8012262:	4610      	mov	r0, r2
 8012264:	f7fe fc22 	bl	8010aac <vListInsertEnd>
 8012268:	e005      	b.n	8012276 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801226a:	693b      	ldr	r3, [r7, #16]
 801226c:	3318      	adds	r3, #24
 801226e:	4619      	mov	r1, r3
 8012270:	480e      	ldr	r0, [pc, #56]	; (80122ac <xTaskRemoveFromEventList+0xbc>)
 8012272:	f7fe fc1b 	bl	8010aac <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012276:	693b      	ldr	r3, [r7, #16]
 8012278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801227a:	4b0d      	ldr	r3, [pc, #52]	; (80122b0 <xTaskRemoveFromEventList+0xc0>)
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012280:	429a      	cmp	r2, r3
 8012282:	d905      	bls.n	8012290 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012284:	2301      	movs	r3, #1
 8012286:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012288:	4b0a      	ldr	r3, [pc, #40]	; (80122b4 <xTaskRemoveFromEventList+0xc4>)
 801228a:	2201      	movs	r2, #1
 801228c:	601a      	str	r2, [r3, #0]
 801228e:	e001      	b.n	8012294 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012290:	2300      	movs	r3, #0
 8012292:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012294:	697b      	ldr	r3, [r7, #20]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3718      	adds	r7, #24
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}
 801229e:	bf00      	nop
 80122a0:	200003d8 	.word	0x200003d8
 80122a4:	200003b8 	.word	0x200003b8
 80122a8:	200002b4 	.word	0x200002b4
 80122ac:	20000370 	.word	0x20000370
 80122b0:	200002b0 	.word	0x200002b0
 80122b4:	200003c4 	.word	0x200003c4

080122b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80122b8:	b480      	push	{r7}
 80122ba:	b083      	sub	sp, #12
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80122c0:	4b06      	ldr	r3, [pc, #24]	; (80122dc <vTaskInternalSetTimeOutState+0x24>)
 80122c2:	681a      	ldr	r2, [r3, #0]
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80122c8:	4b05      	ldr	r3, [pc, #20]	; (80122e0 <vTaskInternalSetTimeOutState+0x28>)
 80122ca:	681a      	ldr	r2, [r3, #0]
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	605a      	str	r2, [r3, #4]
}
 80122d0:	bf00      	nop
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr
 80122dc:	200003c8 	.word	0x200003c8
 80122e0:	200003b4 	.word	0x200003b4

080122e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b088      	sub	sp, #32
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d10b      	bne.n	801230c <xTaskCheckForTimeOut+0x28>
 80122f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122f8:	b672      	cpsid	i
 80122fa:	f383 8811 	msr	BASEPRI, r3
 80122fe:	f3bf 8f6f 	isb	sy
 8012302:	f3bf 8f4f 	dsb	sy
 8012306:	b662      	cpsie	i
 8012308:	613b      	str	r3, [r7, #16]
 801230a:	e7fe      	b.n	801230a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d10b      	bne.n	801232a <xTaskCheckForTimeOut+0x46>
 8012312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012316:	b672      	cpsid	i
 8012318:	f383 8811 	msr	BASEPRI, r3
 801231c:	f3bf 8f6f 	isb	sy
 8012320:	f3bf 8f4f 	dsb	sy
 8012324:	b662      	cpsie	i
 8012326:	60fb      	str	r3, [r7, #12]
 8012328:	e7fe      	b.n	8012328 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801232a:	f000 fc65 	bl	8012bf8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801232e:	4b1d      	ldr	r3, [pc, #116]	; (80123a4 <xTaskCheckForTimeOut+0xc0>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	685b      	ldr	r3, [r3, #4]
 8012338:	69ba      	ldr	r2, [r7, #24]
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801233e:	683b      	ldr	r3, [r7, #0]
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012346:	d102      	bne.n	801234e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012348:	2300      	movs	r3, #0
 801234a:	61fb      	str	r3, [r7, #28]
 801234c:	e023      	b.n	8012396 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681a      	ldr	r2, [r3, #0]
 8012352:	4b15      	ldr	r3, [pc, #84]	; (80123a8 <xTaskCheckForTimeOut+0xc4>)
 8012354:	681b      	ldr	r3, [r3, #0]
 8012356:	429a      	cmp	r2, r3
 8012358:	d007      	beq.n	801236a <xTaskCheckForTimeOut+0x86>
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	69ba      	ldr	r2, [r7, #24]
 8012360:	429a      	cmp	r2, r3
 8012362:	d302      	bcc.n	801236a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012364:	2301      	movs	r3, #1
 8012366:	61fb      	str	r3, [r7, #28]
 8012368:	e015      	b.n	8012396 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	697a      	ldr	r2, [r7, #20]
 8012370:	429a      	cmp	r2, r3
 8012372:	d20b      	bcs.n	801238c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	681a      	ldr	r2, [r3, #0]
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	1ad2      	subs	r2, r2, r3
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f7ff ff99 	bl	80122b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012386:	2300      	movs	r3, #0
 8012388:	61fb      	str	r3, [r7, #28]
 801238a:	e004      	b.n	8012396 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	2200      	movs	r2, #0
 8012390:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012392:	2301      	movs	r3, #1
 8012394:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012396:	f000 fc61 	bl	8012c5c <vPortExitCritical>

	return xReturn;
 801239a:	69fb      	ldr	r3, [r7, #28]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3720      	adds	r7, #32
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}
 80123a4:	200003b4 	.word	0x200003b4
 80123a8:	200003c8 	.word	0x200003c8

080123ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80123ac:	b480      	push	{r7}
 80123ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80123b0:	4b03      	ldr	r3, [pc, #12]	; (80123c0 <vTaskMissedYield+0x14>)
 80123b2:	2201      	movs	r2, #1
 80123b4:	601a      	str	r2, [r3, #0]
}
 80123b6:	bf00      	nop
 80123b8:	46bd      	mov	sp, r7
 80123ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123be:	4770      	bx	lr
 80123c0:	200003c4 	.word	0x200003c4

080123c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b082      	sub	sp, #8
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80123cc:	f000 f852 	bl	8012474 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80123d0:	4b06      	ldr	r3, [pc, #24]	; (80123ec <prvIdleTask+0x28>)
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b01      	cmp	r3, #1
 80123d6:	d9f9      	bls.n	80123cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80123d8:	4b05      	ldr	r3, [pc, #20]	; (80123f0 <prvIdleTask+0x2c>)
 80123da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123de:	601a      	str	r2, [r3, #0]
 80123e0:	f3bf 8f4f 	dsb	sy
 80123e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80123e8:	e7f0      	b.n	80123cc <prvIdleTask+0x8>
 80123ea:	bf00      	nop
 80123ec:	200002b4 	.word	0x200002b4
 80123f0:	e000ed04 	.word	0xe000ed04

080123f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80123fa:	2300      	movs	r3, #0
 80123fc:	607b      	str	r3, [r7, #4]
 80123fe:	e00c      	b.n	801241a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	4613      	mov	r3, r2
 8012404:	009b      	lsls	r3, r3, #2
 8012406:	4413      	add	r3, r2
 8012408:	009b      	lsls	r3, r3, #2
 801240a:	4a12      	ldr	r2, [pc, #72]	; (8012454 <prvInitialiseTaskLists+0x60>)
 801240c:	4413      	add	r3, r2
 801240e:	4618      	mov	r0, r3
 8012410:	f7fe fb1f 	bl	8010a52 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	3301      	adds	r3, #1
 8012418:	607b      	str	r3, [r7, #4]
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2b06      	cmp	r3, #6
 801241e:	d9ef      	bls.n	8012400 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012420:	480d      	ldr	r0, [pc, #52]	; (8012458 <prvInitialiseTaskLists+0x64>)
 8012422:	f7fe fb16 	bl	8010a52 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012426:	480d      	ldr	r0, [pc, #52]	; (801245c <prvInitialiseTaskLists+0x68>)
 8012428:	f7fe fb13 	bl	8010a52 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801242c:	480c      	ldr	r0, [pc, #48]	; (8012460 <prvInitialiseTaskLists+0x6c>)
 801242e:	f7fe fb10 	bl	8010a52 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012432:	480c      	ldr	r0, [pc, #48]	; (8012464 <prvInitialiseTaskLists+0x70>)
 8012434:	f7fe fb0d 	bl	8010a52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012438:	480b      	ldr	r0, [pc, #44]	; (8012468 <prvInitialiseTaskLists+0x74>)
 801243a:	f7fe fb0a 	bl	8010a52 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801243e:	4b0b      	ldr	r3, [pc, #44]	; (801246c <prvInitialiseTaskLists+0x78>)
 8012440:	4a05      	ldr	r2, [pc, #20]	; (8012458 <prvInitialiseTaskLists+0x64>)
 8012442:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012444:	4b0a      	ldr	r3, [pc, #40]	; (8012470 <prvInitialiseTaskLists+0x7c>)
 8012446:	4a05      	ldr	r2, [pc, #20]	; (801245c <prvInitialiseTaskLists+0x68>)
 8012448:	601a      	str	r2, [r3, #0]
}
 801244a:	bf00      	nop
 801244c:	3708      	adds	r7, #8
 801244e:	46bd      	mov	sp, r7
 8012450:	bd80      	pop	{r7, pc}
 8012452:	bf00      	nop
 8012454:	200002b4 	.word	0x200002b4
 8012458:	20000340 	.word	0x20000340
 801245c:	20000354 	.word	0x20000354
 8012460:	20000370 	.word	0x20000370
 8012464:	20000384 	.word	0x20000384
 8012468:	2000039c 	.word	0x2000039c
 801246c:	20000368 	.word	0x20000368
 8012470:	2000036c 	.word	0x2000036c

08012474 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b082      	sub	sp, #8
 8012478:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801247a:	e019      	b.n	80124b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801247c:	f000 fbbc 	bl	8012bf8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012480:	4b0f      	ldr	r3, [pc, #60]	; (80124c0 <prvCheckTasksWaitingTermination+0x4c>)
 8012482:	68db      	ldr	r3, [r3, #12]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	3304      	adds	r3, #4
 801248c:	4618      	mov	r0, r3
 801248e:	f7fe fb6a 	bl	8010b66 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012492:	4b0c      	ldr	r3, [pc, #48]	; (80124c4 <prvCheckTasksWaitingTermination+0x50>)
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3b01      	subs	r3, #1
 8012498:	4a0a      	ldr	r2, [pc, #40]	; (80124c4 <prvCheckTasksWaitingTermination+0x50>)
 801249a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801249c:	4b0a      	ldr	r3, [pc, #40]	; (80124c8 <prvCheckTasksWaitingTermination+0x54>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	3b01      	subs	r3, #1
 80124a2:	4a09      	ldr	r2, [pc, #36]	; (80124c8 <prvCheckTasksWaitingTermination+0x54>)
 80124a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80124a6:	f000 fbd9 	bl	8012c5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f000 f80e 	bl	80124cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80124b0:	4b05      	ldr	r3, [pc, #20]	; (80124c8 <prvCheckTasksWaitingTermination+0x54>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d1e1      	bne.n	801247c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80124b8:	bf00      	nop
 80124ba:	3708      	adds	r7, #8
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	20000384 	.word	0x20000384
 80124c4:	200003b0 	.word	0x200003b0
 80124c8:	20000398 	.word	0x20000398

080124cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d108      	bne.n	80124f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80124e2:	4618      	mov	r0, r3
 80124e4:	f000 fd72 	bl	8012fcc <vPortFree>
				vPortFree( pxTCB );
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f000 fd6f 	bl	8012fcc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80124ee:	e019      	b.n	8012524 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80124f6:	2b01      	cmp	r3, #1
 80124f8:	d103      	bne.n	8012502 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 fd66 	bl	8012fcc <vPortFree>
	}
 8012500:	e010      	b.n	8012524 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012508:	2b02      	cmp	r3, #2
 801250a:	d00b      	beq.n	8012524 <prvDeleteTCB+0x58>
 801250c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012510:	b672      	cpsid	i
 8012512:	f383 8811 	msr	BASEPRI, r3
 8012516:	f3bf 8f6f 	isb	sy
 801251a:	f3bf 8f4f 	dsb	sy
 801251e:	b662      	cpsie	i
 8012520:	60fb      	str	r3, [r7, #12]
 8012522:	e7fe      	b.n	8012522 <prvDeleteTCB+0x56>
	}
 8012524:	bf00      	nop
 8012526:	3710      	adds	r7, #16
 8012528:	46bd      	mov	sp, r7
 801252a:	bd80      	pop	{r7, pc}

0801252c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801252c:	b480      	push	{r7}
 801252e:	b083      	sub	sp, #12
 8012530:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012532:	4b0c      	ldr	r3, [pc, #48]	; (8012564 <prvResetNextTaskUnblockTime+0x38>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	2b00      	cmp	r3, #0
 801253a:	d104      	bne.n	8012546 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801253c:	4b0a      	ldr	r3, [pc, #40]	; (8012568 <prvResetNextTaskUnblockTime+0x3c>)
 801253e:	f04f 32ff 	mov.w	r2, #4294967295
 8012542:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012544:	e008      	b.n	8012558 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012546:	4b07      	ldr	r3, [pc, #28]	; (8012564 <prvResetNextTaskUnblockTime+0x38>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	68db      	ldr	r3, [r3, #12]
 801254c:	68db      	ldr	r3, [r3, #12]
 801254e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	4a04      	ldr	r2, [pc, #16]	; (8012568 <prvResetNextTaskUnblockTime+0x3c>)
 8012556:	6013      	str	r3, [r2, #0]
}
 8012558:	bf00      	nop
 801255a:	370c      	adds	r7, #12
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr
 8012564:	20000368 	.word	0x20000368
 8012568:	200003d0 	.word	0x200003d0

0801256c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801256c:	b480      	push	{r7}
 801256e:	b083      	sub	sp, #12
 8012570:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012572:	4b0b      	ldr	r3, [pc, #44]	; (80125a0 <xTaskGetSchedulerState+0x34>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2b00      	cmp	r3, #0
 8012578:	d102      	bne.n	8012580 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801257a:	2301      	movs	r3, #1
 801257c:	607b      	str	r3, [r7, #4]
 801257e:	e008      	b.n	8012592 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012580:	4b08      	ldr	r3, [pc, #32]	; (80125a4 <xTaskGetSchedulerState+0x38>)
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d102      	bne.n	801258e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012588:	2302      	movs	r3, #2
 801258a:	607b      	str	r3, [r7, #4]
 801258c:	e001      	b.n	8012592 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801258e:	2300      	movs	r3, #0
 8012590:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012592:	687b      	ldr	r3, [r7, #4]
	}
 8012594:	4618      	mov	r0, r3
 8012596:	370c      	adds	r7, #12
 8012598:	46bd      	mov	sp, r7
 801259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259e:	4770      	bx	lr
 80125a0:	200003bc 	.word	0x200003bc
 80125a4:	200003d8 	.word	0x200003d8

080125a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80125a8:	b580      	push	{r7, lr}
 80125aa:	b084      	sub	sp, #16
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80125b4:	2300      	movs	r3, #0
 80125b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d069      	beq.n	8012692 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125c2:	4b36      	ldr	r3, [pc, #216]	; (801269c <xTaskPriorityInherit+0xf4>)
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c8:	429a      	cmp	r2, r3
 80125ca:	d259      	bcs.n	8012680 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80125cc:	68bb      	ldr	r3, [r7, #8]
 80125ce:	699b      	ldr	r3, [r3, #24]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	db06      	blt.n	80125e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125d4:	4b31      	ldr	r3, [pc, #196]	; (801269c <xTaskPriorityInherit+0xf4>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125da:	f1c3 0207 	rsb	r2, r3, #7
 80125de:	68bb      	ldr	r3, [r7, #8]
 80125e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80125e2:	68bb      	ldr	r3, [r7, #8]
 80125e4:	6959      	ldr	r1, [r3, #20]
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80125ea:	4613      	mov	r3, r2
 80125ec:	009b      	lsls	r3, r3, #2
 80125ee:	4413      	add	r3, r2
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	4a2b      	ldr	r2, [pc, #172]	; (80126a0 <xTaskPriorityInherit+0xf8>)
 80125f4:	4413      	add	r3, r2
 80125f6:	4299      	cmp	r1, r3
 80125f8:	d13a      	bne.n	8012670 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	3304      	adds	r3, #4
 80125fe:	4618      	mov	r0, r3
 8012600:	f7fe fab1 	bl	8010b66 <uxListRemove>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d115      	bne.n	8012636 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801260a:	68bb      	ldr	r3, [r7, #8]
 801260c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801260e:	4924      	ldr	r1, [pc, #144]	; (80126a0 <xTaskPriorityInherit+0xf8>)
 8012610:	4613      	mov	r3, r2
 8012612:	009b      	lsls	r3, r3, #2
 8012614:	4413      	add	r3, r2
 8012616:	009b      	lsls	r3, r3, #2
 8012618:	440b      	add	r3, r1
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	2b00      	cmp	r3, #0
 801261e:	d10a      	bne.n	8012636 <xTaskPriorityInherit+0x8e>
 8012620:	68bb      	ldr	r3, [r7, #8]
 8012622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012624:	2201      	movs	r2, #1
 8012626:	fa02 f303 	lsl.w	r3, r2, r3
 801262a:	43da      	mvns	r2, r3
 801262c:	4b1d      	ldr	r3, [pc, #116]	; (80126a4 <xTaskPriorityInherit+0xfc>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	4013      	ands	r3, r2
 8012632:	4a1c      	ldr	r2, [pc, #112]	; (80126a4 <xTaskPriorityInherit+0xfc>)
 8012634:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012636:	4b19      	ldr	r3, [pc, #100]	; (801269c <xTaskPriorityInherit+0xf4>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801263c:	68bb      	ldr	r3, [r7, #8]
 801263e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012640:	68bb      	ldr	r3, [r7, #8]
 8012642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012644:	2201      	movs	r2, #1
 8012646:	409a      	lsls	r2, r3
 8012648:	4b16      	ldr	r3, [pc, #88]	; (80126a4 <xTaskPriorityInherit+0xfc>)
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	4313      	orrs	r3, r2
 801264e:	4a15      	ldr	r2, [pc, #84]	; (80126a4 <xTaskPriorityInherit+0xfc>)
 8012650:	6013      	str	r3, [r2, #0]
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012656:	4613      	mov	r3, r2
 8012658:	009b      	lsls	r3, r3, #2
 801265a:	4413      	add	r3, r2
 801265c:	009b      	lsls	r3, r3, #2
 801265e:	4a10      	ldr	r2, [pc, #64]	; (80126a0 <xTaskPriorityInherit+0xf8>)
 8012660:	441a      	add	r2, r3
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	3304      	adds	r3, #4
 8012666:	4619      	mov	r1, r3
 8012668:	4610      	mov	r0, r2
 801266a:	f7fe fa1f 	bl	8010aac <vListInsertEnd>
 801266e:	e004      	b.n	801267a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012670:	4b0a      	ldr	r3, [pc, #40]	; (801269c <xTaskPriorityInherit+0xf4>)
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801267a:	2301      	movs	r3, #1
 801267c:	60fb      	str	r3, [r7, #12]
 801267e:	e008      	b.n	8012692 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012684:	4b05      	ldr	r3, [pc, #20]	; (801269c <xTaskPriorityInherit+0xf4>)
 8012686:	681b      	ldr	r3, [r3, #0]
 8012688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801268a:	429a      	cmp	r2, r3
 801268c:	d201      	bcs.n	8012692 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801268e:	2301      	movs	r3, #1
 8012690:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012692:	68fb      	ldr	r3, [r7, #12]
	}
 8012694:	4618      	mov	r0, r3
 8012696:	3710      	adds	r7, #16
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	200002b0 	.word	0x200002b0
 80126a0:	200002b4 	.word	0x200002b4
 80126a4:	200003b8 	.word	0x200003b8

080126a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80126a8:	b580      	push	{r7, lr}
 80126aa:	b086      	sub	sp, #24
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80126b4:	2300      	movs	r3, #0
 80126b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d070      	beq.n	80127a0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80126be:	4b3b      	ldr	r3, [pc, #236]	; (80127ac <xTaskPriorityDisinherit+0x104>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	693a      	ldr	r2, [r7, #16]
 80126c4:	429a      	cmp	r2, r3
 80126c6:	d00b      	beq.n	80126e0 <xTaskPriorityDisinherit+0x38>
 80126c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126cc:	b672      	cpsid	i
 80126ce:	f383 8811 	msr	BASEPRI, r3
 80126d2:	f3bf 8f6f 	isb	sy
 80126d6:	f3bf 8f4f 	dsb	sy
 80126da:	b662      	cpsie	i
 80126dc:	60fb      	str	r3, [r7, #12]
 80126de:	e7fe      	b.n	80126de <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80126e0:	693b      	ldr	r3, [r7, #16]
 80126e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d10b      	bne.n	8012700 <xTaskPriorityDisinherit+0x58>
 80126e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ec:	b672      	cpsid	i
 80126ee:	f383 8811 	msr	BASEPRI, r3
 80126f2:	f3bf 8f6f 	isb	sy
 80126f6:	f3bf 8f4f 	dsb	sy
 80126fa:	b662      	cpsie	i
 80126fc:	60bb      	str	r3, [r7, #8]
 80126fe:	e7fe      	b.n	80126fe <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012704:	1e5a      	subs	r2, r3, #1
 8012706:	693b      	ldr	r3, [r7, #16]
 8012708:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801270a:	693b      	ldr	r3, [r7, #16]
 801270c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012712:	429a      	cmp	r2, r3
 8012714:	d044      	beq.n	80127a0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012716:	693b      	ldr	r3, [r7, #16]
 8012718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801271a:	2b00      	cmp	r3, #0
 801271c:	d140      	bne.n	80127a0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801271e:	693b      	ldr	r3, [r7, #16]
 8012720:	3304      	adds	r3, #4
 8012722:	4618      	mov	r0, r3
 8012724:	f7fe fa1f 	bl	8010b66 <uxListRemove>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	d115      	bne.n	801275a <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801272e:	693b      	ldr	r3, [r7, #16]
 8012730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012732:	491f      	ldr	r1, [pc, #124]	; (80127b0 <xTaskPriorityDisinherit+0x108>)
 8012734:	4613      	mov	r3, r2
 8012736:	009b      	lsls	r3, r3, #2
 8012738:	4413      	add	r3, r2
 801273a:	009b      	lsls	r3, r3, #2
 801273c:	440b      	add	r3, r1
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d10a      	bne.n	801275a <xTaskPriorityDisinherit+0xb2>
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012748:	2201      	movs	r2, #1
 801274a:	fa02 f303 	lsl.w	r3, r2, r3
 801274e:	43da      	mvns	r2, r3
 8012750:	4b18      	ldr	r3, [pc, #96]	; (80127b4 <xTaskPriorityDisinherit+0x10c>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	4013      	ands	r3, r2
 8012756:	4a17      	ldr	r2, [pc, #92]	; (80127b4 <xTaskPriorityDisinherit+0x10c>)
 8012758:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012766:	f1c3 0207 	rsb	r2, r3, #7
 801276a:	693b      	ldr	r3, [r7, #16]
 801276c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012772:	2201      	movs	r2, #1
 8012774:	409a      	lsls	r2, r3
 8012776:	4b0f      	ldr	r3, [pc, #60]	; (80127b4 <xTaskPriorityDisinherit+0x10c>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4313      	orrs	r3, r2
 801277c:	4a0d      	ldr	r2, [pc, #52]	; (80127b4 <xTaskPriorityDisinherit+0x10c>)
 801277e:	6013      	str	r3, [r2, #0]
 8012780:	693b      	ldr	r3, [r7, #16]
 8012782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012784:	4613      	mov	r3, r2
 8012786:	009b      	lsls	r3, r3, #2
 8012788:	4413      	add	r3, r2
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	4a08      	ldr	r2, [pc, #32]	; (80127b0 <xTaskPriorityDisinherit+0x108>)
 801278e:	441a      	add	r2, r3
 8012790:	693b      	ldr	r3, [r7, #16]
 8012792:	3304      	adds	r3, #4
 8012794:	4619      	mov	r1, r3
 8012796:	4610      	mov	r0, r2
 8012798:	f7fe f988 	bl	8010aac <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801279c:	2301      	movs	r3, #1
 801279e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80127a0:	697b      	ldr	r3, [r7, #20]
	}
 80127a2:	4618      	mov	r0, r3
 80127a4:	3718      	adds	r7, #24
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	200002b0 	.word	0x200002b0
 80127b0:	200002b4 	.word	0x200002b4
 80127b4:	200003b8 	.word	0x200003b8

080127b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80127b8:	b580      	push	{r7, lr}
 80127ba:	b088      	sub	sp, #32
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
 80127c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80127c6:	2301      	movs	r3, #1
 80127c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	f000 8085 	beq.w	80128dc <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d10b      	bne.n	80127f2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80127da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127de:	b672      	cpsid	i
 80127e0:	f383 8811 	msr	BASEPRI, r3
 80127e4:	f3bf 8f6f 	isb	sy
 80127e8:	f3bf 8f4f 	dsb	sy
 80127ec:	b662      	cpsie	i
 80127ee:	60fb      	str	r3, [r7, #12]
 80127f0:	e7fe      	b.n	80127f0 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80127f2:	69bb      	ldr	r3, [r7, #24]
 80127f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80127f6:	683a      	ldr	r2, [r7, #0]
 80127f8:	429a      	cmp	r2, r3
 80127fa:	d902      	bls.n	8012802 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80127fc:	683b      	ldr	r3, [r7, #0]
 80127fe:	61fb      	str	r3, [r7, #28]
 8012800:	e002      	b.n	8012808 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012802:	69bb      	ldr	r3, [r7, #24]
 8012804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012806:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280c:	69fa      	ldr	r2, [r7, #28]
 801280e:	429a      	cmp	r2, r3
 8012810:	d064      	beq.n	80128dc <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012812:	69bb      	ldr	r3, [r7, #24]
 8012814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012816:	697a      	ldr	r2, [r7, #20]
 8012818:	429a      	cmp	r2, r3
 801281a:	d15f      	bne.n	80128dc <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801281c:	4b31      	ldr	r3, [pc, #196]	; (80128e4 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	69ba      	ldr	r2, [r7, #24]
 8012822:	429a      	cmp	r2, r3
 8012824:	d10b      	bne.n	801283e <vTaskPriorityDisinheritAfterTimeout+0x86>
 8012826:	f04f 0350 	mov.w	r3, #80	; 0x50
 801282a:	b672      	cpsid	i
 801282c:	f383 8811 	msr	BASEPRI, r3
 8012830:	f3bf 8f6f 	isb	sy
 8012834:	f3bf 8f4f 	dsb	sy
 8012838:	b662      	cpsie	i
 801283a:	60bb      	str	r3, [r7, #8]
 801283c:	e7fe      	b.n	801283c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012842:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012844:	69bb      	ldr	r3, [r7, #24]
 8012846:	69fa      	ldr	r2, [r7, #28]
 8012848:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	2b00      	cmp	r3, #0
 8012850:	db04      	blt.n	801285c <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012852:	69fb      	ldr	r3, [r7, #28]
 8012854:	f1c3 0207 	rsb	r2, r3, #7
 8012858:	69bb      	ldr	r3, [r7, #24]
 801285a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801285c:	69bb      	ldr	r3, [r7, #24]
 801285e:	6959      	ldr	r1, [r3, #20]
 8012860:	693a      	ldr	r2, [r7, #16]
 8012862:	4613      	mov	r3, r2
 8012864:	009b      	lsls	r3, r3, #2
 8012866:	4413      	add	r3, r2
 8012868:	009b      	lsls	r3, r3, #2
 801286a:	4a1f      	ldr	r2, [pc, #124]	; (80128e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 801286c:	4413      	add	r3, r2
 801286e:	4299      	cmp	r1, r3
 8012870:	d134      	bne.n	80128dc <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012872:	69bb      	ldr	r3, [r7, #24]
 8012874:	3304      	adds	r3, #4
 8012876:	4618      	mov	r0, r3
 8012878:	f7fe f975 	bl	8010b66 <uxListRemove>
 801287c:	4603      	mov	r3, r0
 801287e:	2b00      	cmp	r3, #0
 8012880:	d115      	bne.n	80128ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012882:	69bb      	ldr	r3, [r7, #24]
 8012884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012886:	4918      	ldr	r1, [pc, #96]	; (80128e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012888:	4613      	mov	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	440b      	add	r3, r1
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d10a      	bne.n	80128ae <vTaskPriorityDisinheritAfterTimeout+0xf6>
 8012898:	69bb      	ldr	r3, [r7, #24]
 801289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801289c:	2201      	movs	r2, #1
 801289e:	fa02 f303 	lsl.w	r3, r2, r3
 80128a2:	43da      	mvns	r2, r3
 80128a4:	4b11      	ldr	r3, [pc, #68]	; (80128ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	4013      	ands	r3, r2
 80128aa:	4a10      	ldr	r2, [pc, #64]	; (80128ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80128ac:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80128ae:	69bb      	ldr	r3, [r7, #24]
 80128b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128b2:	2201      	movs	r2, #1
 80128b4:	409a      	lsls	r2, r3
 80128b6:	4b0d      	ldr	r3, [pc, #52]	; (80128ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80128b8:	681b      	ldr	r3, [r3, #0]
 80128ba:	4313      	orrs	r3, r2
 80128bc:	4a0b      	ldr	r2, [pc, #44]	; (80128ec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80128be:	6013      	str	r3, [r2, #0]
 80128c0:	69bb      	ldr	r3, [r7, #24]
 80128c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c4:	4613      	mov	r3, r2
 80128c6:	009b      	lsls	r3, r3, #2
 80128c8:	4413      	add	r3, r2
 80128ca:	009b      	lsls	r3, r3, #2
 80128cc:	4a06      	ldr	r2, [pc, #24]	; (80128e8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80128ce:	441a      	add	r2, r3
 80128d0:	69bb      	ldr	r3, [r7, #24]
 80128d2:	3304      	adds	r3, #4
 80128d4:	4619      	mov	r1, r3
 80128d6:	4610      	mov	r0, r2
 80128d8:	f7fe f8e8 	bl	8010aac <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80128dc:	bf00      	nop
 80128de:	3720      	adds	r7, #32
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	200002b0 	.word	0x200002b0
 80128e8:	200002b4 	.word	0x200002b4
 80128ec:	200003b8 	.word	0x200003b8

080128f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80128f0:	b480      	push	{r7}
 80128f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80128f4:	4b07      	ldr	r3, [pc, #28]	; (8012914 <pvTaskIncrementMutexHeldCount+0x24>)
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d004      	beq.n	8012906 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80128fc:	4b05      	ldr	r3, [pc, #20]	; (8012914 <pvTaskIncrementMutexHeldCount+0x24>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012902:	3201      	adds	r2, #1
 8012904:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012906:	4b03      	ldr	r3, [pc, #12]	; (8012914 <pvTaskIncrementMutexHeldCount+0x24>)
 8012908:	681b      	ldr	r3, [r3, #0]
	}
 801290a:	4618      	mov	r0, r3
 801290c:	46bd      	mov	sp, r7
 801290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012912:	4770      	bx	lr
 8012914:	200002b0 	.word	0x200002b0

08012918 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012918:	b580      	push	{r7, lr}
 801291a:	b084      	sub	sp, #16
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
 8012920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012922:	4b29      	ldr	r3, [pc, #164]	; (80129c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012928:	4b28      	ldr	r3, [pc, #160]	; (80129cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	3304      	adds	r3, #4
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe f919 	bl	8010b66 <uxListRemove>
 8012934:	4603      	mov	r3, r0
 8012936:	2b00      	cmp	r3, #0
 8012938:	d10b      	bne.n	8012952 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801293a:	4b24      	ldr	r3, [pc, #144]	; (80129cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801293c:	681b      	ldr	r3, [r3, #0]
 801293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012940:	2201      	movs	r2, #1
 8012942:	fa02 f303 	lsl.w	r3, r2, r3
 8012946:	43da      	mvns	r2, r3
 8012948:	4b21      	ldr	r3, [pc, #132]	; (80129d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	4013      	ands	r3, r2
 801294e:	4a20      	ldr	r2, [pc, #128]	; (80129d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012950:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012958:	d10a      	bne.n	8012970 <prvAddCurrentTaskToDelayedList+0x58>
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d007      	beq.n	8012970 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012960:	4b1a      	ldr	r3, [pc, #104]	; (80129cc <prvAddCurrentTaskToDelayedList+0xb4>)
 8012962:	681b      	ldr	r3, [r3, #0]
 8012964:	3304      	adds	r3, #4
 8012966:	4619      	mov	r1, r3
 8012968:	481a      	ldr	r0, [pc, #104]	; (80129d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801296a:	f7fe f89f 	bl	8010aac <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801296e:	e026      	b.n	80129be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012970:	68fa      	ldr	r2, [r7, #12]
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	4413      	add	r3, r2
 8012976:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012978:	4b14      	ldr	r3, [pc, #80]	; (80129cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	68ba      	ldr	r2, [r7, #8]
 801297e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012980:	68ba      	ldr	r2, [r7, #8]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	429a      	cmp	r2, r3
 8012986:	d209      	bcs.n	801299c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012988:	4b13      	ldr	r3, [pc, #76]	; (80129d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	4b0f      	ldr	r3, [pc, #60]	; (80129cc <prvAddCurrentTaskToDelayedList+0xb4>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	3304      	adds	r3, #4
 8012992:	4619      	mov	r1, r3
 8012994:	4610      	mov	r0, r2
 8012996:	f7fe f8ad 	bl	8010af4 <vListInsert>
}
 801299a:	e010      	b.n	80129be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801299c:	4b0f      	ldr	r3, [pc, #60]	; (80129dc <prvAddCurrentTaskToDelayedList+0xc4>)
 801299e:	681a      	ldr	r2, [r3, #0]
 80129a0:	4b0a      	ldr	r3, [pc, #40]	; (80129cc <prvAddCurrentTaskToDelayedList+0xb4>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	3304      	adds	r3, #4
 80129a6:	4619      	mov	r1, r3
 80129a8:	4610      	mov	r0, r2
 80129aa:	f7fe f8a3 	bl	8010af4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80129ae:	4b0c      	ldr	r3, [pc, #48]	; (80129e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	68ba      	ldr	r2, [r7, #8]
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d202      	bcs.n	80129be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80129b8:	4a09      	ldr	r2, [pc, #36]	; (80129e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	6013      	str	r3, [r2, #0]
}
 80129be:	bf00      	nop
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	200003b4 	.word	0x200003b4
 80129cc:	200002b0 	.word	0x200002b0
 80129d0:	200003b8 	.word	0x200003b8
 80129d4:	2000039c 	.word	0x2000039c
 80129d8:	2000036c 	.word	0x2000036c
 80129dc:	20000368 	.word	0x20000368
 80129e0:	200003d0 	.word	0x200003d0

080129e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80129e4:	b480      	push	{r7}
 80129e6:	b085      	sub	sp, #20
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	60b9      	str	r1, [r7, #8]
 80129ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	3b04      	subs	r3, #4
 80129f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80129fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	3b04      	subs	r3, #4
 8012a02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	f023 0201 	bic.w	r2, r3, #1
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	3b04      	subs	r3, #4
 8012a12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012a14:	4a0c      	ldr	r2, [pc, #48]	; (8012a48 <pxPortInitialiseStack+0x64>)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	3b14      	subs	r3, #20
 8012a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	68fb      	ldr	r3, [r7, #12]
 8012a24:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	3b04      	subs	r3, #4
 8012a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	f06f 0202 	mvn.w	r2, #2
 8012a32:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	3b20      	subs	r3, #32
 8012a38:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a3a:	68fb      	ldr	r3, [r7, #12]
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3714      	adds	r7, #20
 8012a40:	46bd      	mov	sp, r7
 8012a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a46:	4770      	bx	lr
 8012a48:	08012a4d 	.word	0x08012a4d

08012a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a52:	2300      	movs	r3, #0
 8012a54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a56:	4b13      	ldr	r3, [pc, #76]	; (8012aa4 <prvTaskExitError+0x58>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a5e:	d00b      	beq.n	8012a78 <prvTaskExitError+0x2c>
 8012a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a64:	b672      	cpsid	i
 8012a66:	f383 8811 	msr	BASEPRI, r3
 8012a6a:	f3bf 8f6f 	isb	sy
 8012a6e:	f3bf 8f4f 	dsb	sy
 8012a72:	b662      	cpsie	i
 8012a74:	60fb      	str	r3, [r7, #12]
 8012a76:	e7fe      	b.n	8012a76 <prvTaskExitError+0x2a>
 8012a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7c:	b672      	cpsid	i
 8012a7e:	f383 8811 	msr	BASEPRI, r3
 8012a82:	f3bf 8f6f 	isb	sy
 8012a86:	f3bf 8f4f 	dsb	sy
 8012a8a:	b662      	cpsie	i
 8012a8c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012a8e:	bf00      	nop
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d0fc      	beq.n	8012a90 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012a96:	bf00      	nop
 8012a98:	3714      	adds	r7, #20
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa0:	4770      	bx	lr
 8012aa2:	bf00      	nop
 8012aa4:	20000018 	.word	0x20000018
	...

08012ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012ab0:	4b07      	ldr	r3, [pc, #28]	; (8012ad0 <pxCurrentTCBConst2>)
 8012ab2:	6819      	ldr	r1, [r3, #0]
 8012ab4:	6808      	ldr	r0, [r1, #0]
 8012ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aba:	f380 8809 	msr	PSP, r0
 8012abe:	f3bf 8f6f 	isb	sy
 8012ac2:	f04f 0000 	mov.w	r0, #0
 8012ac6:	f380 8811 	msr	BASEPRI, r0
 8012aca:	4770      	bx	lr
 8012acc:	f3af 8000 	nop.w

08012ad0 <pxCurrentTCBConst2>:
 8012ad0:	200002b0 	.word	0x200002b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012ad4:	bf00      	nop
 8012ad6:	bf00      	nop

08012ad8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012ad8:	4808      	ldr	r0, [pc, #32]	; (8012afc <prvPortStartFirstTask+0x24>)
 8012ada:	6800      	ldr	r0, [r0, #0]
 8012adc:	6800      	ldr	r0, [r0, #0]
 8012ade:	f380 8808 	msr	MSP, r0
 8012ae2:	f04f 0000 	mov.w	r0, #0
 8012ae6:	f380 8814 	msr	CONTROL, r0
 8012aea:	b662      	cpsie	i
 8012aec:	b661      	cpsie	f
 8012aee:	f3bf 8f4f 	dsb	sy
 8012af2:	f3bf 8f6f 	isb	sy
 8012af6:	df00      	svc	0
 8012af8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012afa:	bf00      	nop
 8012afc:	e000ed08 	.word	0xe000ed08

08012b00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b084      	sub	sp, #16
 8012b04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b06:	4b36      	ldr	r3, [pc, #216]	; (8012be0 <xPortStartScheduler+0xe0>)
 8012b08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	781b      	ldrb	r3, [r3, #0]
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	22ff      	movs	r2, #255	; 0xff
 8012b16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	781b      	ldrb	r3, [r3, #0]
 8012b1c:	b2db      	uxtb	r3, r3
 8012b1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b20:	78fb      	ldrb	r3, [r7, #3]
 8012b22:	b2db      	uxtb	r3, r3
 8012b24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b28:	b2da      	uxtb	r2, r3
 8012b2a:	4b2e      	ldr	r3, [pc, #184]	; (8012be4 <xPortStartScheduler+0xe4>)
 8012b2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b2e:	4b2e      	ldr	r3, [pc, #184]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b30:	2207      	movs	r2, #7
 8012b32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b34:	e009      	b.n	8012b4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012b36:	4b2c      	ldr	r3, [pc, #176]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	3b01      	subs	r3, #1
 8012b3c:	4a2a      	ldr	r2, [pc, #168]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b40:	78fb      	ldrb	r3, [r7, #3]
 8012b42:	b2db      	uxtb	r3, r3
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b4a:	78fb      	ldrb	r3, [r7, #3]
 8012b4c:	b2db      	uxtb	r3, r3
 8012b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b52:	2b80      	cmp	r3, #128	; 0x80
 8012b54:	d0ef      	beq.n	8012b36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012b56:	4b24      	ldr	r3, [pc, #144]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	f1c3 0307 	rsb	r3, r3, #7
 8012b5e:	2b04      	cmp	r3, #4
 8012b60:	d00b      	beq.n	8012b7a <xPortStartScheduler+0x7a>
 8012b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b66:	b672      	cpsid	i
 8012b68:	f383 8811 	msr	BASEPRI, r3
 8012b6c:	f3bf 8f6f 	isb	sy
 8012b70:	f3bf 8f4f 	dsb	sy
 8012b74:	b662      	cpsie	i
 8012b76:	60bb      	str	r3, [r7, #8]
 8012b78:	e7fe      	b.n	8012b78 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012b7a:	4b1b      	ldr	r3, [pc, #108]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	021b      	lsls	r3, r3, #8
 8012b80:	4a19      	ldr	r2, [pc, #100]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b82:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b84:	4b18      	ldr	r3, [pc, #96]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b8c:	4a16      	ldr	r2, [pc, #88]	; (8012be8 <xPortStartScheduler+0xe8>)
 8012b8e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	b2da      	uxtb	r2, r3
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012b98:	4b14      	ldr	r3, [pc, #80]	; (8012bec <xPortStartScheduler+0xec>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	4a13      	ldr	r2, [pc, #76]	; (8012bec <xPortStartScheduler+0xec>)
 8012b9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012ba2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012ba4:	4b11      	ldr	r3, [pc, #68]	; (8012bec <xPortStartScheduler+0xec>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a10      	ldr	r2, [pc, #64]	; (8012bec <xPortStartScheduler+0xec>)
 8012baa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012bae:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012bb0:	f000 f8d4 	bl	8012d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012bb4:	4b0e      	ldr	r3, [pc, #56]	; (8012bf0 <xPortStartScheduler+0xf0>)
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012bba:	f000 f8f3 	bl	8012da4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012bbe:	4b0d      	ldr	r3, [pc, #52]	; (8012bf4 <xPortStartScheduler+0xf4>)
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	4a0c      	ldr	r2, [pc, #48]	; (8012bf4 <xPortStartScheduler+0xf4>)
 8012bc4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012bc8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012bca:	f7ff ff85 	bl	8012ad8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012bce:	f7ff fa8d 	bl	80120ec <vTaskSwitchContext>
	prvTaskExitError();
 8012bd2:	f7ff ff3b 	bl	8012a4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012bd6:	2300      	movs	r3, #0
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	3710      	adds	r7, #16
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	e000e400 	.word	0xe000e400
 8012be4:	200003dc 	.word	0x200003dc
 8012be8:	200003e0 	.word	0x200003e0
 8012bec:	e000ed20 	.word	0xe000ed20
 8012bf0:	20000018 	.word	0x20000018
 8012bf4:	e000ef34 	.word	0xe000ef34

08012bf8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012bf8:	b480      	push	{r7}
 8012bfa:	b083      	sub	sp, #12
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c02:	b672      	cpsid	i
 8012c04:	f383 8811 	msr	BASEPRI, r3
 8012c08:	f3bf 8f6f 	isb	sy
 8012c0c:	f3bf 8f4f 	dsb	sy
 8012c10:	b662      	cpsie	i
 8012c12:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c14:	4b0f      	ldr	r3, [pc, #60]	; (8012c54 <vPortEnterCritical+0x5c>)
 8012c16:	681b      	ldr	r3, [r3, #0]
 8012c18:	3301      	adds	r3, #1
 8012c1a:	4a0e      	ldr	r2, [pc, #56]	; (8012c54 <vPortEnterCritical+0x5c>)
 8012c1c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012c1e:	4b0d      	ldr	r3, [pc, #52]	; (8012c54 <vPortEnterCritical+0x5c>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	2b01      	cmp	r3, #1
 8012c24:	d110      	bne.n	8012c48 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c26:	4b0c      	ldr	r3, [pc, #48]	; (8012c58 <vPortEnterCritical+0x60>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	b2db      	uxtb	r3, r3
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d00b      	beq.n	8012c48 <vPortEnterCritical+0x50>
 8012c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c34:	b672      	cpsid	i
 8012c36:	f383 8811 	msr	BASEPRI, r3
 8012c3a:	f3bf 8f6f 	isb	sy
 8012c3e:	f3bf 8f4f 	dsb	sy
 8012c42:	b662      	cpsie	i
 8012c44:	603b      	str	r3, [r7, #0]
 8012c46:	e7fe      	b.n	8012c46 <vPortEnterCritical+0x4e>
	}
}
 8012c48:	bf00      	nop
 8012c4a:	370c      	adds	r7, #12
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c52:	4770      	bx	lr
 8012c54:	20000018 	.word	0x20000018
 8012c58:	e000ed04 	.word	0xe000ed04

08012c5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b083      	sub	sp, #12
 8012c60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012c62:	4b12      	ldr	r3, [pc, #72]	; (8012cac <vPortExitCritical+0x50>)
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d10b      	bne.n	8012c82 <vPortExitCritical+0x26>
 8012c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c6e:	b672      	cpsid	i
 8012c70:	f383 8811 	msr	BASEPRI, r3
 8012c74:	f3bf 8f6f 	isb	sy
 8012c78:	f3bf 8f4f 	dsb	sy
 8012c7c:	b662      	cpsie	i
 8012c7e:	607b      	str	r3, [r7, #4]
 8012c80:	e7fe      	b.n	8012c80 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8012c82:	4b0a      	ldr	r3, [pc, #40]	; (8012cac <vPortExitCritical+0x50>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	3b01      	subs	r3, #1
 8012c88:	4a08      	ldr	r2, [pc, #32]	; (8012cac <vPortExitCritical+0x50>)
 8012c8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012c8c:	4b07      	ldr	r3, [pc, #28]	; (8012cac <vPortExitCritical+0x50>)
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d104      	bne.n	8012c9e <vPortExitCritical+0x42>
 8012c94:	2300      	movs	r3, #0
 8012c96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012c98:	683b      	ldr	r3, [r7, #0]
 8012c9a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8012c9e:	bf00      	nop
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr
 8012caa:	bf00      	nop
 8012cac:	20000018 	.word	0x20000018

08012cb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012cb0:	f3ef 8009 	mrs	r0, PSP
 8012cb4:	f3bf 8f6f 	isb	sy
 8012cb8:	4b15      	ldr	r3, [pc, #84]	; (8012d10 <pxCurrentTCBConst>)
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	f01e 0f10 	tst.w	lr, #16
 8012cc0:	bf08      	it	eq
 8012cc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012cc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cca:	6010      	str	r0, [r2, #0]
 8012ccc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012cd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012cd4:	b672      	cpsid	i
 8012cd6:	f380 8811 	msr	BASEPRI, r0
 8012cda:	f3bf 8f4f 	dsb	sy
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	b662      	cpsie	i
 8012ce4:	f7ff fa02 	bl	80120ec <vTaskSwitchContext>
 8012ce8:	f04f 0000 	mov.w	r0, #0
 8012cec:	f380 8811 	msr	BASEPRI, r0
 8012cf0:	bc09      	pop	{r0, r3}
 8012cf2:	6819      	ldr	r1, [r3, #0]
 8012cf4:	6808      	ldr	r0, [r1, #0]
 8012cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cfa:	f01e 0f10 	tst.w	lr, #16
 8012cfe:	bf08      	it	eq
 8012d00:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d04:	f380 8809 	msr	PSP, r0
 8012d08:	f3bf 8f6f 	isb	sy
 8012d0c:	4770      	bx	lr
 8012d0e:	bf00      	nop

08012d10 <pxCurrentTCBConst>:
 8012d10:	200002b0 	.word	0x200002b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012d14:	bf00      	nop
 8012d16:	bf00      	nop

08012d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012d18:	b580      	push	{r7, lr}
 8012d1a:	b082      	sub	sp, #8
 8012d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d22:	b672      	cpsid	i
 8012d24:	f383 8811 	msr	BASEPRI, r3
 8012d28:	f3bf 8f6f 	isb	sy
 8012d2c:	f3bf 8f4f 	dsb	sy
 8012d30:	b662      	cpsie	i
 8012d32:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012d34:	f7ff f920 	bl	8011f78 <xTaskIncrementTick>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d003      	beq.n	8012d46 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012d3e:	4b06      	ldr	r3, [pc, #24]	; (8012d58 <xPortSysTickHandler+0x40>)
 8012d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d44:	601a      	str	r2, [r3, #0]
 8012d46:	2300      	movs	r3, #0
 8012d48:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8012d50:	bf00      	nop
 8012d52:	3708      	adds	r7, #8
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	e000ed04 	.word	0xe000ed04

08012d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012d60:	4b0b      	ldr	r3, [pc, #44]	; (8012d90 <vPortSetupTimerInterrupt+0x34>)
 8012d62:	2200      	movs	r2, #0
 8012d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012d66:	4b0b      	ldr	r3, [pc, #44]	; (8012d94 <vPortSetupTimerInterrupt+0x38>)
 8012d68:	2200      	movs	r2, #0
 8012d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012d6c:	4b0a      	ldr	r3, [pc, #40]	; (8012d98 <vPortSetupTimerInterrupt+0x3c>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4a0a      	ldr	r2, [pc, #40]	; (8012d9c <vPortSetupTimerInterrupt+0x40>)
 8012d72:	fba2 2303 	umull	r2, r3, r2, r3
 8012d76:	099b      	lsrs	r3, r3, #6
 8012d78:	4a09      	ldr	r2, [pc, #36]	; (8012da0 <vPortSetupTimerInterrupt+0x44>)
 8012d7a:	3b01      	subs	r3, #1
 8012d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012d7e:	4b04      	ldr	r3, [pc, #16]	; (8012d90 <vPortSetupTimerInterrupt+0x34>)
 8012d80:	2207      	movs	r2, #7
 8012d82:	601a      	str	r2, [r3, #0]
}
 8012d84:	bf00      	nop
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr
 8012d8e:	bf00      	nop
 8012d90:	e000e010 	.word	0xe000e010
 8012d94:	e000e018 	.word	0xe000e018
 8012d98:	2000000c 	.word	0x2000000c
 8012d9c:	10624dd3 	.word	0x10624dd3
 8012da0:	e000e014 	.word	0xe000e014

08012da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012db4 <vPortEnableVFP+0x10>
 8012da8:	6801      	ldr	r1, [r0, #0]
 8012daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012dae:	6001      	str	r1, [r0, #0]
 8012db0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012db2:	bf00      	nop
 8012db4:	e000ed88 	.word	0xe000ed88

08012db8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012db8:	b480      	push	{r7}
 8012dba:	b085      	sub	sp, #20
 8012dbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012dbe:	f3ef 8305 	mrs	r3, IPSR
 8012dc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	2b0f      	cmp	r3, #15
 8012dc8:	d915      	bls.n	8012df6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012dca:	4a18      	ldr	r2, [pc, #96]	; (8012e2c <vPortValidateInterruptPriority+0x74>)
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	4413      	add	r3, r2
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012dd4:	4b16      	ldr	r3, [pc, #88]	; (8012e30 <vPortValidateInterruptPriority+0x78>)
 8012dd6:	781b      	ldrb	r3, [r3, #0]
 8012dd8:	7afa      	ldrb	r2, [r7, #11]
 8012dda:	429a      	cmp	r2, r3
 8012ddc:	d20b      	bcs.n	8012df6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8012dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de2:	b672      	cpsid	i
 8012de4:	f383 8811 	msr	BASEPRI, r3
 8012de8:	f3bf 8f6f 	isb	sy
 8012dec:	f3bf 8f4f 	dsb	sy
 8012df0:	b662      	cpsie	i
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	e7fe      	b.n	8012df4 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012df6:	4b0f      	ldr	r3, [pc, #60]	; (8012e34 <vPortValidateInterruptPriority+0x7c>)
 8012df8:	681b      	ldr	r3, [r3, #0]
 8012dfa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012dfe:	4b0e      	ldr	r3, [pc, #56]	; (8012e38 <vPortValidateInterruptPriority+0x80>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d90b      	bls.n	8012e1e <vPortValidateInterruptPriority+0x66>
 8012e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e0a:	b672      	cpsid	i
 8012e0c:	f383 8811 	msr	BASEPRI, r3
 8012e10:	f3bf 8f6f 	isb	sy
 8012e14:	f3bf 8f4f 	dsb	sy
 8012e18:	b662      	cpsie	i
 8012e1a:	603b      	str	r3, [r7, #0]
 8012e1c:	e7fe      	b.n	8012e1c <vPortValidateInterruptPriority+0x64>
	}
 8012e1e:	bf00      	nop
 8012e20:	3714      	adds	r7, #20
 8012e22:	46bd      	mov	sp, r7
 8012e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e28:	4770      	bx	lr
 8012e2a:	bf00      	nop
 8012e2c:	e000e3f0 	.word	0xe000e3f0
 8012e30:	200003dc 	.word	0x200003dc
 8012e34:	e000ed0c 	.word	0xe000ed0c
 8012e38:	200003e0 	.word	0x200003e0

08012e3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b08a      	sub	sp, #40	; 0x28
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012e44:	2300      	movs	r3, #0
 8012e46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012e48:	f7fe ffea 	bl	8011e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012e4c:	4b5a      	ldr	r3, [pc, #360]	; (8012fb8 <pvPortMalloc+0x17c>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d101      	bne.n	8012e58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012e54:	f000 f916 	bl	8013084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012e58:	4b58      	ldr	r3, [pc, #352]	; (8012fbc <pvPortMalloc+0x180>)
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	4013      	ands	r3, r2
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	f040 8090 	bne.w	8012f86 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d01e      	beq.n	8012eaa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012e6c:	2208      	movs	r2, #8
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	4413      	add	r3, r2
 8012e72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f003 0307 	and.w	r3, r3, #7
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d015      	beq.n	8012eaa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	f023 0307 	bic.w	r3, r3, #7
 8012e84:	3308      	adds	r3, #8
 8012e86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	f003 0307 	and.w	r3, r3, #7
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d00b      	beq.n	8012eaa <pvPortMalloc+0x6e>
 8012e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e96:	b672      	cpsid	i
 8012e98:	f383 8811 	msr	BASEPRI, r3
 8012e9c:	f3bf 8f6f 	isb	sy
 8012ea0:	f3bf 8f4f 	dsb	sy
 8012ea4:	b662      	cpsie	i
 8012ea6:	617b      	str	r3, [r7, #20]
 8012ea8:	e7fe      	b.n	8012ea8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d06a      	beq.n	8012f86 <pvPortMalloc+0x14a>
 8012eb0:	4b43      	ldr	r3, [pc, #268]	; (8012fc0 <pvPortMalloc+0x184>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	687a      	ldr	r2, [r7, #4]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d865      	bhi.n	8012f86 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012eba:	4b42      	ldr	r3, [pc, #264]	; (8012fc4 <pvPortMalloc+0x188>)
 8012ebc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012ebe:	4b41      	ldr	r3, [pc, #260]	; (8012fc4 <pvPortMalloc+0x188>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ec4:	e004      	b.n	8012ed0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ec8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ed2:	685b      	ldr	r3, [r3, #4]
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	429a      	cmp	r2, r3
 8012ed8:	d903      	bls.n	8012ee2 <pvPortMalloc+0xa6>
 8012eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d1f1      	bne.n	8012ec6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012ee2:	4b35      	ldr	r3, [pc, #212]	; (8012fb8 <pvPortMalloc+0x17c>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d04c      	beq.n	8012f86 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012eec:	6a3b      	ldr	r3, [r7, #32]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2208      	movs	r2, #8
 8012ef2:	4413      	add	r3, r2
 8012ef4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef8:	681a      	ldr	r2, [r3, #0]
 8012efa:	6a3b      	ldr	r3, [r7, #32]
 8012efc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f00:	685a      	ldr	r2, [r3, #4]
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	1ad2      	subs	r2, r2, r3
 8012f06:	2308      	movs	r3, #8
 8012f08:	005b      	lsls	r3, r3, #1
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d920      	bls.n	8012f50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	4413      	add	r3, r2
 8012f14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f16:	69bb      	ldr	r3, [r7, #24]
 8012f18:	f003 0307 	and.w	r3, r3, #7
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d00b      	beq.n	8012f38 <pvPortMalloc+0xfc>
 8012f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f24:	b672      	cpsid	i
 8012f26:	f383 8811 	msr	BASEPRI, r3
 8012f2a:	f3bf 8f6f 	isb	sy
 8012f2e:	f3bf 8f4f 	dsb	sy
 8012f32:	b662      	cpsie	i
 8012f34:	613b      	str	r3, [r7, #16]
 8012f36:	e7fe      	b.n	8012f36 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f3a:	685a      	ldr	r2, [r3, #4]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	1ad2      	subs	r2, r2, r3
 8012f40:	69bb      	ldr	r3, [r7, #24]
 8012f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f46:	687a      	ldr	r2, [r7, #4]
 8012f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012f4a:	69b8      	ldr	r0, [r7, #24]
 8012f4c:	f000 f8fc 	bl	8013148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012f50:	4b1b      	ldr	r3, [pc, #108]	; (8012fc0 <pvPortMalloc+0x184>)
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	4a19      	ldr	r2, [pc, #100]	; (8012fc0 <pvPortMalloc+0x184>)
 8012f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012f5e:	4b18      	ldr	r3, [pc, #96]	; (8012fc0 <pvPortMalloc+0x184>)
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	4b19      	ldr	r3, [pc, #100]	; (8012fc8 <pvPortMalloc+0x18c>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	429a      	cmp	r2, r3
 8012f68:	d203      	bcs.n	8012f72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012f6a:	4b15      	ldr	r3, [pc, #84]	; (8012fc0 <pvPortMalloc+0x184>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	4a16      	ldr	r2, [pc, #88]	; (8012fc8 <pvPortMalloc+0x18c>)
 8012f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f74:	685a      	ldr	r2, [r3, #4]
 8012f76:	4b11      	ldr	r3, [pc, #68]	; (8012fbc <pvPortMalloc+0x180>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	431a      	orrs	r2, r3
 8012f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f82:	2200      	movs	r2, #0
 8012f84:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012f86:	f7fe ff59 	bl	8011e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f8a:	69fb      	ldr	r3, [r7, #28]
 8012f8c:	f003 0307 	and.w	r3, r3, #7
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d00b      	beq.n	8012fac <pvPortMalloc+0x170>
 8012f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f98:	b672      	cpsid	i
 8012f9a:	f383 8811 	msr	BASEPRI, r3
 8012f9e:	f3bf 8f6f 	isb	sy
 8012fa2:	f3bf 8f4f 	dsb	sy
 8012fa6:	b662      	cpsie	i
 8012fa8:	60fb      	str	r3, [r7, #12]
 8012faa:	e7fe      	b.n	8012faa <pvPortMalloc+0x16e>
	return pvReturn;
 8012fac:	69fb      	ldr	r3, [r7, #28]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3728      	adds	r7, #40	; 0x28
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	20003fec 	.word	0x20003fec
 8012fbc:	20003ff8 	.word	0x20003ff8
 8012fc0:	20003ff0 	.word	0x20003ff0
 8012fc4:	20003fe4 	.word	0x20003fe4
 8012fc8:	20003ff4 	.word	0x20003ff4

08012fcc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b086      	sub	sp, #24
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d04a      	beq.n	8013074 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012fde:	2308      	movs	r3, #8
 8012fe0:	425b      	negs	r3, r3
 8012fe2:	697a      	ldr	r2, [r7, #20]
 8012fe4:	4413      	add	r3, r2
 8012fe6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012fe8:	697b      	ldr	r3, [r7, #20]
 8012fea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012fec:	693b      	ldr	r3, [r7, #16]
 8012fee:	685a      	ldr	r2, [r3, #4]
 8012ff0:	4b22      	ldr	r3, [pc, #136]	; (801307c <vPortFree+0xb0>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	4013      	ands	r3, r2
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d10b      	bne.n	8013012 <vPortFree+0x46>
 8012ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ffe:	b672      	cpsid	i
 8013000:	f383 8811 	msr	BASEPRI, r3
 8013004:	f3bf 8f6f 	isb	sy
 8013008:	f3bf 8f4f 	dsb	sy
 801300c:	b662      	cpsie	i
 801300e:	60fb      	str	r3, [r7, #12]
 8013010:	e7fe      	b.n	8013010 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00b      	beq.n	8013032 <vPortFree+0x66>
 801301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301e:	b672      	cpsid	i
 8013020:	f383 8811 	msr	BASEPRI, r3
 8013024:	f3bf 8f6f 	isb	sy
 8013028:	f3bf 8f4f 	dsb	sy
 801302c:	b662      	cpsie	i
 801302e:	60bb      	str	r3, [r7, #8]
 8013030:	e7fe      	b.n	8013030 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013032:	693b      	ldr	r3, [r7, #16]
 8013034:	685a      	ldr	r2, [r3, #4]
 8013036:	4b11      	ldr	r3, [pc, #68]	; (801307c <vPortFree+0xb0>)
 8013038:	681b      	ldr	r3, [r3, #0]
 801303a:	4013      	ands	r3, r2
 801303c:	2b00      	cmp	r3, #0
 801303e:	d019      	beq.n	8013074 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013040:	693b      	ldr	r3, [r7, #16]
 8013042:	681b      	ldr	r3, [r3, #0]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d115      	bne.n	8013074 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	685a      	ldr	r2, [r3, #4]
 801304c:	4b0b      	ldr	r3, [pc, #44]	; (801307c <vPortFree+0xb0>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	43db      	mvns	r3, r3
 8013052:	401a      	ands	r2, r3
 8013054:	693b      	ldr	r3, [r7, #16]
 8013056:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013058:	f7fe fee2 	bl	8011e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	685a      	ldr	r2, [r3, #4]
 8013060:	4b07      	ldr	r3, [pc, #28]	; (8013080 <vPortFree+0xb4>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4413      	add	r3, r2
 8013066:	4a06      	ldr	r2, [pc, #24]	; (8013080 <vPortFree+0xb4>)
 8013068:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801306a:	6938      	ldr	r0, [r7, #16]
 801306c:	f000 f86c 	bl	8013148 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013070:	f7fe fee4 	bl	8011e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013074:	bf00      	nop
 8013076:	3718      	adds	r7, #24
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}
 801307c:	20003ff8 	.word	0x20003ff8
 8013080:	20003ff0 	.word	0x20003ff0

08013084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013084:	b480      	push	{r7}
 8013086:	b085      	sub	sp, #20
 8013088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801308a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801308e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013090:	4b27      	ldr	r3, [pc, #156]	; (8013130 <prvHeapInit+0xac>)
 8013092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	f003 0307 	and.w	r3, r3, #7
 801309a:	2b00      	cmp	r3, #0
 801309c:	d00c      	beq.n	80130b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	3307      	adds	r3, #7
 80130a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	f023 0307 	bic.w	r3, r3, #7
 80130aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80130ac:	68ba      	ldr	r2, [r7, #8]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	1ad3      	subs	r3, r2, r3
 80130b2:	4a1f      	ldr	r2, [pc, #124]	; (8013130 <prvHeapInit+0xac>)
 80130b4:	4413      	add	r3, r2
 80130b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80130bc:	4a1d      	ldr	r2, [pc, #116]	; (8013134 <prvHeapInit+0xb0>)
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80130c2:	4b1c      	ldr	r3, [pc, #112]	; (8013134 <prvHeapInit+0xb0>)
 80130c4:	2200      	movs	r2, #0
 80130c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	68ba      	ldr	r2, [r7, #8]
 80130cc:	4413      	add	r3, r2
 80130ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80130d0:	2208      	movs	r2, #8
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	1a9b      	subs	r3, r3, r2
 80130d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	f023 0307 	bic.w	r3, r3, #7
 80130de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	4a15      	ldr	r2, [pc, #84]	; (8013138 <prvHeapInit+0xb4>)
 80130e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80130e6:	4b14      	ldr	r3, [pc, #80]	; (8013138 <prvHeapInit+0xb4>)
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	2200      	movs	r2, #0
 80130ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80130ee:	4b12      	ldr	r3, [pc, #72]	; (8013138 <prvHeapInit+0xb4>)
 80130f0:	681b      	ldr	r3, [r3, #0]
 80130f2:	2200      	movs	r2, #0
 80130f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80130fa:	683b      	ldr	r3, [r7, #0]
 80130fc:	68fa      	ldr	r2, [r7, #12]
 80130fe:	1ad2      	subs	r2, r2, r3
 8013100:	683b      	ldr	r3, [r7, #0]
 8013102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013104:	4b0c      	ldr	r3, [pc, #48]	; (8013138 <prvHeapInit+0xb4>)
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	683b      	ldr	r3, [r7, #0]
 801310a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	685b      	ldr	r3, [r3, #4]
 8013110:	4a0a      	ldr	r2, [pc, #40]	; (801313c <prvHeapInit+0xb8>)
 8013112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	4a09      	ldr	r2, [pc, #36]	; (8013140 <prvHeapInit+0xbc>)
 801311a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801311c:	4b09      	ldr	r3, [pc, #36]	; (8013144 <prvHeapInit+0xc0>)
 801311e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013122:	601a      	str	r2, [r3, #0]
}
 8013124:	bf00      	nop
 8013126:	3714      	adds	r7, #20
 8013128:	46bd      	mov	sp, r7
 801312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312e:	4770      	bx	lr
 8013130:	200003e4 	.word	0x200003e4
 8013134:	20003fe4 	.word	0x20003fe4
 8013138:	20003fec 	.word	0x20003fec
 801313c:	20003ff4 	.word	0x20003ff4
 8013140:	20003ff0 	.word	0x20003ff0
 8013144:	20003ff8 	.word	0x20003ff8

08013148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013148:	b480      	push	{r7}
 801314a:	b085      	sub	sp, #20
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013150:	4b28      	ldr	r3, [pc, #160]	; (80131f4 <prvInsertBlockIntoFreeList+0xac>)
 8013152:	60fb      	str	r3, [r7, #12]
 8013154:	e002      	b.n	801315c <prvInsertBlockIntoFreeList+0x14>
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	60fb      	str	r3, [r7, #12]
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	687a      	ldr	r2, [r7, #4]
 8013162:	429a      	cmp	r2, r3
 8013164:	d8f7      	bhi.n	8013156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	68ba      	ldr	r2, [r7, #8]
 8013170:	4413      	add	r3, r2
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	429a      	cmp	r2, r3
 8013176:	d108      	bne.n	801318a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013178:	68fb      	ldr	r3, [r7, #12]
 801317a:	685a      	ldr	r2, [r3, #4]
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	685b      	ldr	r3, [r3, #4]
 8013180:	441a      	add	r2, r3
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	685b      	ldr	r3, [r3, #4]
 8013192:	68ba      	ldr	r2, [r7, #8]
 8013194:	441a      	add	r2, r3
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	429a      	cmp	r2, r3
 801319c:	d118      	bne.n	80131d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	681a      	ldr	r2, [r3, #0]
 80131a2:	4b15      	ldr	r3, [pc, #84]	; (80131f8 <prvInsertBlockIntoFreeList+0xb0>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d00d      	beq.n	80131c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	685a      	ldr	r2, [r3, #4]
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	441a      	add	r2, r3
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	681b      	ldr	r3, [r3, #0]
 80131be:	681a      	ldr	r2, [r3, #0]
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	601a      	str	r2, [r3, #0]
 80131c4:	e008      	b.n	80131d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80131c6:	4b0c      	ldr	r3, [pc, #48]	; (80131f8 <prvInsertBlockIntoFreeList+0xb0>)
 80131c8:	681a      	ldr	r2, [r3, #0]
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	601a      	str	r2, [r3, #0]
 80131ce:	e003      	b.n	80131d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	681a      	ldr	r2, [r3, #0]
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80131d8:	68fa      	ldr	r2, [r7, #12]
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d002      	beq.n	80131e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80131e0:	68fb      	ldr	r3, [r7, #12]
 80131e2:	687a      	ldr	r2, [r7, #4]
 80131e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80131e6:	bf00      	nop
 80131e8:	3714      	adds	r7, #20
 80131ea:	46bd      	mov	sp, r7
 80131ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131f0:	4770      	bx	lr
 80131f2:	bf00      	nop
 80131f4:	20003fe4 	.word	0x20003fe4
 80131f8:	20003fec 	.word	0x20003fec

080131fc <__libc_init_array>:
 80131fc:	b570      	push	{r4, r5, r6, lr}
 80131fe:	4e0d      	ldr	r6, [pc, #52]	; (8013234 <__libc_init_array+0x38>)
 8013200:	4c0d      	ldr	r4, [pc, #52]	; (8013238 <__libc_init_array+0x3c>)
 8013202:	1ba4      	subs	r4, r4, r6
 8013204:	10a4      	asrs	r4, r4, #2
 8013206:	2500      	movs	r5, #0
 8013208:	42a5      	cmp	r5, r4
 801320a:	d109      	bne.n	8013220 <__libc_init_array+0x24>
 801320c:	4e0b      	ldr	r6, [pc, #44]	; (801323c <__libc_init_array+0x40>)
 801320e:	4c0c      	ldr	r4, [pc, #48]	; (8013240 <__libc_init_array+0x44>)
 8013210:	f000 f858 	bl	80132c4 <_init>
 8013214:	1ba4      	subs	r4, r4, r6
 8013216:	10a4      	asrs	r4, r4, #2
 8013218:	2500      	movs	r5, #0
 801321a:	42a5      	cmp	r5, r4
 801321c:	d105      	bne.n	801322a <__libc_init_array+0x2e>
 801321e:	bd70      	pop	{r4, r5, r6, pc}
 8013220:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013224:	4798      	blx	r3
 8013226:	3501      	adds	r5, #1
 8013228:	e7ee      	b.n	8013208 <__libc_init_array+0xc>
 801322a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801322e:	4798      	blx	r3
 8013230:	3501      	adds	r5, #1
 8013232:	e7f2      	b.n	801321a <__libc_init_array+0x1e>
 8013234:	08013400 	.word	0x08013400
 8013238:	08013400 	.word	0x08013400
 801323c:	08013400 	.word	0x08013400
 8013240:	08013404 	.word	0x08013404

08013244 <memcpy>:
 8013244:	b510      	push	{r4, lr}
 8013246:	1e43      	subs	r3, r0, #1
 8013248:	440a      	add	r2, r1
 801324a:	4291      	cmp	r1, r2
 801324c:	d100      	bne.n	8013250 <memcpy+0xc>
 801324e:	bd10      	pop	{r4, pc}
 8013250:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013254:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013258:	e7f7      	b.n	801324a <memcpy+0x6>

0801325a <memset>:
 801325a:	4402      	add	r2, r0
 801325c:	4603      	mov	r3, r0
 801325e:	4293      	cmp	r3, r2
 8013260:	d100      	bne.n	8013264 <memset+0xa>
 8013262:	4770      	bx	lr
 8013264:	f803 1b01 	strb.w	r1, [r3], #1
 8013268:	e7f9      	b.n	801325e <memset+0x4>

0801326a <strncmp>:
 801326a:	b510      	push	{r4, lr}
 801326c:	b16a      	cbz	r2, 801328a <strncmp+0x20>
 801326e:	3901      	subs	r1, #1
 8013270:	1884      	adds	r4, r0, r2
 8013272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8013276:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801327a:	4293      	cmp	r3, r2
 801327c:	d103      	bne.n	8013286 <strncmp+0x1c>
 801327e:	42a0      	cmp	r0, r4
 8013280:	d001      	beq.n	8013286 <strncmp+0x1c>
 8013282:	2b00      	cmp	r3, #0
 8013284:	d1f5      	bne.n	8013272 <strncmp+0x8>
 8013286:	1a98      	subs	r0, r3, r2
 8013288:	bd10      	pop	{r4, pc}
 801328a:	4610      	mov	r0, r2
 801328c:	e7fc      	b.n	8013288 <strncmp+0x1e>

0801328e <strstr>:
 801328e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013290:	7803      	ldrb	r3, [r0, #0]
 8013292:	b17b      	cbz	r3, 80132b4 <strstr+0x26>
 8013294:	4604      	mov	r4, r0
 8013296:	7823      	ldrb	r3, [r4, #0]
 8013298:	4620      	mov	r0, r4
 801329a:	1c66      	adds	r6, r4, #1
 801329c:	b17b      	cbz	r3, 80132be <strstr+0x30>
 801329e:	1e4a      	subs	r2, r1, #1
 80132a0:	1e63      	subs	r3, r4, #1
 80132a2:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80132a6:	b14d      	cbz	r5, 80132bc <strstr+0x2e>
 80132a8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80132ac:	42af      	cmp	r7, r5
 80132ae:	4634      	mov	r4, r6
 80132b0:	d0f7      	beq.n	80132a2 <strstr+0x14>
 80132b2:	e7f0      	b.n	8013296 <strstr+0x8>
 80132b4:	780b      	ldrb	r3, [r1, #0]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	bf18      	it	ne
 80132ba:	2000      	movne	r0, #0
 80132bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132be:	4618      	mov	r0, r3
 80132c0:	e7fc      	b.n	80132bc <strstr+0x2e>
	...

080132c4 <_init>:
 80132c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132c6:	bf00      	nop
 80132c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132ca:	bc08      	pop	{r3}
 80132cc:	469e      	mov	lr, r3
 80132ce:	4770      	bx	lr

080132d0 <_fini>:
 80132d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80132d2:	bf00      	nop
 80132d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80132d6:	bc08      	pop	{r3}
 80132d8:	469e      	mov	lr, r3
 80132da:	4770      	bx	lr
